
/Users/chipmc/Documents/Maker/Particle/Projects/RTC-Watchdog/target/RTC-Watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017adc  2**0
                  CONTENTS
  3 .data         000000c0  2003e280  000d79f0  0000e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004b0  2003e340  2003e340  0001e340  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7ab0  000d7ab0  00017ab0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7ad8  000d7ad8  00017ad8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c2029  00000000  00000000  00017adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010e93  00000000  00000000  000d9b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016533  00000000  00000000  000ea998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002000  00000000  00000000  00100ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000034a8  00000000  00000000  00102ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00033e9f  00000000  00000000  00106373  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026a9d  00000000  00000000  0013a212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e4119  00000000  00000000  00160caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bfdc  00000000  00000000  00244dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	64 73 0d 00                                         ds..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fce9 	bl	d6a04 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fcee 	bl	d6a1a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e280 	.word	0x2003e280
   d4048:	000d79f0 	.word	0x000d79f0
   d404c:	2003e340 	.word	0x2003e340
   d4050:	2003e340 	.word	0x2003e340
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f981 	bl	d6360 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d79e8 	.word	0x000d79e8
   d4080:	000d79ac 	.word	0x000d79ac

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b906 	b.w	d4294 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa17 	bl	d44bc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b933 	b.w	d62fc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bffb 	b.w	d5090 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b801 	b.w	d50a0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bfff 	b.w	d50a0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z19pinInterruptHandlerv>:
 }

// Helper Functions for Particle Functions and other utility functions

void pinInterruptHandler() {                                                      // Interrupt handler - note no i2c commands can be in here!
  alarmFlag = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z19pinInterruptHandlerv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
   d40ba:	4770      	bx	lr
   d40bc:	2003e35c 	.word	0x2003e35c

000d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40c2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40c6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c8:	f88d 3000 	strb.w	r3, [sp]
   d40cc:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ce:	4605      	mov	r5, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d0:	f001 f9a2 	bl	d5418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
   d40d4:	4628      	mov	r0, r5
   d40d6:	b003      	add	sp, #12
   d40d8:	bd30      	pop	{r4, r5, pc}
	...

000d40dc <_Z12setAlarmMode6String>:
  alarmSeconds = tempAlarmSeconds;
  return 1;
}

int setAlarmMode(String command)                                                  // This is where we can enable or disable the sleep interval for the device
{
   d40dc:	b513      	push	{r0, r1, r4, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d40de:	490f      	ldr	r1, [pc, #60]	; (d411c <_Z12setAlarmMode6String+0x40>)
   d40e0:	4604      	mov	r4, r0
   d40e2:	f001 fe96 	bl	d5e12 <_ZNK6String6equalsEPKc>
  char * pEND;
  if (command != "1" && command != "0" && command != "2" && command != "3") return 0; // Before we begin, let's make sure we have a valid input
   d40e6:	b970      	cbnz	r0, d4106 <_Z12setAlarmMode6String+0x2a>
   d40e8:	490d      	ldr	r1, [pc, #52]	; (d4120 <_Z12setAlarmMode6String+0x44>)
   d40ea:	4620      	mov	r0, r4
   d40ec:	f001 fe91 	bl	d5e12 <_ZNK6String6equalsEPKc>
   d40f0:	b948      	cbnz	r0, d4106 <_Z12setAlarmMode6String+0x2a>
   d40f2:	490c      	ldr	r1, [pc, #48]	; (d4124 <_Z12setAlarmMode6String+0x48>)
   d40f4:	4620      	mov	r0, r4
   d40f6:	f001 fe8c 	bl	d5e12 <_ZNK6String6equalsEPKc>
   d40fa:	b920      	cbnz	r0, d4106 <_Z12setAlarmMode6String+0x2a>
   d40fc:	490a      	ldr	r1, [pc, #40]	; (d4128 <_Z12setAlarmMode6String+0x4c>)
   d40fe:	4620      	mov	r0, r4
   d4100:	f001 fe87 	bl	d5e12 <_ZNK6String6equalsEPKc>
   d4104:	b138      	cbz	r0, d4116 <_Z12setAlarmMode6String+0x3a>

  alarmMode = strtol(command,&pEND,10);
   d4106:	220a      	movs	r2, #10
   d4108:	a901      	add	r1, sp, #4
   d410a:	6820      	ldr	r0, [r4, #0]
   d410c:	f002 fd86 	bl	d6c1c <strtol>
   d4110:	4b06      	ldr	r3, [pc, #24]	; (d412c <_Z12setAlarmMode6String+0x50>)
   d4112:	6018      	str	r0, [r3, #0]
   d4114:	2001      	movs	r0, #1
  
  return 1;
}
   d4116:	b002      	add	sp, #8
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	000d7590 	.word	0x000d7590
   d4120:	000d7378 	.word	0x000d7378
   d4124:	000d737a 	.word	0x000d737a
   d4128:	000d737c 	.word	0x000d737c
   d412c:	2003e360 	.word	0x2003e360

000d4130 <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)                                                   // Keep out publishes from getting rate limited
{
   d4130:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                             // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                            // The Particle platform rate limits to one publush per second
   d4132:	4c07      	ldr	r4, [pc, #28]	; (d4150 <_Z20meterParticlePublishv+0x20>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4134:	f000 fd98 	bl	d4c68 <HAL_Timer_Get_Milli_Seconds>
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	1ac0      	subs	r0, r0, r3
   d413c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4140:	d304      	bcc.n	d414c <_Z20meterParticlePublishv+0x1c>
   d4142:	f000 fd91 	bl	d4c68 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4146:	6020      	str	r0, [r4, #0]
   d4148:	2001      	movs	r0, #1
   d414a:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d414c:	2000      	movs	r0, #0
}
   d414e:	bd10      	pop	{r4, pc}
   d4150:	2003e36c 	.word	0x2003e36c

000d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4154:	b508      	push	{r3, lr}
  char data[256];
  unsigned long tempAlarmSeconds = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if (tempAlarmSeconds < 0) return 0;                                             // Make sure it falls in a valid range or send a "fail" result
  snprintf(data, sizeof(data), "Sleep Seconds set to %ld",tempAlarmSeconds);
  if (Particle.connected()) {
      waitUntil(meterParticlePublish);
   d4156:	f7ff ffeb 	bl	d4130 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d415a:	b118      	cbz	r0, d4164 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d415c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4160:	f7ff bfe6 	b.w	d4130 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4164:	f000 ff1c 	bl	d4fa0 <spark_process>
   d4168:	e7f5      	b.n	d4156 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34+0x2>

000d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d416a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d416c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d416e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4170:	b17c      	cbz	r4, d4192 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4172:	6863      	ldr	r3, [r4, #4]
   d4174:	3b01      	subs	r3, #1
   d4176:	6063      	str	r3, [r4, #4]
   d4178:	b95b      	cbnz	r3, d4192 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d417a:	6823      	ldr	r3, [r4, #0]
   d417c:	4620      	mov	r0, r4
   d417e:	689b      	ldr	r3, [r3, #8]
   d4180:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4182:	68a3      	ldr	r3, [r4, #8]
   d4184:	3b01      	subs	r3, #1
   d4186:	60a3      	str	r3, [r4, #8]
   d4188:	b91b      	cbnz	r3, d4192 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d418a:	6823      	ldr	r3, [r4, #0]
   d418c:	4620      	mov	r0, r4
   d418e:	68db      	ldr	r3, [r3, #12]
   d4190:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4192:	4628      	mov	r0, r5
   d4194:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4198 <_Z14publishRTCTimev>:
    RTC.writeTime();                                                              // Write time to the RTC registers
    RTC.readTime();                                                               // Load the current time registers on the RTC
    publishRTCTime();                                                             // Publish the time to the Particle console
}

void publishRTCTime() {                                                           // Publish the time in Particle's format - will print whatever time is in the register (Time or Alarm)
   d4198:	b500      	push	{lr}
   d419a:	b089      	sub	sp, #36	; 0x24
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d419c:	f000 ff08 	bl	d4fb0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d41a0:	b1c0      	cbz	r0, d41d4 <_Z14publishRTCTimev+0x3c>
    waitUntil(meterParticlePublish);
   d41a2:	f7ff ffd7 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
    Particle.publish("RTC Time",Time.timeStr(RTC.date_to_epoch_seconds()),PRIVATE);
   d41a6:	480d      	ldr	r0, [pc, #52]	; (d41dc <_Z14publishRTCTimev+0x44>)
   d41a8:	f000 fbec 	bl	d4984 <_ZN8DSRTCLib21date_to_epoch_secondsEv>
   d41ac:	4601      	mov	r1, r0
   d41ae:	a804      	add	r0, sp, #16
   d41b0:	f001 feb4 	bl	d5f1c <_ZN9TimeClass7timeStrEl>
   d41b4:	4b0a      	ldr	r3, [pc, #40]	; (d41e0 <_Z14publishRTCTimev+0x48>)
   d41b6:	490b      	ldr	r1, [pc, #44]	; (d41e4 <_Z14publishRTCTimev+0x4c>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d41b8:	781b      	ldrb	r3, [r3, #0]
   d41ba:	2200      	movs	r2, #0
   d41bc:	f88d 2000 	strb.w	r2, [sp]
   d41c0:	a802      	add	r0, sp, #8
   d41c2:	9a04      	ldr	r2, [sp, #16]
   d41c4:	f7ff ff7c 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41c8:	a803      	add	r0, sp, #12
   d41ca:	f7ff ffce 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41ce:	a804      	add	r0, sp, #16
   d41d0:	f001 fdab 	bl	d5d2a <_ZN6StringD1Ev>
  }
}
   d41d4:	b009      	add	sp, #36	; 0x24
   d41d6:	f85d fb04 	ldr.w	pc, [sp], #4
   d41da:	bf00      	nop
   d41dc:	2003e344 	.word	0x2003e344
   d41e0:	2003e368 	.word	0x2003e368
   d41e4:	000d737e 	.word	0x000d737e

000d41e8 <_Z12timeCheckRTCv>:
    }
    alarmFlag = false;                                                            // Reset the flag
  }
}

void timeCheckRTC() {
   d41e8:	b538      	push	{r3, r4, r5, lr}
   d41ea:	f000 fd3d 	bl	d4c68 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastTimeCheck = 0;
  static int currentMinute = 0;
  if (millis() >= lastTimeCheck + 1000) {                                         // Check the time every 10 seconds
   d41ee:	4b0d      	ldr	r3, [pc, #52]	; (d4224 <_Z12timeCheckRTCv+0x3c>)
   d41f0:	681a      	ldr	r2, [r3, #0]
   d41f2:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
   d41f6:	4282      	cmp	r2, r0
   d41f8:	461c      	mov	r4, r3
   d41fa:	d812      	bhi.n	d4222 <_Z12timeCheckRTCv+0x3a>
    RTC.readTime();                                                               // Load the time into the registers
   d41fc:	480a      	ldr	r0, [pc, #40]	; (d4228 <_Z12timeCheckRTCv+0x40>)
    if (RTC.getMinutes() != currentMinute) {
   d41fe:	4d0b      	ldr	r5, [pc, #44]	; (d422c <_Z12timeCheckRTCv+0x44>)

void timeCheckRTC() {
  static unsigned long lastTimeCheck = 0;
  static int currentMinute = 0;
  if (millis() >= lastTimeCheck + 1000) {                                         // Check the time every 10 seconds
    RTC.readTime();                                                               // Load the time into the registers
   d4200:	f000 fa50 	bl	d46a4 <_ZN8DSRTCLib8readTimeEv>
    if (RTC.getMinutes() != currentMinute) {
   d4204:	4808      	ldr	r0, [pc, #32]	; (d4228 <_Z12timeCheckRTCv+0x40>)
   d4206:	f000 fb7b 	bl	d4900 <_ZN8DSRTCLib10getMinutesEv>
   d420a:	682b      	ldr	r3, [r5, #0]
   d420c:	4298      	cmp	r0, r3
   d420e:	d005      	beq.n	d421c <_Z12timeCheckRTCv+0x34>
      publishRTCTime();                                                           // Publish the current time to the Particle console
   d4210:	f7ff ffc2 	bl	d4198 <_Z14publishRTCTimev>
      currentMinute = RTC.getMinutes();                                           // Update the current minute
   d4214:	4804      	ldr	r0, [pc, #16]	; (d4228 <_Z12timeCheckRTCv+0x40>)
   d4216:	f000 fb73 	bl	d4900 <_ZN8DSRTCLib10getMinutesEv>
   d421a:	6028      	str	r0, [r5, #0]
   d421c:	f000 fd24 	bl	d4c68 <HAL_Timer_Get_Milli_Seconds>
    }
    lastTimeCheck = millis();                                                     // Update for next check
   d4220:	6020      	str	r0, [r4, #0]
   d4222:	bd38      	pop	{r3, r4, r5, pc}
   d4224:	2003e358 	.word	0x2003e358
   d4228:	2003e344 	.word	0x2003e344
   d422c:	2003e364 	.word	0x2003e364

000d4230 <_Z21syncRTCtoParticleTimev>:
  }
}

void syncRTCtoParticleTime()                                                      // Calling this function sets the RTC clock to the Particle clock 
{    
   d4230:	b510      	push	{r4, lr}
    RTC.setSeconds(Time.second());
   d4232:	f001 fed1 	bl	d5fd8 <_ZN9TimeClass6secondEv>
   d4236:	4c16      	ldr	r4, [pc, #88]	; (d4290 <_Z21syncRTCtoParticleTimev+0x60>)
   d4238:	b2c1      	uxtb	r1, r0
   d423a:	4620      	mov	r0, r4
   d423c:	f000 fc93 	bl	d4b66 <_ZN8DSRTCLib10setSecondsEh>
    RTC.setMinutes(Time.minute());
   d4240:	f001 fec0 	bl	d5fc4 <_ZN9TimeClass6minuteEv>
   d4244:	b2c1      	uxtb	r1, r0
   d4246:	4620      	mov	r0, r4
   d4248:	f000 fc96 	bl	d4b78 <_ZN8DSRTCLib10setMinutesEh>
    RTC.setHours(Time.hour());
   d424c:	f001 feb0 	bl	d5fb0 <_ZN9TimeClass4hourEv>
   d4250:	b2c1      	uxtb	r1, r0
   d4252:	4620      	mov	r0, r4
   d4254:	f000 fc99 	bl	d4b8a <_ZN8DSRTCLib8setHoursEh>
    RTC.setDays(Time.day());
   d4258:	f001 fec8 	bl	d5fec <_ZN9TimeClass3dayEv>
   d425c:	b2c1      	uxtb	r1, r0
   d425e:	4620      	mov	r0, r4
   d4260:	f000 fc9c 	bl	d4b9c <_ZN8DSRTCLib7setDaysEh>
    RTC.setMonths(Time.month());
   d4264:	f001 fecc 	bl	d6000 <_ZN9TimeClass5monthEv>
   d4268:	b2c1      	uxtb	r1, r0
   d426a:	4620      	mov	r0, r4
   d426c:	f000 fc9f 	bl	d4bae <_ZN8DSRTCLib9setMonthsEh>
    RTC.setYears(Time.year());
   d4270:	f001 fece 	bl	d6010 <_ZN9TimeClass4yearEv>
   d4274:	4601      	mov	r1, r0
   d4276:	4620      	mov	r0, r4
   d4278:	f000 fca2 	bl	d4bc0 <_ZN8DSRTCLib8setYearsEj>
    RTC.writeTime();                                                              // Write time to the RTC registers
   d427c:	4620      	mov	r0, r4
   d427e:	f000 faf2 	bl	d4866 <_ZN8DSRTCLib9writeTimeEv>
    RTC.readTime();                                                               // Load the current time registers on the RTC
   d4282:	4620      	mov	r0, r4
   d4284:	f000 fa0e 	bl	d46a4 <_ZN8DSRTCLib8readTimeEv>
    publishRTCTime();                                                             // Publish the time to the Particle console
}
   d4288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    RTC.setDays(Time.day());
    RTC.setMonths(Time.month());
    RTC.setYears(Time.year());
    RTC.writeTime();                                                              // Write time to the RTC registers
    RTC.readTime();                                                               // Load the current time registers on the RTC
    publishRTCTime();                                                             // Publish the time to the Particle console
   d428c:	f7ff bf84 	b.w	d4198 <_Z14publishRTCTimev>
   d4290:	2003e344 	.word	0x2003e344

000d4294 <setup>:
const char releaseNumber[6] = "0.11";                                             // Displays the release on the console
int alarmMode = 0;                                                                // Sets the sleep mode (0-none, 1-defined seconds, 2-repeating interval)
int alarmSeconds = 10;                                                            // How long will we sleep in mode 1
volatile bool alarmFlag = false;

void setup()   {              
   d4294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4296:	2300      	movs	r3, #0
   d4298:	2204      	movs	r2, #4
   d429a:	492e      	ldr	r1, [pc, #184]	; (d4354 <setup+0xc0>)
   d429c:	482e      	ldr	r0, [pc, #184]	; (d4358 <setup+0xc4>)
   d429e:	f000 fe6f 	bl	d4f80 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d42a2:	4a2e      	ldr	r2, [pc, #184]	; (d435c <setup+0xc8>)
   d42a4:	492e      	ldr	r1, [pc, #184]	; (d4360 <setup+0xcc>)
   d42a6:	482f      	ldr	r0, [pc, #188]	; (d4364 <setup+0xd0>)
   d42a8:	f000 ff96 	bl	d51d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d42ac:	4a2e      	ldr	r2, [pc, #184]	; (d4368 <setup+0xd4>)
   d42ae:	492f      	ldr	r1, [pc, #188]	; (d436c <setup+0xd8>)
   d42b0:	482c      	ldr	r0, [pc, #176]	; (d4364 <setup+0xd0>)
   d42b2:	f000 ff91 	bl	d51d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d42b6:	4a2e      	ldr	r2, [pc, #184]	; (d4370 <setup+0xdc>)
   d42b8:	492e      	ldr	r1, [pc, #184]	; (d4374 <setup+0xe0>)
   d42ba:	482a      	ldr	r0, [pc, #168]	; (d4364 <setup+0xd0>)
   d42bc:	f000 ff8c 	bl	d51d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  
  Particle.function("Set-Timezone",setTimeZone);                                  // Set the local timezone (-12,12)
  Particle.function("Alarm-Mode", setAlarmMode);                                  // Sets the sleep mode (0-none, 1-defined seconds, 2-repeating interval)
  Particle.function("Alarm-Seconds",setAlarmSeconds);                             // Allows us to sleep for a set nuber of seconds       

  Time.zone((float)EEPROM.read(0));                                               // Retain time zone setting through power cycle
   d42c0:	f002 f8b6 	bl	d6430 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d42c4:	2000      	movs	r0, #0
   d42c6:	f000 fce7 	bl	d4c98 <HAL_EEPROM_Read>
   d42ca:	ee07 0a90 	vmov	s15, r0
   d42ce:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d42d2:	f001 fe07 	bl	d5ee4 <_ZN9TimeClass4zoneEf>

  RTC.start();                                                                    // Ensure RTC oscillator is running, if not already  
   d42d6:	4828      	ldr	r0, [pc, #160]	; (d4378 <setup+0xe4>)
   d42d8:	f000 fc81 	bl	d4bde <_ZN8DSRTCLib5startEv>
  RTC.enable_interrupt();                                                         // This stops the 1 Hz squarewave on INT and allows us to set alarms
   d42dc:	4826      	ldr	r0, [pc, #152]	; (d4378 <setup+0xe4>)
   d42de:	f000 fafe 	bl	d48de <_ZN8DSRTCLib16enable_interruptEv>

  if(!RTC.time_is_set() && Particle.connected()) {                                // set a time, if none set already...
   d42e2:	4825      	ldr	r0, [pc, #148]	; (d4378 <setup+0xe4>)
   d42e4:	f000 fae7 	bl	d48b6 <_ZN8DSRTCLib11time_is_setEv>
   d42e8:	4604      	mov	r4, r0
   d42ea:	b910      	cbnz	r0, d42f2 <setup+0x5e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42ec:	f000 fe60 	bl	d4fb0 <spark_cloud_flag_connected>
   d42f0:	b998      	cbnz	r0, d431a <setup+0x86>
    Particle.publish("Timer","Clock Not Set",PRIVATE);                            // With a coin cell battery, this should be a rare event
    syncRTCtoParticleTime();                                                      // We will set the DS1339 clock to the Particle time
  }
  
  if(!RTC.time_is_set() && Particle.connected()) {                                // If the oscillator is borked (or not really talking to the RTC), try to warn about it
   d42f2:	4821      	ldr	r0, [pc, #132]	; (d4378 <setup+0xe4>)
   d42f4:	f000 fadf 	bl	d48b6 <_ZN8DSRTCLib11time_is_setEv>
   d42f8:	4604      	mov	r4, r0
   d42fa:	b910      	cbnz	r0, d4302 <setup+0x6e>
   d42fc:	f000 fe58 	bl	d4fb0 <spark_cloud_flag_connected>
   d4300:	b9d0      	cbnz	r0, d4338 <setup+0xa4>
    Particle.publish("Timer","Check the oscillator",PRIVATE);                     // With a coin cell battery, this should be a rare event
  }

  attachInterrupt(INT_PIN, pinInterruptHandler, FALLING);                         // Attach an interrupt so we can test the alarms
   d4302:	4b1e      	ldr	r3, [pc, #120]	; (d437c <setup+0xe8>)
   d4304:	491e      	ldr	r1, [pc, #120]	; (d4380 <setup+0xec>)
   d4306:	8818      	ldrh	r0, [r3, #0]
   d4308:	2300      	movs	r3, #0
   d430a:	9300      	str	r3, [sp, #0]
   d430c:	2202      	movs	r2, #2
   d430e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4312:	f001 fa8b 	bl	d582c <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4316:	b004      	add	sp, #16
   d4318:	bd10      	pop	{r4, pc}
   d431a:	4b1a      	ldr	r3, [pc, #104]	; (d4384 <setup+0xf0>)

  RTC.start();                                                                    // Ensure RTC oscillator is running, if not already  
  RTC.enable_interrupt();                                                         // This stops the 1 Hz squarewave on INT and allows us to set alarms

  if(!RTC.time_is_set() && Particle.connected()) {                                // set a time, if none set already...
    Particle.publish("Timer","Clock Not Set",PRIVATE);                            // With a coin cell battery, this should be a rare event
   d431c:	4a1a      	ldr	r2, [pc, #104]	; (d4388 <setup+0xf4>)
   d431e:	781b      	ldrb	r3, [r3, #0]
   d4320:	491a      	ldr	r1, [pc, #104]	; (d438c <setup+0xf8>)
   d4322:	f88d 4000 	strb.w	r4, [sp]
   d4326:	a802      	add	r0, sp, #8
   d4328:	f7ff feca 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d432c:	a803      	add	r0, sp, #12
   d432e:	f7ff ff1c 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    syncRTCtoParticleTime();                                                      // We will set the DS1339 clock to the Particle time
   d4332:	f7ff ff7d 	bl	d4230 <_Z21syncRTCtoParticleTimev>
   d4336:	e7dc      	b.n	d42f2 <setup+0x5e>
   d4338:	4b12      	ldr	r3, [pc, #72]	; (d4384 <setup+0xf0>)
  }
  
  if(!RTC.time_is_set() && Particle.connected()) {                                // If the oscillator is borked (or not really talking to the RTC), try to warn about it
    Particle.publish("Timer","Check the oscillator",PRIVATE);                     // With a coin cell battery, this should be a rare event
   d433a:	4a15      	ldr	r2, [pc, #84]	; (d4390 <setup+0xfc>)
   d433c:	781b      	ldrb	r3, [r3, #0]
   d433e:	4913      	ldr	r1, [pc, #76]	; (d438c <setup+0xf8>)
   d4340:	f88d 4000 	strb.w	r4, [sp]
   d4344:	a802      	add	r0, sp, #8
   d4346:	f7ff febb 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d434a:	a803      	add	r0, sp, #12
   d434c:	f7ff ff0d 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4350:	e7d7      	b.n	d4302 <setup+0x6e>
   d4352:	bf00      	nop
   d4354:	000d7478 	.word	0x000d7478
   d4358:	000d7387 	.word	0x000d7387
   d435c:	000d738f 	.word	0x000d738f
   d4360:	000d453d 	.word	0x000d453d
   d4364:	000d51ad 	.word	0x000d51ad
   d4368:	000d739c 	.word	0x000d739c
   d436c:	000d40dd 	.word	0x000d40dd
   d4370:	000d73a7 	.word	0x000d73a7
   d4374:	000d45f9 	.word	0x000d45f9
   d4378:	2003e344 	.word	0x2003e344
   d437c:	2003e284 	.word	0x2003e284
   d4380:	000d40b5 	.word	0x000d40b5
   d4384:	2003e368 	.word	0x2003e368
   d4388:	000d73b5 	.word	0x000d73b5
   d438c:	000d73c3 	.word	0x000d73c3
   d4390:	000d73c9 	.word	0x000d73c9

000d4394 <_Z16secondsTillAlarmv>:
    waitUntil(meterParticlePublish);
    Particle.publish("RTC Time",Time.timeStr(RTC.date_to_epoch_seconds()),PRIVATE);
  }
}

void secondsTillAlarm() {
   d4394:	b510      	push	{r4, lr}
   d4396:	b08c      	sub	sp, #48	; 0x30
   d4398:	f000 fe0a 	bl	d4fb0 <spark_cloud_flag_connected>
   d439c:	4c0e      	ldr	r4, [pc, #56]	; (d43d8 <_Z16secondsTillAlarmv+0x44>)
  if (Particle.connected()) {
   d439e:	b1a0      	cbz	r0, d43ca <_Z16secondsTillAlarmv+0x36>
    char data[32];
    snprintf(data,sizeof(data),"Going to sleep for %i seconds",alarmSeconds);
   d43a0:	6823      	ldr	r3, [r4, #0]
   d43a2:	4a0e      	ldr	r2, [pc, #56]	; (d43dc <_Z16secondsTillAlarmv+0x48>)
   d43a4:	2120      	movs	r1, #32
   d43a6:	a804      	add	r0, sp, #16
   d43a8:	f000 fe9a 	bl	d50e0 <snprintf>
    waitUntil(meterParticlePublish);
   d43ac:	f7ff fed2 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
   d43b0:	4b0b      	ldr	r3, [pc, #44]	; (d43e0 <_Z16secondsTillAlarmv+0x4c>)
    Particle.publish("Alarm", data, PRIVATE);
   d43b2:	490c      	ldr	r1, [pc, #48]	; (d43e4 <_Z16secondsTillAlarmv+0x50>)
   d43b4:	781b      	ldrb	r3, [r3, #0]
   d43b6:	2200      	movs	r2, #0
   d43b8:	f88d 2000 	strb.w	r2, [sp]
   d43bc:	a802      	add	r0, sp, #8
   d43be:	aa04      	add	r2, sp, #16
   d43c0:	f7ff fe7e 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d43c4:	a803      	add	r0, sp, #12
   d43c6:	f7ff fed0 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  RTC.alarmSeconds(alarmSeconds);
   d43ca:	6821      	ldr	r1, [r4, #0]
   d43cc:	4806      	ldr	r0, [pc, #24]	; (d43e8 <_Z16secondsTillAlarmv+0x54>)
   d43ce:	f000 fbba 	bl	d4b46 <_ZN8DSRTCLib12alarmSecondsEm>
}
   d43d2:	b00c      	add	sp, #48	; 0x30
   d43d4:	bd10      	pop	{r4, pc}
   d43d6:	bf00      	nop
   d43d8:	2003e280 	.word	0x2003e280
   d43dc:	000d73de 	.word	0x000d73de
   d43e0:	2003e368 	.word	0x2003e368
   d43e4:	000d73fc 	.word	0x000d73fc
   d43e8:	2003e344 	.word	0x2003e344

000d43ec <_Z20minuteRepeatingAlarmv>:

void minuteRepeatingAlarm()                                                       // Shows the repeating alarm frequency
{                                                       
   d43ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d43ee:	f000 fddf 	bl	d4fb0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d43f2:	b170      	cbz	r0, d4412 <_Z20minuteRepeatingAlarmv+0x26>
    waitUntil(meterParticlePublish);
   d43f4:	f7ff feae 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
   d43f8:	4b0b      	ldr	r3, [pc, #44]	; (d4428 <_Z20minuteRepeatingAlarmv+0x3c>)
    Particle.publish("Alarm","Repeating every minute",PRIVATE);                   // Message to let you know what is going on
   d43fa:	490c      	ldr	r1, [pc, #48]	; (d442c <_Z20minuteRepeatingAlarmv+0x40>)
   d43fc:	781b      	ldrb	r3, [r3, #0]
   d43fe:	2200      	movs	r2, #0
   d4400:	f88d 2000 	strb.w	r2, [sp]
   d4404:	a802      	add	r0, sp, #8
   d4406:	4a0a      	ldr	r2, [pc, #40]	; (d4430 <_Z20minuteRepeatingAlarmv+0x44>)
   d4408:	f7ff fe5a 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d440c:	a803      	add	r0, sp, #12
   d440e:	f7ff feac 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }                          
  RTC.setAlarmRepeat(EVERY_MINUTE);                                               // if alarming every minute, time registers larger than 1 second (hour, etc.) are don't-care
   d4412:	2116      	movs	r1, #22
   d4414:	4807      	ldr	r0, [pc, #28]	; (d4434 <_Z20minuteRepeatingAlarmv+0x48>)
   d4416:	f000 f9ec 	bl	d47f2 <_ZN8DSRTCLib14setAlarmRepeatEh>
  RTC.writeAlarm();                                                               // Choices are: EVERY_SECOND, EVERY_MINUTE, EVERY_HOUR, EVERY_DAY, EVERY_WEEK, EVERY_MONTH
   d441a:	4806      	ldr	r0, [pc, #24]	; (d4434 <_Z20minuteRepeatingAlarmv+0x48>)
   d441c:	f000 f9a4 	bl	d4768 <_ZN8DSRTCLib10writeAlarmEv>
}
   d4420:	b005      	add	sp, #20
   d4422:	f85d fb04 	ldr.w	pc, [sp], #4
   d4426:	bf00      	nop
   d4428:	2003e368 	.word	0x2003e368
   d442c:	000d73fc 	.word	0x000d73fc
   d4430:	000d7402 	.word	0x000d7402
   d4434:	2003e344 	.word	0x2003e344

000d4438 <_Z20hourlyRepeatingAlarmv>:

void hourlyRepeatingAlarm()                                                       // Sets an alarm that goes off every hour (long form)
{
   d4438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d443a:	f000 fdb9 	bl	d4fb0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d443e:	b170      	cbz	r0, d445e <_Z20hourlyRepeatingAlarmv+0x26>
    waitUntil(meterParticlePublish);
   d4440:	f7ff fe88 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
   d4444:	4b19      	ldr	r3, [pc, #100]	; (d44ac <_Z20hourlyRepeatingAlarmv+0x74>)
    Particle.publish("Alarm","Repeating every hour",PRIVATE);                     // Message to let you know what is going on
   d4446:	491a      	ldr	r1, [pc, #104]	; (d44b0 <_Z20hourlyRepeatingAlarmv+0x78>)
   d4448:	781b      	ldrb	r3, [r3, #0]
   d444a:	2200      	movs	r2, #0
   d444c:	f88d 2000 	strb.w	r2, [sp]
   d4450:	a802      	add	r0, sp, #8
   d4452:	4a18      	ldr	r2, [pc, #96]	; (d44b4 <_Z20hourlyRepeatingAlarmv+0x7c>)
   d4454:	f7ff fe34 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d4458:	a803      	add	r0, sp, #12
   d445a:	f7ff fe86 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  RTC.setAlarmRepeat(EVERY_HOUR);                                                 // There is no DS1339 setting for 'alarm once' - user must shut off the alarm after it goes off.
   d445e:	2114      	movs	r1, #20
   d4460:	4815      	ldr	r0, [pc, #84]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d4462:	f000 f9c6 	bl	d47f2 <_ZN8DSRTCLib14setAlarmRepeatEh>

  RTC.setSeconds(0);                                                              // Here we can set an alarm frequency
   d4466:	2100      	movs	r1, #0
   d4468:	4813      	ldr	r0, [pc, #76]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d446a:	f000 fb7c 	bl	d4b66 <_ZN8DSRTCLib10setSecondsEh>
  RTC.setMinutes(1);
   d446e:	2101      	movs	r1, #1
   d4470:	4811      	ldr	r0, [pc, #68]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d4472:	f000 fb81 	bl	d4b78 <_ZN8DSRTCLib10setMinutesEh>
  RTC.setHours(0);
   d4476:	2100      	movs	r1, #0
   d4478:	480f      	ldr	r0, [pc, #60]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d447a:	f000 fb86 	bl	d4b8a <_ZN8DSRTCLib8setHoursEh>
  RTC.setDays(0);
   d447e:	2100      	movs	r1, #0
   d4480:	480d      	ldr	r0, [pc, #52]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d4482:	f000 fb8b 	bl	d4b9c <_ZN8DSRTCLib7setDaysEh>
  RTC.setMonths(0);
   d4486:	2100      	movs	r1, #0
   d4488:	480b      	ldr	r0, [pc, #44]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d448a:	f000 fb90 	bl	d4bae <_ZN8DSRTCLib9setMonthsEh>
  RTC.setYears(0);
   d448e:	2100      	movs	r1, #0
   d4490:	4809      	ldr	r0, [pc, #36]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d4492:	f000 fb95 	bl	d4bc0 <_ZN8DSRTCLib8setYearsEj>

  RTC.writeAlarm();                                                               // Write the alarm to the registers
   d4496:	4808      	ldr	r0, [pc, #32]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d4498:	f000 f966 	bl	d4768 <_ZN8DSRTCLib10writeAlarmEv>
  RTC.readAlarm();                                                                // This puts the Alarm time into the registers
   d449c:	4806      	ldr	r0, [pc, #24]	; (d44b8 <_Z20hourlyRepeatingAlarmv+0x80>)
   d449e:	f000 f92a 	bl	d46f6 <_ZN8DSRTCLib9readAlarmEv>

  publishRTCTime();                                                               // This will publish the alarm time
   d44a2:	f7ff fe79 	bl	d4198 <_Z14publishRTCTimev>
 }
   d44a6:	b005      	add	sp, #20
   d44a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d44ac:	2003e368 	.word	0x2003e368
   d44b0:	000d73fc 	.word	0x000d73fc
   d44b4:	000d7419 	.word	0x000d7419
   d44b8:	2003e344 	.word	0x2003e344

000d44bc <loop>:

  attachInterrupt(INT_PIN, pinInterruptHandler, FALLING);                         // Attach an interrupt so we can test the alarms
}

void loop()                     
{
   d44bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  switch (alarmMode) {
   d44be:	4c19      	ldr	r4, [pc, #100]	; (d4524 <loop+0x68>)
   d44c0:	6823      	ldr	r3, [r4, #0]
   d44c2:	2b03      	cmp	r3, #3
   d44c4:	d810      	bhi.n	d44e8 <loop+0x2c>
   d44c6:	e8df f003 	tbb	[pc, r3]
   d44ca:	0502      	.short	0x0502
   d44cc:	0b08      	.short	0x0b08
    case 0: 
      timeCheckRTC();                                                                // Check the time each second and update the registers
   d44ce:	f7ff fe8b 	bl	d41e8 <_Z12timeCheckRTCv>
      break;
   d44d2:	e009      	b.n	d44e8 <loop+0x2c>
    case 1:
      secondsTillAlarm();                                                         // Set an alarm to go off in alarmSeconds (which is set in a Particle function - default 10)
   d44d4:	f7ff ff5e 	bl	d4394 <_Z16secondsTillAlarmv>
   d44d8:	e004      	b.n	d44e4 <loop+0x28>
      alarmMode = 0;                                                              // Go back to default state                                                        
    break;
    case 2: 
      minuteRepeatingAlarm();                                                     // Sets an alarm to go off every minute
   d44da:	f7ff ff87 	bl	d43ec <_Z20minuteRepeatingAlarmv>
   d44de:	e001      	b.n	d44e4 <loop+0x28>
      alarmMode = 0;                                                              // Go back to default state
    break;
    case 3:
      hourlyRepeatingAlarm();                                                     // You guessed it...every hour
   d44e0:	f7ff ffaa 	bl	d4438 <_Z20hourlyRepeatingAlarmv>
      alarmMode = 0;                                                              // back
   d44e4:	2300      	movs	r3, #0
   d44e6:	6023      	str	r3, [r4, #0]
    break;
  }  

  if (alarmFlag) {                                                                // Checks the Alarm flag set in the interrupt handler
   d44e8:	4b0f      	ldr	r3, [pc, #60]	; (d4528 <loop+0x6c>)
   d44ea:	781a      	ldrb	r2, [r3, #0]
   d44ec:	461c      	mov	r4, r3
   d44ee:	b1b2      	cbz	r2, d451e <loop+0x62>
    RTC.clear_interrupt();                                                        // tell RTC to clear its interrupt flag and drop the INT line
   d44f0:	480e      	ldr	r0, [pc, #56]	; (d452c <loop+0x70>)
   d44f2:	f000 f9e8 	bl	d48c6 <_ZN8DSRTCLib15clear_interruptEv>
   d44f6:	f000 fd5b 	bl	d4fb0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d44fa:	b170      	cbz	r0, d451a <loop+0x5e>
      waitUntil(meterParticlePublish);
   d44fc:	f7ff fe2a 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
   d4500:	4b0b      	ldr	r3, [pc, #44]	; (d4530 <loop+0x74>)
      Particle.publish("Alarm","Alarm detected", PRIVATE);
   d4502:	490c      	ldr	r1, [pc, #48]	; (d4534 <loop+0x78>)
   d4504:	781b      	ldrb	r3, [r3, #0]
   d4506:	2200      	movs	r2, #0
   d4508:	f88d 2000 	strb.w	r2, [sp]
   d450c:	a802      	add	r0, sp, #8
   d450e:	4a0a      	ldr	r2, [pc, #40]	; (d4538 <loop+0x7c>)
   d4510:	f7ff fdd6 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d4514:	a803      	add	r0, sp, #12
   d4516:	f7ff fe28 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    alarmFlag = false;                                                            // Reset the flag
   d451a:	2300      	movs	r3, #0
   d451c:	7023      	strb	r3, [r4, #0]
  }
}
   d451e:	b004      	add	sp, #16
   d4520:	bd10      	pop	{r4, pc}
   d4522:	bf00      	nop
   d4524:	2003e360 	.word	0x2003e360
   d4528:	2003e35c 	.word	0x2003e35c
   d452c:	2003e344 	.word	0x2003e344
   d4530:	2003e368 	.word	0x2003e368
   d4534:	000d73fc 	.word	0x000d73fc
   d4538:	000d742e 	.word	0x000d742e

000d453c <_Z11setTimeZone6String>:
void pinInterruptHandler() {                                                      // Interrupt handler - note no i2c commands can be in here!
  alarmFlag = true;
}

int setTimeZone(String command)
{
   d453c:	b570      	push	{r4, r5, r6, lr}
   d453e:	b0cc      	sub	sp, #304	; 0x130
   d4540:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4542:	f001 fd2e 	bl	d5fa2 <_ZN9TimeClass3nowEv>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
   d4546:	220a      	movs	r2, #10

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
   d4548:	4606      	mov	r6, r0
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
   d454a:	a905      	add	r1, sp, #20
   d454c:	6820      	ldr	r0, [r4, #0]
   d454e:	f002 fb65 	bl	d6c1c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;           // Make sure it falls in a valid range or send a "fail" result
   d4552:	b2c4      	uxtb	r4, r0
   d4554:	f104 030c 	add.w	r3, r4, #12
   d4558:	b2db      	uxtb	r3, r3
   d455a:	2b18      	cmp	r3, #24
   d455c:	d840      	bhi.n	d45e0 <_Z11setTimeZone6String+0xa4>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
   d455e:	b243      	sxtb	r3, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;           // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
   d4560:	ee07 3a90 	vmov	s15, r3
   d4564:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   d4568:	9303      	str	r3, [sp, #12]
   d456a:	f001 fcbb 	bl	d5ee4 <_ZN9TimeClass4zoneEf>
  EEPROM.update(0,tempTimeZoneOffset);                                            // Store the new value in EEPROM Position 0
   d456e:	f001 ff5f 	bl	d6430 <_Z21__fetch_global_EEPROMv>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4572:	4621      	mov	r1, r4
   d4574:	2000      	movs	r0, #0
   d4576:	f000 fb97 	bl	d4ca8 <HAL_EEPROM_Write>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d457a:	9b03      	ldr	r3, [sp, #12]
   d457c:	4a1a      	ldr	r2, [pc, #104]	; (d45e8 <_Z11setTimeZone6String+0xac>)
   d457e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4582:	a80c      	add	r0, sp, #48	; 0x30
   d4584:	f000 fdac 	bl	d50e0 <snprintf>
   d4588:	f000 fd12 	bl	d4fb0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d458c:	b320      	cbz	r0, d45d8 <_Z11setTimeZone6String+0x9c>
   d458e:	4d17      	ldr	r5, [pc, #92]	; (d45ec <_Z11setTimeZone6String+0xb0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4590:	2400      	movs	r4, #0
      waitUntil(meterParticlePublish);
   d4592:	f7ff fddf 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4596:	782b      	ldrb	r3, [r5, #0]
      Particle.publish("Time", data, PRIVATE);
   d4598:	4915      	ldr	r1, [pc, #84]	; (d45f0 <_Z11setTimeZone6String+0xb4>)
   d459a:	f88d 4000 	strb.w	r4, [sp]
   d459e:	aa0c      	add	r2, sp, #48	; 0x30
   d45a0:	a808      	add	r0, sp, #32
   d45a2:	f7ff fd8d 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d45a6:	a809      	add	r0, sp, #36	; 0x24
   d45a8:	f7ff fddf 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      waitUntil(meterParticlePublish);
   d45ac:	f7ff fdd2 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
      Particle.publish("Particle Time",Time.timeStr(t), PRIVATE);
   d45b0:	4631      	mov	r1, r6
   d45b2:	a808      	add	r0, sp, #32
   d45b4:	f001 fcb2 	bl	d5f1c <_ZN9TimeClass7timeStrEl>
   d45b8:	9b08      	ldr	r3, [sp, #32]
   d45ba:	9303      	str	r3, [sp, #12]
   d45bc:	9a03      	ldr	r2, [sp, #12]
   d45be:	782b      	ldrb	r3, [r5, #0]
   d45c0:	490c      	ldr	r1, [pc, #48]	; (d45f4 <_Z11setTimeZone6String+0xb8>)
   d45c2:	f88d 4000 	strb.w	r4, [sp]
   d45c6:	a806      	add	r0, sp, #24
   d45c8:	f7ff fd7a 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d45cc:	a807      	add	r0, sp, #28
   d45ce:	f7ff fdcc 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45d2:	a808      	add	r0, sp, #32
   d45d4:	f001 fba9 	bl	d5d2a <_ZN6StringD1Ev>
  }
  syncRTCtoParticleTime();
   d45d8:	f7ff fe2a 	bl	d4230 <_Z21syncRTCtoParticleTimev>
  return 1;
   d45dc:	2001      	movs	r0, #1
   d45de:	e000      	b.n	d45e2 <_Z11setTimeZone6String+0xa6>
{
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                           // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;           // Make sure it falls in a valid range or send a "fail" result
   d45e0:	2000      	movs	r0, #0
      waitUntil(meterParticlePublish);
      Particle.publish("Particle Time",Time.timeStr(t), PRIVATE);
  }
  syncRTCtoParticleTime();
  return 1;
}
   d45e2:	b04c      	add	sp, #304	; 0x130
   d45e4:	bd70      	pop	{r4, r5, r6, pc}
   d45e6:	bf00      	nop
   d45e8:	000d743d 	.word	0x000d743d
   d45ec:	2003e368 	.word	0x2003e368
   d45f0:	000d7382 	.word	0x000d7382
   d45f4:	000d7451 	.word	0x000d7451

000d45f8 <_Z15setAlarmSeconds6String>:

int setAlarmSeconds(String command)
{
   d45f8:	b510      	push	{r4, lr}
   d45fa:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  unsigned long tempAlarmSeconds = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d45fc:	220a      	movs	r2, #10
   d45fe:	a903      	add	r1, sp, #12
   d4600:	6800      	ldr	r0, [r0, #0]
   d4602:	f002 fb0b 	bl	d6c1c <strtol>
  if (tempAlarmSeconds < 0) return 0;                                             // Make sure it falls in a valid range or send a "fail" result
  snprintf(data, sizeof(data), "Sleep Seconds set to %ld",tempAlarmSeconds);
   d4606:	4a0f      	ldr	r2, [pc, #60]	; (d4644 <_Z15setAlarmSeconds6String+0x4c>)
   d4608:	4603      	mov	r3, r0

int setAlarmSeconds(String command)
{
  char * pEND;
  char data[256];
  unsigned long tempAlarmSeconds = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d460a:	4604      	mov	r4, r0
  if (tempAlarmSeconds < 0) return 0;                                             // Make sure it falls in a valid range or send a "fail" result
  snprintf(data, sizeof(data), "Sleep Seconds set to %ld",tempAlarmSeconds);
   d460c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4610:	a806      	add	r0, sp, #24
   d4612:	f000 fd65 	bl	d50e0 <snprintf>
   d4616:	f000 fccb 	bl	d4fb0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d461a:	b170      	cbz	r0, d463a <_Z15setAlarmSeconds6String+0x42>
      waitUntil(meterParticlePublish);
   d461c:	f7ff fd9a 	bl	d4154 <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.34>
   d4620:	4b09      	ldr	r3, [pc, #36]	; (d4648 <_Z15setAlarmSeconds6String+0x50>)
      Particle.publish("Time", data, PRIVATE);
   d4622:	490a      	ldr	r1, [pc, #40]	; (d464c <_Z15setAlarmSeconds6String+0x54>)
   d4624:	781b      	ldrb	r3, [r3, #0]
   d4626:	2200      	movs	r2, #0
   d4628:	f88d 2000 	strb.w	r2, [sp]
   d462c:	a804      	add	r0, sp, #16
   d462e:	aa06      	add	r2, sp, #24
   d4630:	f7ff fd46 	bl	d40c0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.40.constprop.46>
   d4634:	a805      	add	r0, sp, #20
   d4636:	f7ff fd98 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  alarmSeconds = tempAlarmSeconds;
   d463a:	4b05      	ldr	r3, [pc, #20]	; (d4650 <_Z15setAlarmSeconds6String+0x58>)
  return 1;
}
   d463c:	2001      	movs	r0, #1
  snprintf(data, sizeof(data), "Sleep Seconds set to %ld",tempAlarmSeconds);
  if (Particle.connected()) {
      waitUntil(meterParticlePublish);
      Particle.publish("Time", data, PRIVATE);
  }
  alarmSeconds = tempAlarmSeconds;
   d463e:	601c      	str	r4, [r3, #0]
  return 1;
}
   d4640:	b046      	add	sp, #280	; 0x118
   d4642:	bd10      	pop	{r4, pc}
   d4644:	000d745f 	.word	0x000d745f
   d4648:	2003e368 	.word	0x2003e368
   d464c:	000d7382 	.word	0x000d7382
   d4650:	2003e280 	.word	0x2003e280

000d4654 <_GLOBAL__sub_I_INT_PIN>:
  if(millis() - lastPublish >= 1000) {                                            // The Particle platform rate limits to one publush per second
    lastPublish = millis();
    return 1;
  }
  else return 0;
}
   d4654:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4656:	4b06      	ldr	r3, [pc, #24]	; (d4670 <_GLOBAL__sub_I_INT_PIN+0x1c>)
   d4658:	2201      	movs	r2, #1
   d465a:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d465c:	f000 fb34 	bl	d4cc8 <HAL_Pin_Map>
#include <DSRTCLib.h>                                                             // This is the library for the DS1339

int INT_PIN = D3;                                                                 // INTerrupt pin from the RTC. 

// Prototypes and System Mode calls
DS1339 RTC = DS1339(INT_PIN);                                                     // Instantiate the library - need to lose the int number input
   d4660:	4b04      	ldr	r3, [pc, #16]	; (d4674 <_GLOBAL__sub_I_INT_PIN+0x20>)
   d4662:	4805      	ldr	r0, [pc, #20]	; (d4678 <_GLOBAL__sub_I_INT_PIN+0x24>)
   d4664:	6819      	ldr	r1, [r3, #0]
  if(millis() - lastPublish >= 1000) {                                            // The Particle platform rate limits to one publush per second
    lastPublish = millis();
    return 1;
  }
  else return 0;
}
   d4666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <DSRTCLib.h>                                                             // This is the library for the DS1339

int INT_PIN = D3;                                                                 // INTerrupt pin from the RTC. 

// Prototypes and System Mode calls
DS1339 RTC = DS1339(INT_PIN);                                                     // Instantiate the library - need to lose the int number input
   d466a:	f000 bac4 	b.w	d4bf6 <_ZN6DS1339C1Ei>
   d466e:	bf00      	nop
   d4670:	2003e368 	.word	0x2003e368
   d4674:	2003e284 	.word	0x2003e284
   d4678:	2003e344 	.word	0x2003e344

000d467c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d467c:	6803      	ldr	r3, [r0, #0]
   d467e:	b2c9      	uxtb	r1, r1
   d4680:	689b      	ldr	r3, [r3, #8]
   d4682:	4718      	bx	r3

000d4684 <_ZN8DSRTCLib4initEv>:
DSRTCLib::DSRTCLib(int int_pin) : _rtc_int_pin(int_pin)
{
  init();
}

void DSRTCLib::init() {
   d4684:	b510      	push	{r4, lr}
   d4686:	4604      	mov	r4, r0
	Wire.begin();
   d4688:	f001 fee6 	bl	d6458 <_Z19__fetch_global_Wirev>
   d468c:	f001 f8a6 	bl	d57dc <_ZN7TwoWire5beginEv>
	pinMode(_rtc_int_pin, INPUT);
   d4690:	8a20      	ldrh	r0, [r4, #16]
   d4692:	2100      	movs	r1, #0
   d4694:	f001 fea2 	bl	d63dc <pinMode>
	digitalWrite(_rtc_int_pin, HIGH);	// enable software pullup resistor on RTC interrupt pin
   d4698:	8a20      	ldrh	r0, [r4, #16]
   d469a:	2101      	movs	r1, #1
}
   d469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void DSRTCLib::init() {
	Wire.begin();
	pinMode(_rtc_int_pin, INPUT);
	digitalWrite(_rtc_int_pin, HIGH);	// enable software pullup resistor on RTC interrupt pin
   d46a0:	f001 bead 	b.w	d63fe <digitalWrite>

000d46a4 <_ZN8DSRTCLib8readTimeEv>:
}

// Aquire data from the RTC chip in BCD format
// refresh the buffer
void DSRTCLib::readTime(void)
{
   d46a4:	b538      	push	{r3, r4, r5, lr}
   d46a6:	4604      	mov	r4, r0
// use the Wire lib to connect to tho rtc
// reset the register pointer to zero
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
   d46a8:	f001 fed6 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46ac:	2168      	movs	r1, #104	; 0x68
   d46ae:	f001 f8ad 	bl	d580c <_ZN7TwoWire17beginTransmissionEi>
	I2C_WRITE((uint8_t)0x00); // Explicit cast is to hack around http://code.google.com/p/arduino/issues/detail?id=527
   d46b2:	f001 fed1 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46b6:	6803      	ldr	r3, [r0, #0]
   d46b8:	2100      	movs	r1, #0
   d46ba:	689b      	ldr	r3, [r3, #8]
   d46bc:	4798      	blx	r3
	Wire.endTransmission();
   d46be:	f001 fecb 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46c2:	f001 f8aa 	bl	d581a <_ZN7TwoWire15endTransmissionEv>

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DSRTCLib_CTRL_ID, 7);
   d46c6:	f001 fec7 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46ca:	2207      	movs	r2, #7
   d46cc:	2168      	movs	r1, #104	; 0x68
   d46ce:	f001 f894 	bl	d57fa <_ZN7TwoWire11requestFromEii>
   d46d2:	1ca5      	adds	r5, r4, #2
   d46d4:	3409      	adds	r4, #9
	for(int i=0; i<7; i++)
	{
	// store data in raw bcd format
		if (Wire.available())
   d46d6:	f001 febf 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46da:	6803      	ldr	r3, [r0, #0]
   d46dc:	691b      	ldr	r3, [r3, #16]
   d46de:	4798      	blx	r3
   d46e0:	b128      	cbz	r0, d46ee <_ZN8DSRTCLib8readTimeEv+0x4a>
			rtc_bcd[i]=I2C_READ();
   d46e2:	f001 feb9 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46e6:	6803      	ldr	r3, [r0, #0]
   d46e8:	695b      	ldr	r3, [r3, #20]
   d46ea:	4798      	blx	r3
   d46ec:	7028      	strb	r0, [r5, #0]
   d46ee:	3501      	adds	r5, #1
	I2C_WRITE((uint8_t)0x00); // Explicit cast is to hack around http://code.google.com/p/arduino/issues/detail?id=527
	Wire.endTransmission();

// request the 7 bytes of data    (secs, min, hr, dow, date. mth, yr)
	Wire.requestFrom(DSRTCLib_CTRL_ID, 7);
	for(int i=0; i<7; i++)
   d46f0:	42a5      	cmp	r5, r4
   d46f2:	d1f0      	bne.n	d46d6 <_ZN8DSRTCLib8readTimeEv+0x32>
	{
	// store data in raw bcd format
		if (Wire.available())
			rtc_bcd[i]=I2C_READ();
	}
}
   d46f4:	bd38      	pop	{r3, r4, r5, pc}

000d46f6 <_ZN8DSRTCLib9readAlarmEv>:

// Read the current alarm value. Note that the repeat flags and DY/DT are removed from the result.
void DSRTCLib::readAlarm(void)
{
   d46f6:	b570      	push	{r4, r5, r6, lr}
   d46f8:	4604      	mov	r4, r0
        //alarm_repeat = 0;
        byte temp;
// use the Wire lib to connect to tho rtc
// point to start of Alarm1 registers
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
   d46fa:	f001 fead 	bl	d6458 <_Z19__fetch_global_Wirev>
   d46fe:	2168      	movs	r1, #104	; 0x68
   d4700:	f001 f884 	bl	d580c <_ZN7TwoWire17beginTransmissionEi>
	I2C_WRITE((uint8_t)DSRTCLib_ARLM1);
   d4704:	f001 fea8 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4708:	6803      	ldr	r3, [r0, #0]
   d470a:	2107      	movs	r1, #7
   d470c:	689b      	ldr	r3, [r3, #8]
   d470e:	4798      	blx	r3
	Wire.endTransmission();
   d4710:	f001 fea2 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4714:	f001 f881 	bl	d581a <_ZN7TwoWire15endTransmissionEv>

// request the *4* bytes of data (secs, min, hr, dow/date). Note the format is nearly identical, except for the choice of dayOfWeek vs. date,
// and that the topmost bit of each helps determine if/how the alarm repeats.
	Wire.requestFrom(DSRTCLib_CTRL_ID, 4);
   d4718:	f001 fe9e 	bl	d6458 <_Z19__fetch_global_Wirev>
   d471c:	2204      	movs	r2, #4
   d471e:	2168      	movs	r1, #104	; 0x68
   d4720:	f001 f86b 	bl	d57fa <_ZN7TwoWire11requestFromEii>
   d4724:	1ca5      	adds	r5, r4, #2
   d4726:	1da6      	adds	r6, r4, #6
	for(int i=0; i<4; i++)
	{
                // store data in raw bcd format
		if (Wire.available())
   d4728:	f001 fe96 	bl	d6458 <_Z19__fetch_global_Wirev>
   d472c:	6803      	ldr	r3, [r0, #0]
   d472e:	691b      	ldr	r3, [r3, #16]
   d4730:	4798      	blx	r3
   d4732:	b138      	cbz	r0, d4744 <_ZN8DSRTCLib9readAlarmEv+0x4e>
		{
			temp = I2C_READ();
   d4734:	f001 fe90 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4738:	6803      	ldr	r3, [r0, #0]
   d473a:	695b      	ldr	r3, [r3, #20]
   d473c:	4798      	blx	r3
			rtc_bcd[i] = temp & B01111111;
   d473e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d4742:	7028      	strb	r0, [r5, #0]
   d4744:	3501      	adds	r5, #1
	Wire.endTransmission();

// request the *4* bytes of data (secs, min, hr, dow/date). Note the format is nearly identical, except for the choice of dayOfWeek vs. date,
// and that the topmost bit of each helps determine if/how the alarm repeats.
	Wire.requestFrom(DSRTCLib_CTRL_ID, 4);
	for(int i=0; i<4; i++)
   d4746:	42b5      	cmp	r5, r6
   d4748:	d1ee      	bne.n	d4728 <_ZN8DSRTCLib9readAlarmEv+0x32>
		}
	}

	// 4th byte read may contain either a date or DayOfWeek, depending on the value of the DY/DT flag.
	// For laziness sake we read it into the DayOfWeek field regardless (rtc_bcd[3]). Correct as needed...
        if(rtc_bcd[3] & B01000000) // DY/DT set: DayOfWeek
   d474a:	7963      	ldrb	r3, [r4, #5]
   d474c:	f003 0240 	and.w	r2, r3, #64	; 0x40
   d4750:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   d4754:	b12a      	cbz	r2, d4762 <_ZN8DSRTCLib9readAlarmEv+0x6c>
        {
           rtc_bcd[3] &= B10111111; // clear DY/DT flag
   d4756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   d475a:	7163      	strb	r3, [r4, #5]
           rtc_bcd[4] = 0; // alarm *date* undefined
   d475c:	2300      	movs	r3, #0
   d475e:	71a3      	strb	r3, [r4, #6]
   d4760:	bd70      	pop	{r4, r5, r6, pc}
        }
        else
        {
            rtc_bcd[4] = rtc_bcd[3];
   d4762:	71a3      	strb	r3, [r4, #6]
            rtc_bcd[3] = 0; // alarm dayOfWeek undefined
   d4764:	7161      	strb	r1, [r4, #5]
   d4766:	bd70      	pop	{r4, r5, r6, pc}

000d4768 <_ZN8DSRTCLib10writeAlarmEv>:
// FIXME: automatically set alarm interrupt after writing new alarm? Nah...

// Write the BCD alarm value in the buffer to the alarm registers.
// If an alarm repeat mode has been specified, poke those bytes into the buffer before sending.
void DSRTCLib::writeAlarm(void)
{
   d4768:	b510      	push	{r4, lr}
   d476a:	4604      	mov	r4, r0
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
   d476c:	f001 fe74 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4770:	2168      	movs	r1, #104	; 0x68
   d4772:	f001 f84b 	bl	d580c <_ZN7TwoWire17beginTransmissionEi>
	I2C_WRITE((uint8_t)DSRTCLib_ARLM1); // set register pointer
   d4776:	f001 fe6f 	bl	d6458 <_Z19__fetch_global_Wirev>
   d477a:	6803      	ldr	r3, [r0, #0]
   d477c:	2107      	movs	r1, #7
   d477e:	689b      	ldr	r3, [r3, #8]
   d4780:	4798      	blx	r3

        I2C_WRITE(rtc_bcd[DSRTCLib_SEC] | ((alarm_repeat & B00000001 ) << 7)); // A1M1
   d4782:	f001 fe69 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4786:	7863      	ldrb	r3, [r4, #1]
   d4788:	78a1      	ldrb	r1, [r4, #2]
   d478a:	01db      	lsls	r3, r3, #7
   d478c:	b2db      	uxtb	r3, r3
   d478e:	4319      	orrs	r1, r3
   d4790:	f7ff ff74 	bl	d467c <_ZN7TwoWire5writeEi>
        I2C_WRITE(rtc_bcd[DSRTCLib_MIN] | ((alarm_repeat & B00000010 ) << 6)); // A1M2
   d4794:	f001 fe60 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4798:	7863      	ldrb	r3, [r4, #1]
   d479a:	78e1      	ldrb	r1, [r4, #3]
   d479c:	019b      	lsls	r3, r3, #6
   d479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   d47a2:	4319      	orrs	r1, r3
   d47a4:	f7ff ff6a 	bl	d467c <_ZN7TwoWire5writeEi>
        I2C_WRITE(rtc_bcd[DSRTCLib_HR] | ((alarm_repeat & B00000100 ) << 5)); // A1M3
   d47a8:	f001 fe56 	bl	d6458 <_Z19__fetch_global_Wirev>
   d47ac:	7863      	ldrb	r3, [r4, #1]
   d47ae:	7921      	ldrb	r1, [r4, #4]
   d47b0:	015b      	lsls	r3, r3, #5
   d47b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   d47b6:	4319      	orrs	r1, r3
   d47b8:	f7ff ff60 	bl	d467c <_ZN7TwoWire5writeEi>

        // Check if we are using date or DayOfWeek and send the appropriate value
        if(alarm_repeat & B00001000) // DayOfWeek
   d47bc:	7863      	ldrb	r3, [r4, #1]
   d47be:	071b      	lsls	r3, r3, #28
   d47c0:	d507      	bpl.n	d47d2 <_ZN8DSRTCLib10writeAlarmEv+0x6a>
        {
            // send DOW as 4th alarm reg byte
            I2C_WRITE(rtc_bcd[DSRTCLib_DOW] | ((alarm_repeat & B00011000 ) << 3)); // A1M4 and DY/DT
   d47c2:	f001 fe49 	bl	d6458 <_Z19__fetch_global_Wirev>
   d47c6:	7863      	ldrb	r3, [r4, #1]
   d47c8:	7961      	ldrb	r1, [r4, #5]
   d47ca:	00db      	lsls	r3, r3, #3
   d47cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   d47d0:	e006      	b.n	d47e0 <_ZN8DSRTCLib10writeAlarmEv+0x78>
        }
        else // date
        {
            // send date as 4th alarm reg byte
            I2C_WRITE(rtc_bcd[DSRTCLib_DATE] | ((alarm_repeat & B00011000 ) << 3)); // A1M4 and DY/DT
   d47d2:	f001 fe41 	bl	d6458 <_Z19__fetch_global_Wirev>
   d47d6:	7863      	ldrb	r3, [r4, #1]
   d47d8:	79a1      	ldrb	r1, [r4, #6]
   d47da:	00db      	lsls	r3, r3, #3
   d47dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   d47e0:	4319      	orrs	r1, r3
   d47e2:	f7ff ff4b 	bl	d467c <_ZN7TwoWire5writeEi>
        }

	Wire.endTransmission();
   d47e6:	f001 fe37 	bl	d6458 <_Z19__fetch_global_Wirev>
}
   d47ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        {
            // send date as 4th alarm reg byte
            I2C_WRITE(rtc_bcd[DSRTCLib_DATE] | ((alarm_repeat & B00011000 ) << 3)); // A1M4 and DY/DT
        }

	Wire.endTransmission();
   d47ee:	f001 b814 	b.w	d581a <_ZN7TwoWire15endTransmissionEv>

000d47f2 <_ZN8DSRTCLib14setAlarmRepeatEh>:
        writeAlarm();
}

void DSRTCLib::setAlarmRepeat(byte repeat)
{
        alarm_repeat = repeat;
   d47f2:	7041      	strb	r1, [r0, #1]
   d47f4:	4770      	bx	lr

000d47f6 <_ZN8DSRTCLib11getRegisterEh>:
}


unsigned char DSRTCLib::getRegister(unsigned char registerNumber)
{
   d47f6:	b510      	push	{r4, lr}
   d47f8:	460c      	mov	r4, r1
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
   d47fa:	f001 fe2d 	bl	d6458 <_Z19__fetch_global_Wirev>
   d47fe:	2168      	movs	r1, #104	; 0x68
   d4800:	f001 f804 	bl	d580c <_ZN7TwoWire17beginTransmissionEi>
	I2C_WRITE(registerNumber);
   d4804:	f001 fe28 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4808:	6803      	ldr	r3, [r0, #0]
   d480a:	4621      	mov	r1, r4
   d480c:	689b      	ldr	r3, [r3, #8]
   d480e:	4798      	blx	r3
	Wire.endTransmission();
   d4810:	f001 fe22 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4814:	f001 f801 	bl	d581a <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom(DSRTCLib_CTRL_ID, 1);
   d4818:	f001 fe1e 	bl	d6458 <_Z19__fetch_global_Wirev>
   d481c:	2201      	movs	r2, #1
   d481e:	2168      	movs	r1, #104	; 0x68
   d4820:	f000 ffeb 	bl	d57fa <_ZN7TwoWire11requestFromEii>

	return I2C_READ();
   d4824:	f001 fe18 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4828:	6803      	ldr	r3, [r0, #0]
   d482a:	695b      	ldr	r3, [r3, #20]
   d482c:	4798      	blx	r3
}
   d482e:	b2c0      	uxtb	r0, r0
   d4830:	bd10      	pop	{r4, pc}

000d4832 <_ZN8DSRTCLib11setRegisterEhh>:

void DSRTCLib::setRegister(unsigned char registerNumber, unsigned char value)
{
   d4832:	b538      	push	{r3, r4, r5, lr}
   d4834:	4614      	mov	r4, r2
   d4836:	460d      	mov	r5, r1
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
   d4838:	f001 fe0e 	bl	d6458 <_Z19__fetch_global_Wirev>
   d483c:	2168      	movs	r1, #104	; 0x68
   d483e:	f000 ffe5 	bl	d580c <_ZN7TwoWire17beginTransmissionEi>
	I2C_WRITE(registerNumber); // set register pointer
   d4842:	f001 fe09 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4846:	6803      	ldr	r3, [r0, #0]
   d4848:	4629      	mov	r1, r5
   d484a:	689b      	ldr	r3, [r3, #8]
   d484c:	4798      	blx	r3

	I2C_WRITE(value);
   d484e:	f001 fe03 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4852:	6803      	ldr	r3, [r0, #0]
   d4854:	4621      	mov	r1, r4
   d4856:	689b      	ldr	r3, [r3, #8]
   d4858:	4798      	blx	r3

	Wire.endTransmission();
   d485a:	f001 fdfd 	bl	d6458 <_Z19__fetch_global_Wirev>
}
   d485e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
	I2C_WRITE(registerNumber); // set register pointer

	I2C_WRITE(value);

	Wire.endTransmission();
   d4862:	f000 bfda 	b.w	d581a <_ZN7TwoWire15endTransmissionEv>

000d4866 <_ZN8DSRTCLib9writeTimeEv>:
}

// update the data on the IC from the bcd formatted data in the buffer

void DSRTCLib::writeTime(void)
{
   d4866:	b570      	push	{r4, r5, r6, lr}
   d4868:	4604      	mov	r4, r0
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
   d486a:	f001 fdf5 	bl	d6458 <_Z19__fetch_global_Wirev>
   d486e:	2168      	movs	r1, #104	; 0x68
   d4870:	f000 ffcc 	bl	d580c <_ZN7TwoWire17beginTransmissionEi>
	I2C_WRITE((uint8_t)0x00); // reset register pointer
   d4874:	f001 fdf0 	bl	d6458 <_Z19__fetch_global_Wirev>
   d4878:	6803      	ldr	r3, [r0, #0]
   d487a:	2100      	movs	r1, #0
   d487c:	689b      	ldr	r3, [r3, #8]
   d487e:	4798      	blx	r3
   d4880:	1c65      	adds	r5, r4, #1
   d4882:	f104 0608 	add.w	r6, r4, #8
	for(int i=0; i<7; i++)
	{
		I2C_WRITE(rtc_bcd[i]);
   d4886:	f001 fde7 	bl	d6458 <_Z19__fetch_global_Wirev>
   d488a:	6803      	ldr	r3, [r0, #0]
   d488c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4890:	689b      	ldr	r3, [r3, #8]
   d4892:	4798      	blx	r3

void DSRTCLib::writeTime(void)
{
	Wire.beginTransmission(DSRTCLib_CTRL_ID);
	I2C_WRITE((uint8_t)0x00); // reset register pointer
	for(int i=0; i<7; i++)
   d4894:	42b5      	cmp	r5, r6
   d4896:	d1f6      	bne.n	d4886 <_ZN8DSRTCLib9writeTimeEv+0x20>
	{
		I2C_WRITE(rtc_bcd[i]);
	}
	Wire.endTransmission();
   d4898:	f001 fdde 	bl	d6458 <_Z19__fetch_global_Wirev>
   d489c:	f000 ffbd 	bl	d581a <_ZN7TwoWire15endTransmissionEv>

	// clear the Oscillator Stop Flag
        setRegister(DSRTCLib_STATUS, getRegister(DSRTCLib_STATUS) & !DSRTCLib_STATUS_OSF);
   d48a0:	210f      	movs	r1, #15
   d48a2:	4620      	mov	r0, r4
   d48a4:	f7ff ffa7 	bl	d47f6 <_ZN8DSRTCLib11getRegisterEh>
   d48a8:	4620      	mov	r0, r4
   d48aa:	2200      	movs	r2, #0
   d48ac:	210f      	movs	r1, #15
}
   d48ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		I2C_WRITE(rtc_bcd[i]);
	}
	Wire.endTransmission();

	// clear the Oscillator Stop Flag
        setRegister(DSRTCLib_STATUS, getRegister(DSRTCLib_STATUS) & !DSRTCLib_STATUS_OSF);
   d48b2:	f7ff bfbe 	b.w	d4832 <_ZN8DSRTCLib11setRegisterEhh>

000d48b6 <_ZN8DSRTCLib11time_is_setEv>:

	Wire.endTransmission();
}

unsigned char DSRTCLib::time_is_set()
{
   d48b6:	b508      	push	{r3, lr}
  // Return TRUE if Oscillator Stop Flag is clear (osc. not stopped since last time setting), FALSE otherwise
  byte asdf = ((getRegister(DSRTCLib_STATUS) & DSRTCLib_STATUS_OSF) == 0);
   d48b8:	210f      	movs	r1, #15
   d48ba:	f7ff ff9c 	bl	d47f6 <_ZN8DSRTCLib11getRegisterEh>
  return asdf;
   d48be:	43c0      	mvns	r0, r0
}
   d48c0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   d48c4:	bd08      	pop	{r3, pc}

000d48c6 <_ZN8DSRTCLib15clear_interruptEv>:
{
   setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) & !DSRTCLib_SP_A1IE);
}

void DSRTCLib::clear_interrupt()
{
   d48c6:	b510      	push	{r4, lr}
   setRegister(DSRTCLib_STATUS, getRegister(DSRTCLib_STATUS) & !DSRTCLib_STATUS_A1F);
   d48c8:	210f      	movs	r1, #15
{
   setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) & !DSRTCLib_SP_A1IE);
}

void DSRTCLib::clear_interrupt()
{
   d48ca:	4604      	mov	r4, r0
   setRegister(DSRTCLib_STATUS, getRegister(DSRTCLib_STATUS) & !DSRTCLib_STATUS_A1F);
   d48cc:	f7ff ff93 	bl	d47f6 <_ZN8DSRTCLib11getRegisterEh>
   d48d0:	4620      	mov	r0, r4
   d48d2:	2200      	movs	r2, #0
   d48d4:	210f      	movs	r1, #15
}
   d48d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) & !DSRTCLib_SP_A1IE);
}

void DSRTCLib::clear_interrupt()
{
   setRegister(DSRTCLib_STATUS, getRegister(DSRTCLib_STATUS) & !DSRTCLib_STATUS_A1F);
   d48da:	f7ff bfaa 	b.w	d4832 <_ZN8DSRTCLib11setRegisterEhh>

000d48de <_ZN8DSRTCLib16enable_interruptEv>:
  byte asdf = (getRegister(DSRTCLib_SP) & DSRTCLib_SP_A1IE);
  return asdf;
}

void DSRTCLib::enable_interrupt()
{
   d48de:	b510      	push	{r4, lr}
   d48e0:	4604      	mov	r4, r0
   clear_interrupt();
   d48e2:	f7ff fff0 	bl	d48c6 <_ZN8DSRTCLib15clear_interruptEv>
   setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) | DSRTCLib_SP_INTCN | DSRTCLib_SP_A1IE); // map alarm interrupt to INT1 and enable interrupt
   d48e6:	210e      	movs	r1, #14
   d48e8:	4620      	mov	r0, r4
   d48ea:	f7ff ff84 	bl	d47f6 <_ZN8DSRTCLib11getRegisterEh>
   d48ee:	f040 0205 	orr.w	r2, r0, #5
   d48f2:	b2d2      	uxtb	r2, r2
   d48f4:	4620      	mov	r0, r4
   d48f6:	210e      	movs	r1, #14
}
   d48f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void DSRTCLib::enable_interrupt()
{
   clear_interrupt();
   setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) | DSRTCLib_SP_INTCN | DSRTCLib_SP_A1IE); // map alarm interrupt to INT1 and enable interrupt
   d48fc:	f7ff bf99 	b.w	d4832 <_ZN8DSRTCLib11setRegisterEhh>

000d4900 <_ZN8DSRTCLib10getMinutesEv>:
    return bcd2bin(rtc_bcd[DSRTCLib_SEC]);
}

unsigned char DSRTCLib::getMinutes()
{
    return bcd2bin(rtc_bcd[DSRTCLib_MIN]);
   d4900:	78c3      	ldrb	r3, [r0, #3]
   d4902:	1118      	asrs	r0, r3, #4
   d4904:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4908:	f003 030f 	and.w	r3, r3, #15
   d490c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
}
   d4910:	b2c0      	uxtb	r0, r0
   d4912:	4770      	bx	lr

000d4914 <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh>:

unsigned long DSRTCLib::date_to_epoch_seconds(unsigned int year, byte month, byte day, byte hour, byte minute, byte second)
{

  //gracefully handle 2- and 4-digit year formats
  if (year > 1999)
   d4914:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
  {
     year -= 2000;
   d4918:	bf28      	it	cs
   d491a:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
    return 2000 + bcd2bin(rtc_bcd[DSRTCLib_YR]);
}


unsigned long DSRTCLib::date_to_epoch_seconds(unsigned int year, byte month, byte day, byte hour, byte minute, byte second)
{
   d491e:	b530      	push	{r4, r5, lr}

// NB: The multiplication-by-constants below is intentionally left expanded for readability; GCC is smart and will optimize them to single constants during compilation.


  //         Whole year seconds                      Cumulative total of seconds contributed by elapsed leap year days
  unsigned long sse = (((unsigned long)year)*365*24*60*60)   +   ((((unsigned long)year+3)>>2) + ((unsigned long)year%4==0 && (unsigned long)month>2))*24*60*60   +   \
   d4920:	4d14      	ldr	r5, [pc, #80]	; (d4974 <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh+0x60>)
   d4922:	1ccc      	adds	r4, r1, #3
   d4924:	0788      	lsls	r0, r1, #30
   d4926:	fb05 f501 	mul.w	r5, r5, r1
   d492a:	ea4f 0494 	mov.w	r4, r4, lsr #2
   d492e:	d104      	bne.n	d493a <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh+0x26>
   d4930:	2a02      	cmp	r2, #2
   d4932:	bf94      	ite	ls
   d4934:	2100      	movls	r1, #0
   d4936:	2101      	movhi	r1, #1
   d4938:	e000      	b.n	d493c <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh+0x28>
   d493a:	2100      	movs	r1, #0
         ((unsigned long)monthdays[month-1] + (unsigned long)day-1) *24*60*60   +   ((unsigned long)hour*60*60)   +   ((unsigned long)minute*60)   + (unsigned long)second;
         // Seconds in days since start of year                      hours                      minutes           sec
  sse += 946684800; // correct for difference between DSRTCLib epoch and UNIX epoch
  return sse;
   d493c:	480e      	ldr	r0, [pc, #56]	; (d4978 <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh+0x64>)
// NB: The multiplication-by-constants below is intentionally left expanded for readability; GCC is smart and will optimize them to single constants during compilation.


  //         Whole year seconds                      Cumulative total of seconds contributed by elapsed leap year days
  unsigned long sse = (((unsigned long)year)*365*24*60*60)   +   ((((unsigned long)year+3)>>2) + ((unsigned long)year%4==0 && (unsigned long)month>2))*24*60*60   +   \
         ((unsigned long)monthdays[month-1] + (unsigned long)day-1) *24*60*60   +   ((unsigned long)hour*60*60)   +   ((unsigned long)minute*60)   + (unsigned long)second;
   d493e:	3a01      	subs	r2, #1
         // Seconds in days since start of year                      hours                      minutes           sec
  sse += 946684800; // correct for difference between DSRTCLib epoch and UNIX epoch
  return sse;
   d4940:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   d4944:	f89d 0010 	ldrb.w	r0, [sp, #16]
   d4948:	4413      	add	r3, r2
   d494a:	4423      	add	r3, r4
   d494c:	440b      	add	r3, r1
   d494e:	4a0b      	ldr	r2, [pc, #44]	; (d497c <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh+0x68>)
   d4950:	f89d 1014 	ldrb.w	r1, [sp, #20]
   d4954:	440a      	add	r2, r1
   d4956:	213c      	movs	r1, #60	; 0x3c
   d4958:	fb11 2200 	smlabb	r2, r1, r0, r2
   d495c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d4960:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d4964:	fb00 2201 	mla	r2, r0, r1, r2
}
   d4968:	4805      	ldr	r0, [pc, #20]	; (d4980 <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh+0x6c>)
  //         Whole year seconds                      Cumulative total of seconds contributed by elapsed leap year days
  unsigned long sse = (((unsigned long)year)*365*24*60*60)   +   ((((unsigned long)year+3)>>2) + ((unsigned long)year%4==0 && (unsigned long)month>2))*24*60*60   +   \
         ((unsigned long)monthdays[month-1] + (unsigned long)day-1) *24*60*60   +   ((unsigned long)hour*60*60)   +   ((unsigned long)minute*60)   + (unsigned long)second;
         // Seconds in days since start of year                      hours                      minutes           sec
  sse += 946684800; // correct for difference between DSRTCLib epoch and UNIX epoch
  return sse;
   d496a:	442a      	add	r2, r5
}
   d496c:	fb00 2003 	mla	r0, r0, r3, r2
   d4970:	bd30      	pop	{r4, r5, pc}
   d4972:	bf00      	nop
   d4974:	01e13380 	.word	0x01e13380
   d4978:	000d7480 	.word	0x000d7480
   d497c:	386bf200 	.word	0x386bf200
   d4980:	00015180 	.word	0x00015180

000d4984 <_ZN8DSRTCLib21date_to_epoch_secondsEv>:


unsigned long DSRTCLib::date_to_epoch_seconds()
{
   d4984:	b5f0      	push	{r4, r5, r6, r7, lr}
     unsigned long asdf = date_to_epoch_seconds(int(bcd2bin(rtc_bcd[DSRTCLib_YR])), bcd2bin(rtc_bcd[DSRTCLib_MTH]), bcd2bin(rtc_bcd[DSRTCLib_DATE]), bcd2bin(rtc_bcd[DSRTCLib_HR]), bcd2bin(rtc_bcd[DSRTCLib_MIN]), bcd2bin(rtc_bcd[DSRTCLib_SEC]));
   d4986:	7982      	ldrb	r2, [r0, #6]
   d4988:	79c1      	ldrb	r1, [r0, #7]
   d498a:	7a07      	ldrb	r7, [r0, #8]
   d498c:	7886      	ldrb	r6, [r0, #2]
   d498e:	78c5      	ldrb	r5, [r0, #3]
   d4990:	7904      	ldrb	r4, [r0, #4]
   d4992:	1113      	asrs	r3, r2, #4
   d4994:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4998:	f002 020f 	and.w	r2, r2, #15
   d499c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d49a0:	110a      	asrs	r2, r1, #4
   d49a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d49a6:	f001 010f 	and.w	r1, r1, #15
   d49aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   d49ae:	1139      	asrs	r1, r7, #4
   d49b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d49b4:	f007 070f 	and.w	r7, r7, #15
   d49b8:	eb07 0141 	add.w	r1, r7, r1, lsl #1
   d49bc:	1137      	asrs	r7, r6, #4
   d49be:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   d49c2:	f006 060f 	and.w	r6, r6, #15
  return sse;
}


unsigned long DSRTCLib::date_to_epoch_seconds()
{
   d49c6:	b085      	sub	sp, #20
     unsigned long asdf = date_to_epoch_seconds(int(bcd2bin(rtc_bcd[DSRTCLib_YR])), bcd2bin(rtc_bcd[DSRTCLib_MTH]), bcd2bin(rtc_bcd[DSRTCLib_DATE]), bcd2bin(rtc_bcd[DSRTCLib_HR]), bcd2bin(rtc_bcd[DSRTCLib_MIN]), bcd2bin(rtc_bcd[DSRTCLib_SEC]));
   d49c8:	eb06 0647 	add.w	r6, r6, r7, lsl #1
   d49cc:	b2f6      	uxtb	r6, r6
   d49ce:	9602      	str	r6, [sp, #8]
   d49d0:	112e      	asrs	r6, r5, #4
   d49d2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   d49d6:	f005 050f 	and.w	r5, r5, #15
   d49da:	eb05 0546 	add.w	r5, r5, r6, lsl #1
   d49de:	b2ed      	uxtb	r5, r5
   d49e0:	9501      	str	r5, [sp, #4]
   d49e2:	1125      	asrs	r5, r4, #4
   d49e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   d49e8:	f004 040f 	and.w	r4, r4, #15
   d49ec:	eb04 0445 	add.w	r4, r4, r5, lsl #1
   d49f0:	b2e4      	uxtb	r4, r4
   d49f2:	9400      	str	r4, [sp, #0]
   d49f4:	b2db      	uxtb	r3, r3
   d49f6:	b2d2      	uxtb	r2, r2
   d49f8:	b2c9      	uxtb	r1, r1
   d49fa:	f7ff ff8b 	bl	d4914 <_ZN8DSRTCLib21date_to_epoch_secondsEjhhhhh>
     return asdf;
}
   d49fe:	b005      	add	sp, #20
   d4a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4a04 <_ZN8DSRTCLib21epoch_seconds_to_dateEm>:
   //unsigned long whole_years;
   unsigned long days_since_first_of_year;
   unsigned long days_to_month;
   //unsigned long day_of_week;

   if(seconds_left >= 946684800)
   d4a04:	4b47      	ldr	r3, [pc, #284]	; (d4b24 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0x120>)
   d4a06:	4299      	cmp	r1, r3
}



void DSRTCLib::epoch_seconds_to_date(unsigned long seconds_left)
{
   d4a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   //unsigned long whole_years;
   unsigned long days_since_first_of_year;
   unsigned long days_to_month;
   //unsigned long day_of_week;

   if(seconds_left >= 946684800)
   d4a0a:	f240 8081 	bls.w	d4b10 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0x10c>
   {
	   seconds_left -= 946684800; // correct for difference between DS1337/DS1339 and UNIX epochs.
   d4a0e:	4b46      	ldr	r3, [pc, #280]	; (d4b28 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0x124>)
   d4a10:	4e46      	ldr	r6, [pc, #280]	; (d4b2c <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0x128>)
   d4a12:	440b      	add	r3, r1

	   seconds_left_2 = seconds_left / 60; // seconds_left_2 = "whole_minutes"
	   rtc_bcd[DSRTCLib_SEC] = bin2bcd(seconds_left - (60 * seconds_left_2));                 // leftover seconds
   d4a14:	223c      	movs	r2, #60	; 0x3c
   d4a16:	fbb3 f2f2 	udiv	r2, r3, r2
   d4a1a:	b2d2      	uxtb	r2, r2
   d4a1c:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   d4a20:	eba3 0181 	sub.w	r1, r3, r1, lsl #2
   d4a24:	250a      	movs	r5, #10
   d4a26:	b2c9      	uxtb	r1, r1
   d4a28:	fbb1 f4f5 	udiv	r4, r1, r5
   d4a2c:	fb05 1114 	mls	r1, r5, r4, r1
   d4a30:	eb01 1104 	add.w	r1, r1, r4, lsl #4

	   seconds_left = seconds_left_2 / 60; // seconds_left = "whole_hours"
	   rtc_bcd[DSRTCLib_MIN] = bin2bcd(seconds_left_2 - (60 * seconds_left));            // leftover minutes
   d4a34:	f44f 6461 	mov.w	r4, #3600	; 0xe10
   d4a38:	fbb3 f4f4 	udiv	r4, r3, r4
   d4a3c:	b2e4      	uxtb	r4, r4
   if(seconds_left >= 946684800)
   {
	   seconds_left -= 946684800; // correct for difference between DS1337/DS1339 and UNIX epochs.

	   seconds_left_2 = seconds_left / 60; // seconds_left_2 = "whole_minutes"
	   rtc_bcd[DSRTCLib_SEC] = bin2bcd(seconds_left - (60 * seconds_left_2));                 // leftover seconds
   d4a3e:	7081      	strb	r1, [r0, #2]

	   seconds_left = seconds_left_2 / 60; // seconds_left = "whole_hours"
	   rtc_bcd[DSRTCLib_MIN] = bin2bcd(seconds_left_2 - (60 * seconds_left));            // leftover minutes
   d4a40:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   d4a44:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
   d4a48:	b2d2      	uxtb	r2, r2
   d4a4a:	fbb2 f1f5 	udiv	r1, r2, r5
   d4a4e:	fb05 2211 	mls	r2, r5, r1, r2
   d4a52:	eb02 1201 	add.w	r2, r2, r1, lsl #4
   d4a56:	70c2      	strb	r2, [r0, #3]

	   seconds_left_2 = seconds_left / 24; //seconds_left_2 = "whole_days"
   d4a58:	4935      	ldr	r1, [pc, #212]	; (d4b30 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0x12c>)
   d4a5a:	fbb3 f1f1 	udiv	r1, r3, r1
	   rtc_bcd[DSRTCLib_HR] = bin2bcd(seconds_left - (24 * seconds_left_2));         // leftover hours
   d4a5e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   d4a62:	eba4 04c2 	sub.w	r4, r4, r2, lsl #3
   d4a66:	b2e4      	uxtb	r4, r4
   d4a68:	fbb4 f2f5 	udiv	r2, r4, r5
   d4a6c:	fb05 4412 	mls	r4, r5, r2, r4

	   //whole_days_since_1968 = whole_days;// + 365 + 366;	// seconds_left_2 = "whole_days" = "whole_days_since_1968"
	   leap_year_periods = seconds_left_2 / ((4 * 365) + 1);

	   days_since_current_lyear = seconds_left_2 % ((4 * 365) + 1);
   d4a70:	f240 55b5 	movw	r5, #1461	; 0x5b5

	   seconds_left = seconds_left_2 / 60; // seconds_left = "whole_hours"
	   rtc_bcd[DSRTCLib_MIN] = bin2bcd(seconds_left_2 - (60 * seconds_left));            // leftover minutes

	   seconds_left_2 = seconds_left / 24; //seconds_left_2 = "whole_days"
	   rtc_bcd[DSRTCLib_HR] = bin2bcd(seconds_left - (24 * seconds_left_2));         // leftover hours
   d4a74:	eb04 1402 	add.w	r4, r4, r2, lsl #4

	   //whole_days_since_1968 = whole_days;// + 365 + 366;	// seconds_left_2 = "whole_days" = "whole_days_since_1968"
	   leap_year_periods = seconds_left_2 / ((4 * 365) + 1);
   d4a78:	4a2e      	ldr	r2, [pc, #184]	; (d4b34 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0x130>)
   d4a7a:	fbb3 f3f2 	udiv	r3, r3, r2

	   days_since_current_lyear = seconds_left_2 % ((4 * 365) + 1);
   d4a7e:	fbb1 f2f5 	udiv	r2, r1, r5
   d4a82:	fb05 1512 	mls	r5, r5, r2, r1

	   // if days are after a current leap year then add a leap year period
	   if ((days_since_current_lyear >= (31 + 29))) {
   d4a86:	2d3b      	cmp	r5, #59	; 0x3b
		  leap_year_periods++;
   d4a88:	bf88      	it	hi
   d4a8a:	3301      	addhi	r3, #1
	   }
	   seconds_left = (seconds_left_2 - leap_year_periods) / 365; // seconds_left = "whole_years"
   d4a8c:	f240 126d 	movw	r2, #365	; 0x16d
	   days_since_first_of_year = seconds_left_2 - (seconds_left * 365) - leap_year_periods;

	   if ((days_since_current_lyear <= 365) && (days_since_current_lyear >= 60)) {
   d4a90:	3d3c      	subs	r5, #60	; 0x3c

	   seconds_left = seconds_left_2 / 60; // seconds_left = "whole_hours"
	   rtc_bcd[DSRTCLib_MIN] = bin2bcd(seconds_left_2 - (60 * seconds_left));            // leftover minutes

	   seconds_left_2 = seconds_left / 24; //seconds_left_2 = "whole_days"
	   rtc_bcd[DSRTCLib_HR] = bin2bcd(seconds_left - (24 * seconds_left_2));         // leftover hours
   d4a92:	7104      	strb	r4, [r0, #4]

	   // if days are after a current leap year then add a leap year period
	   if ((days_since_current_lyear >= (31 + 29))) {
		  leap_year_periods++;
	   }
	   seconds_left = (seconds_left_2 - leap_year_periods) / 365; // seconds_left = "whole_years"
   d4a94:	1acc      	subs	r4, r1, r3
   d4a96:	fbb4 f4f2 	udiv	r4, r4, r2
	   days_since_first_of_year = seconds_left_2 - (seconds_left * 365) - leap_year_periods;
   d4a9a:	fb02 1214 	mls	r2, r2, r4, r1
   d4a9e:	1ad3      	subs	r3, r2, r3

	   if ((days_since_current_lyear <= 365) && (days_since_current_lyear >= 60)) {
   d4aa0:	f5b5 7f99 	cmp.w	r5, #306	; 0x132
		  days_since_first_of_year++;
   d4aa4:	bf38      	it	cc
   d4aa6:	3301      	addcc	r3, #1
		// seconds_left = "year"
		//seconds_left_2 = "month"
	   // walk across monthdays[] to find what month it is based on how many days have passed
	   //   within the current year
	   month = 13;
	   days_to_month = 366;
   d4aa8:	f44f 75b7 	mov.w	r5, #366	; 0x16e

		// seconds_left = "year"
		//seconds_left_2 = "month"
	   // walk across monthdays[] to find what month it is based on how many days have passed
	   //   within the current year
	   month = 13;
   d4aac:	220d      	movs	r2, #13
	   days_to_month = 366;
	   while (days_since_first_of_year < days_to_month) {
		   month--;
		   days_to_month = monthdays[month-1];
		   if ((month > 2) && ((seconds_left % 4) == 0)) {
   d4aae:	f004 0703 	and.w	r7, r4, #3
		//seconds_left_2 = "month"
	   // walk across monthdays[] to find what month it is based on how many days have passed
	   //   within the current year
	   month = 13;
	   days_to_month = 366;
	   while (days_since_first_of_year < days_to_month) {
   d4ab2:	42ab      	cmp	r3, r5
   d4ab4:	d208      	bcs.n	d4ac8 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0xc4>
		   month--;
   d4ab6:	3a01      	subs	r2, #1
		   days_to_month = monthdays[month-1];
		   if ((month > 2) && ((seconds_left % 4) == 0)) {
   d4ab8:	2a02      	cmp	r2, #2
	   //   within the current year
	   month = 13;
	   days_to_month = 366;
	   while (days_since_first_of_year < days_to_month) {
		   month--;
		   days_to_month = monthdays[month-1];
   d4aba:	f856 5d04 	ldr.w	r5, [r6, #-4]!
		   if ((month > 2) && ((seconds_left % 4) == 0)) {
   d4abe:	d9f8      	bls.n	d4ab2 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0xae>
   d4ac0:	2f00      	cmp	r7, #0
   d4ac2:	d1f6      	bne.n	d4ab2 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0xae>
			   days_to_month++;
   d4ac4:	3501      	adds	r5, #1
   d4ac6:	e7f4      	b.n	d4ab2 <_ZN8DSRTCLib21epoch_seconds_to_dateEm+0xae>
			}
	   }
	   
	   rtc_bcd[DSRTCLib_DATE] = bin2bcd( days_since_first_of_year - days_to_month + 1);
   d4ac8:	3301      	adds	r3, #1
   d4aca:	1b5b      	subs	r3, r3, r5
   d4acc:	b2db      	uxtb	r3, r3
   d4ace:	250a      	movs	r5, #10
   d4ad0:	fbb3 f6f5 	udiv	r6, r3, r5
   d4ad4:	fb05 3316 	mls	r3, r5, r6, r3
   d4ad8:	eb03 1306 	add.w	r3, r3, r6, lsl #4

	   rtc_bcd[DSRTCLib_DOW] = bin2bcd((seconds_left_2  + 4) % 7);
   d4adc:	3104      	adds	r1, #4
	   //rtc_bcd[DSRTCLib_SEC] = bin2bcd(second);
	   //rtc_bcd[DSRTCLib_MIN] = bin2bcd(minute);
	   //rtc_bcd[DSRTCLib_HR] = bin2bcd(hour);
	   //rtc_bcd[DSRTCLib_DATE] = bin2bcd(day);
	   //rtc_bcd[DSRTCLib_DOW] = bin2bcd(day_of_week);
	   rtc_bcd[DSRTCLib_MTH] = bin2bcd(month);
   d4ade:	b2d2      	uxtb	r2, r2
		   if ((month > 2) && ((seconds_left % 4) == 0)) {
			   days_to_month++;
			}
	   }
	   
	   rtc_bcd[DSRTCLib_DATE] = bin2bcd( days_since_first_of_year - days_to_month + 1);
   d4ae0:	7183      	strb	r3, [r0, #6]

	   rtc_bcd[DSRTCLib_DOW] = bin2bcd((seconds_left_2  + 4) % 7);
   d4ae2:	2307      	movs	r3, #7
   d4ae4:	fbb1 f3f3 	udiv	r3, r1, r3
   d4ae8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d4aec:	1ac9      	subs	r1, r1, r3
	   //rtc_bcd[DSRTCLib_MIN] = bin2bcd(minute);
	   //rtc_bcd[DSRTCLib_HR] = bin2bcd(hour);
	   //rtc_bcd[DSRTCLib_DATE] = bin2bcd(day);
	   //rtc_bcd[DSRTCLib_DOW] = bin2bcd(day_of_week);
	   rtc_bcd[DSRTCLib_MTH] = bin2bcd(month);
	   rtc_bcd[DSRTCLib_YR] = bin2bcd(seconds_left);
   d4aee:	b2e4      	uxtb	r4, r4
	   //rtc_bcd[DSRTCLib_SEC] = bin2bcd(second);
	   //rtc_bcd[DSRTCLib_MIN] = bin2bcd(minute);
	   //rtc_bcd[DSRTCLib_HR] = bin2bcd(hour);
	   //rtc_bcd[DSRTCLib_DATE] = bin2bcd(day);
	   //rtc_bcd[DSRTCLib_DOW] = bin2bcd(day_of_week);
	   rtc_bcd[DSRTCLib_MTH] = bin2bcd(month);
   d4af0:	fbb2 f3f5 	udiv	r3, r2, r5
   d4af4:	fb05 2213 	mls	r2, r5, r3, r2
   d4af8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	   rtc_bcd[DSRTCLib_YR] = bin2bcd(seconds_left);
   d4afc:	fbb4 f3f5 	udiv	r3, r4, r5
   d4b00:	fb05 4513 	mls	r5, r5, r3, r4
   d4b04:	eb05 1503 	add.w	r5, r5, r3, lsl #4
			}
	   }
	   
	   rtc_bcd[DSRTCLib_DATE] = bin2bcd( days_since_first_of_year - days_to_month + 1);

	   rtc_bcd[DSRTCLib_DOW] = bin2bcd((seconds_left_2  + 4) % 7);
   d4b08:	7141      	strb	r1, [r0, #5]
	   //rtc_bcd[DSRTCLib_SEC] = bin2bcd(second);
	   //rtc_bcd[DSRTCLib_MIN] = bin2bcd(minute);
	   //rtc_bcd[DSRTCLib_HR] = bin2bcd(hour);
	   //rtc_bcd[DSRTCLib_DATE] = bin2bcd(day);
	   //rtc_bcd[DSRTCLib_DOW] = bin2bcd(day_of_week);
	   rtc_bcd[DSRTCLib_MTH] = bin2bcd(month);
   d4b0a:	71c2      	strb	r2, [r0, #7]
	   rtc_bcd[DSRTCLib_YR] = bin2bcd(seconds_left);
   d4b0c:	7205      	strb	r5, [r0, #8]
   d4b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else
	{
	// else: "invalid" (< year 2000) epoch format.
	// 'Best' way to handle this is to zero out the returned date. 
	
	   rtc_bcd[DSRTCLib_SEC] = 0; //0x00 binary = 0x00 BCD
   d4b10:	2300      	movs	r3, #0
   d4b12:	7083      	strb	r3, [r0, #2]
	   rtc_bcd[DSRTCLib_MIN] = 0;
   d4b14:	70c3      	strb	r3, [r0, #3]
	   rtc_bcd[DSRTCLib_HR] = 0;
   d4b16:	7103      	strb	r3, [r0, #4]
	   rtc_bcd[DSRTCLib_DATE] = 0;
   d4b18:	7183      	strb	r3, [r0, #6]
	   rtc_bcd[DSRTCLib_DOW] = 0;
   d4b1a:	7143      	strb	r3, [r0, #5]
	   rtc_bcd[DSRTCLib_MTH] = 0;
   d4b1c:	71c3      	strb	r3, [r0, #7]
	   rtc_bcd[DSRTCLib_YR] = 0;
   d4b1e:	7203      	strb	r3, [r0, #8]
   d4b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b22:	bf00      	nop
   d4b24:	386d437f 	.word	0x386d437f
   d4b28:	c792bc80 	.word	0xc792bc80
   d4b2c:	000d74b0 	.word	0x000d74b0
   d4b30:	00015180 	.word	0x00015180
   d4b34:	07861f80 	.word	0x07861f80

000d4b38 <_ZN8DSRTCLib10writeAlarmEm>:
	Wire.endTransmission();
}


void DSRTCLib::writeAlarm(unsigned long sse)
{
   d4b38:	b510      	push	{r4, lr}
        epoch_seconds_to_date(sse);
   d4b3a:	f7ff ff63 	bl	d4a04 <_ZN8DSRTCLib21epoch_seconds_to_dateEm>
        writeAlarm();
}
   d4b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void DSRTCLib::writeAlarm(unsigned long sse)
{
        epoch_seconds_to_date(sse);
        writeAlarm();
   d4b42:	f7ff be11 	b.w	d4768 <_ZN8DSRTCLib10writeAlarmEv>

000d4b46 <_ZN8DSRTCLib12alarmSecondsEm>:
	}

}

void DSRTCLib::alarmSeconds(unsigned long secondsToSnooze)
{ 
   d4b46:	b538      	push	{r3, r4, r5, lr}
   d4b48:	4604      	mov	r4, r0
   d4b4a:	460d      	mov	r5, r1
  // Given a value in secondsToSnooze, set an alarm for that many seconds into the future and go to sleep.
  // The alarm can be set for a maximum of 28-31 days into the future - it doesn't have settings for months or years.
  readTime();                               // update RTC library's buffers to contain the current time.
   d4b4c:	f7ff fdaa 	bl	d46a4 <_ZN8DSRTCLib8readTimeEv>
        writeAlarm();
}

void DSRTCLib::setAlarmRepeat(byte repeat)
{
        alarm_repeat = repeat;
   d4b50:	2300      	movs	r3, #0
   d4b52:	7063      	strb	r3, [r4, #1]
  readTime();                               // update RTC library's buffers to contain the current time.
                                            // Remember most functions (including epoch seconds stuff) work on what's in the buffer, not what's in the chip.

  setAlarmRepeat(EVERY_MONTH);              // There is no DSRTCLib setting for 'alarm once' - once in a month is the most restrictive it gets.

  writeAlarm(date_to_epoch_seconds() + secondsToSnooze);    // Current Epoch Time + secondsToSnooze 
   d4b54:	4620      	mov	r0, r4
   d4b56:	f7ff ff15 	bl	d4984 <_ZN8DSRTCLib21date_to_epoch_secondsEv>
   d4b5a:	1941      	adds	r1, r0, r5
   d4b5c:	4620      	mov	r0, r4
}
   d4b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  readTime();                               // update RTC library's buffers to contain the current time.
                                            // Remember most functions (including epoch seconds stuff) work on what's in the buffer, not what's in the chip.

  setAlarmRepeat(EVERY_MONTH);              // There is no DSRTCLib setting for 'alarm once' - once in a month is the most restrictive it gets.

  writeAlarm(date_to_epoch_seconds() + secondsToSnooze);    // Current Epoch Time + secondsToSnooze 
   d4b62:	f7ff bfe9 	b.w	d4b38 <_ZN8DSRTCLib10writeAlarmEm>

000d4b66 <_ZN8DSRTCLib10setSecondsEh>:
}

void DSRTCLib::setSeconds(unsigned char v)
{
    rtc_bcd[DSRTCLib_SEC] = bin2bcd(v);
   d4b66:	230a      	movs	r3, #10
   d4b68:	fbb1 f2f3 	udiv	r2, r1, r3
   d4b6c:	fb03 1312 	mls	r3, r3, r2, r1
   d4b70:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d4b74:	7083      	strb	r3, [r0, #2]
   d4b76:	4770      	bx	lr

000d4b78 <_ZN8DSRTCLib10setMinutesEh>:

}
void DSRTCLib::setMinutes(unsigned char v)
{
    rtc_bcd[DSRTCLib_MIN] = bin2bcd(v);
   d4b78:	230a      	movs	r3, #10
   d4b7a:	fbb1 f2f3 	udiv	r2, r1, r3
   d4b7e:	fb03 1312 	mls	r3, r3, r2, r1
   d4b82:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d4b86:	70c3      	strb	r3, [r0, #3]
   d4b88:	4770      	bx	lr

000d4b8a <_ZN8DSRTCLib8setHoursEh>:

}
void DSRTCLib::setHours(unsigned char v)
{
    rtc_bcd[DSRTCLib_HR] = bin2bcd(v);
   d4b8a:	230a      	movs	r3, #10
   d4b8c:	fbb1 f2f3 	udiv	r2, r1, r3
   d4b90:	fb03 1312 	mls	r3, r3, r2, r1
   d4b94:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d4b98:	7103      	strb	r3, [r0, #4]
   d4b9a:	4770      	bx	lr

000d4b9c <_ZN8DSRTCLib7setDaysEh>:

}
void DSRTCLib::setDays(unsigned char v)
{
    rtc_bcd[DSRTCLib_DATE] = bin2bcd(v);
   d4b9c:	230a      	movs	r3, #10
   d4b9e:	fbb1 f2f3 	udiv	r2, r1, r3
   d4ba2:	fb03 1312 	mls	r3, r3, r2, r1
   d4ba6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d4baa:	7183      	strb	r3, [r0, #6]
   d4bac:	4770      	bx	lr

000d4bae <_ZN8DSRTCLib9setMonthsEh>:
    rtc_bcd[DSRTCLib_DOW] = bin2bcd(v);

}
void DSRTCLib::setMonths(unsigned char v)
{
    rtc_bcd[DSRTCLib_MTH] = bin2bcd(v);
   d4bae:	230a      	movs	r3, #10
   d4bb0:	fbb1 f2f3 	udiv	r2, r1, r3
   d4bb4:	fb03 1312 	mls	r3, r3, r2, r1
   d4bb8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d4bbc:	71c3      	strb	r3, [r0, #7]
   d4bbe:	4770      	bx	lr

000d4bc0 <_ZN8DSRTCLib8setYearsEj>:

}
void DSRTCLib::setYears(unsigned int v)
{
    if (v>1999)
   d4bc0:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    {
        v -= 2000;
   d4bc4:	bf28      	it	cs
   d4bc6:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
    }
    rtc_bcd[DSRTCLib_YR] = bin2bcd(v);
   d4bca:	b2c9      	uxtb	r1, r1
   d4bcc:	230a      	movs	r3, #10
   d4bce:	fbb1 f2f3 	udiv	r2, r1, r3
   d4bd2:	fb03 1112 	mls	r1, r3, r2, r1
   d4bd6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   d4bda:	7201      	strb	r1, [r0, #8]
   d4bdc:	4770      	bx	lr

000d4bde <_ZN8DSRTCLib5startEv>:
{
	setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) | DSRTCLib_SP_EOSC);
}

void DSRTCLib::start(void)
{
   d4bde:	b510      	push	{r4, lr}
	setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) & !DSRTCLib_SP_EOSC);
   d4be0:	210e      	movs	r1, #14
{
	setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) | DSRTCLib_SP_EOSC);
}

void DSRTCLib::start(void)
{
   d4be2:	4604      	mov	r4, r0
	setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) & !DSRTCLib_SP_EOSC);
   d4be4:	f7ff fe07 	bl	d47f6 <_ZN8DSRTCLib11getRegisterEh>
   d4be8:	4620      	mov	r0, r4
   d4bea:	2200      	movs	r2, #0
   d4bec:	210e      	movs	r1, #14
}
   d4bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) | DSRTCLib_SP_EOSC);
}

void DSRTCLib::start(void)
{
	setRegister(DSRTCLib_SP, getRegister(DSRTCLib_SP) & !DSRTCLib_SP_EOSC);
   d4bf2:	f7ff be1e 	b.w	d4832 <_ZN8DSRTCLib11setRegisterEhh>

000d4bf6 <_ZN6DS1339C1Ei>:

DS1339::DS1339() : DSRTCLib(2)
{
}

DS1339::DS1339(int int_pin) : DSRTCLib(int_pin)
   d4bf6:	b510      	push	{r4, lr}
   d4bf8:	4604      	mov	r4, r0
DSRTCLib::DSRTCLib() : _rtc_int_pin(2)
{
  init();
}

DSRTCLib::DSRTCLib(int int_pin) : _rtc_int_pin(int_pin)
   d4bfa:	6101      	str	r1, [r0, #16]
{
  init();
   d4bfc:	f7ff fd42 	bl	d4684 <_ZN8DSRTCLib4initEv>
{
}

DS1339::DS1339(int int_pin) : DSRTCLib(int_pin)
{
}
   d4c00:	4620      	mov	r0, r4
   d4c02:	bd10      	pop	{r4, pc}

000d4c04 <_GLOBAL__sub_I__ZN8DSRTCLibC2Ev>:
   d4c04:	f000 b860 	b.w	d4cc8 <HAL_Pin_Map>

000d4c08 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <os_thread_is_current+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	689b      	ldr	r3, [r3, #8]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030248 	.word	0x00030248

000d4c18 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <os_thread_join+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	691b      	ldr	r3, [r3, #16]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030248 	.word	0x00030248

000d4c28 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <os_thread_cleanup+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	695b      	ldr	r3, [r3, #20]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030248 	.word	0x00030248

000d4c38 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <os_mutex_create+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030248 	.word	0x00030248

000d4c48 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <os_mutex_recursive_create+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030248 	.word	0x00030248

000d4c58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <HAL_RNG_GetRandomNumber+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	685b      	ldr	r3, [r3, #4]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030218 	.word	0x00030218

000d4c68 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	695b      	ldr	r3, [r3, #20]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030218 	.word	0x00030218

000d4c78 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <HAL_RTC_Get_UnixTime+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	69db      	ldr	r3, [r3, #28]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030218 	.word	0x00030218

000d4c88 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <HAL_EEPROM_Init+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030218 	.word	0x00030218

000d4c98 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <HAL_EEPROM_Read+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030218 	.word	0x00030218

000d4ca8 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <HAL_EEPROM_Write+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030218 	.word	0x00030218

000d4cb8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <HAL_RTC_Time_Is_Valid+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030218 	.word	0x00030218

000d4cc8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <HAL_Pin_Map+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	681b      	ldr	r3, [r3, #0]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003022c 	.word	0x0003022c

000d4cd8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <HAL_Pin_Mode+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	689b      	ldr	r3, [r3, #8]
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003022c 	.word	0x0003022c

000d4ce8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <HAL_Get_Pin_Mode+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	68db      	ldr	r3, [r3, #12]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003022c 	.word	0x0003022c

000d4cf8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <HAL_GPIO_Write+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	691b      	ldr	r3, [r3, #16]
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	0003022c 	.word	0x0003022c

000d4d08 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <HAL_Interrupts_Attach+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	699b      	ldr	r3, [r3, #24]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	0003022c 	.word	0x0003022c

000d4d18 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <HAL_Interrupts_Detach+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	69db      	ldr	r3, [r3, #28]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	0003022c 	.word	0x0003022c

000d4d28 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <HAL_I2C_Begin+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	68db      	ldr	r3, [r3, #12]
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030228 	.word	0x00030228

000d4d38 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <HAL_I2C_Request_Data+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	695b      	ldr	r3, [r3, #20]
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030228 	.word	0x00030228

000d4d48 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <HAL_I2C_Begin_Transmission+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	699b      	ldr	r3, [r3, #24]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030228 	.word	0x00030228

000d4d58 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <HAL_I2C_End_Transmission+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	69db      	ldr	r3, [r3, #28]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030228 	.word	0x00030228

000d4d68 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <HAL_I2C_Write_Data+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	6a1b      	ldr	r3, [r3, #32]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030228 	.word	0x00030228

000d4d78 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <HAL_I2C_Available_Data+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030228 	.word	0x00030228

000d4d88 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <HAL_I2C_Read_Data+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030228 	.word	0x00030228

000d4d98 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <HAL_I2C_Peek_Data+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	00030228 	.word	0x00030228

000d4da8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <HAL_I2C_Flush_Data+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	00030228 	.word	0x00030228

000d4db8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <HAL_I2C_Is_Enabled+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030228 	.word	0x00030228

000d4dc8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <HAL_I2C_Init+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030228 	.word	0x00030228

000d4dd8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <inet_inet_ntop+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	695b      	ldr	r3, [r3, #20]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	00030264 	.word	0x00030264

000d4de8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <netdb_freeaddrinfo+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	689b      	ldr	r3, [r3, #8]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	00030268 	.word	0x00030268

000d4df8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <netdb_getaddrinfo+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	68db      	ldr	r3, [r3, #12]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	00030268 	.word	0x00030268

000d4e08 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <HAL_SPI_Init+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	69db      	ldr	r3, [r3, #28]
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	00030230 	.word	0x00030230

000d4e18 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <HAL_SPI_Is_Enabled+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6a1b      	ldr	r3, [r3, #32]
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	00030230 	.word	0x00030230

000d4e28 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <HAL_USART_Init+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	681b      	ldr	r3, [r3, #0]
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	0003023c 	.word	0x0003023c

000d4e38 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <HAL_USART_Write_Data+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	68db      	ldr	r3, [r3, #12]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	0003023c 	.word	0x0003023c

000d4e48 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4e48:	b508      	push	{r3, lr}
   d4e4a:	4b02      	ldr	r3, [pc, #8]	; (d4e54 <HAL_USART_Available_Data+0xc>)
   d4e4c:	681b      	ldr	r3, [r3, #0]
   d4e4e:	691b      	ldr	r3, [r3, #16]
   d4e50:	9301      	str	r3, [sp, #4]
   d4e52:	bd08      	pop	{r3, pc}
   d4e54:	0003023c 	.word	0x0003023c

000d4e58 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4e58:	b508      	push	{r3, lr}
   d4e5a:	4b02      	ldr	r3, [pc, #8]	; (d4e64 <HAL_USART_Read_Data+0xc>)
   d4e5c:	681b      	ldr	r3, [r3, #0]
   d4e5e:	695b      	ldr	r3, [r3, #20]
   d4e60:	9301      	str	r3, [sp, #4]
   d4e62:	bd08      	pop	{r3, pc}
   d4e64:	0003023c 	.word	0x0003023c

000d4e68 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4e68:	b508      	push	{r3, lr}
   d4e6a:	4b02      	ldr	r3, [pc, #8]	; (d4e74 <HAL_USART_Peek_Data+0xc>)
   d4e6c:	681b      	ldr	r3, [r3, #0]
   d4e6e:	699b      	ldr	r3, [r3, #24]
   d4e70:	9301      	str	r3, [sp, #4]
   d4e72:	bd08      	pop	{r3, pc}
   d4e74:	0003023c 	.word	0x0003023c

000d4e78 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4e78:	b508      	push	{r3, lr}
   d4e7a:	4b02      	ldr	r3, [pc, #8]	; (d4e84 <HAL_USART_Flush_Data+0xc>)
   d4e7c:	681b      	ldr	r3, [r3, #0]
   d4e7e:	69db      	ldr	r3, [r3, #28]
   d4e80:	9301      	str	r3, [sp, #4]
   d4e82:	bd08      	pop	{r3, pc}
   d4e84:	0003023c 	.word	0x0003023c

000d4e88 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4e88:	b508      	push	{r3, lr}
   d4e8a:	4b02      	ldr	r3, [pc, #8]	; (d4e94 <HAL_USART_Is_Enabled+0xc>)
   d4e8c:	681b      	ldr	r3, [r3, #0]
   d4e8e:	6a1b      	ldr	r3, [r3, #32]
   d4e90:	9301      	str	r3, [sp, #4]
   d4e92:	bd08      	pop	{r3, pc}
   d4e94:	0003023c 	.word	0x0003023c

000d4e98 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4e98:	b508      	push	{r3, lr}
   d4e9a:	4b02      	ldr	r3, [pc, #8]	; (d4ea4 <HAL_USART_Available_Data_For_Write+0xc>)
   d4e9c:	681b      	ldr	r3, [r3, #0]
   d4e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ea0:	9301      	str	r3, [sp, #4]
   d4ea2:	bd08      	pop	{r3, pc}
   d4ea4:	0003023c 	.word	0x0003023c

000d4ea8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ea8:	b508      	push	{r3, lr}
   d4eaa:	4b02      	ldr	r3, [pc, #8]	; (d4eb4 <HAL_USB_USART_Init+0xc>)
   d4eac:	681b      	ldr	r3, [r3, #0]
   d4eae:	681b      	ldr	r3, [r3, #0]
   d4eb0:	9301      	str	r3, [sp, #4]
   d4eb2:	bd08      	pop	{r3, pc}
   d4eb4:	0003024c 	.word	0x0003024c

000d4eb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b02      	ldr	r3, [pc, #8]	; (d4ec4 <HAL_USB_USART_Available_Data+0xc>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	691b      	ldr	r3, [r3, #16]
   d4ec0:	9301      	str	r3, [sp, #4]
   d4ec2:	bd08      	pop	{r3, pc}
   d4ec4:	0003024c 	.word	0x0003024c

000d4ec8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ec8:	b508      	push	{r3, lr}
   d4eca:	4b02      	ldr	r3, [pc, #8]	; (d4ed4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ecc:	681b      	ldr	r3, [r3, #0]
   d4ece:	695b      	ldr	r3, [r3, #20]
   d4ed0:	9301      	str	r3, [sp, #4]
   d4ed2:	bd08      	pop	{r3, pc}
   d4ed4:	0003024c 	.word	0x0003024c

000d4ed8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ed8:	b508      	push	{r3, lr}
   d4eda:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <HAL_USB_USART_Receive_Data+0xc>)
   d4edc:	681b      	ldr	r3, [r3, #0]
   d4ede:	699b      	ldr	r3, [r3, #24]
   d4ee0:	9301      	str	r3, [sp, #4]
   d4ee2:	bd08      	pop	{r3, pc}
   d4ee4:	0003024c 	.word	0x0003024c

000d4ee8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee8:	b508      	push	{r3, lr}
   d4eea:	4b02      	ldr	r3, [pc, #8]	; (d4ef4 <HAL_USB_USART_Send_Data+0xc>)
   d4eec:	681b      	ldr	r3, [r3, #0]
   d4eee:	69db      	ldr	r3, [r3, #28]
   d4ef0:	9301      	str	r3, [sp, #4]
   d4ef2:	bd08      	pop	{r3, pc}
   d4ef4:	0003024c 	.word	0x0003024c

000d4ef8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ef8:	b508      	push	{r3, lr}
   d4efa:	4b02      	ldr	r3, [pc, #8]	; (d4f04 <HAL_USB_USART_Flush_Data+0xc>)
   d4efc:	681b      	ldr	r3, [r3, #0]
   d4efe:	6a1b      	ldr	r3, [r3, #32]
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	bd08      	pop	{r3, pc}
   d4f04:	0003024c 	.word	0x0003024c

000d4f08 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4f08:	b508      	push	{r3, lr}
   d4f0a:	4b02      	ldr	r3, [pc, #8]	; (d4f14 <system_mode+0xc>)
   d4f0c:	681b      	ldr	r3, [r3, #0]
   d4f0e:	681b      	ldr	r3, [r3, #0]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	bd08      	pop	{r3, pc}
   d4f14:	00030220 	.word	0x00030220

000d4f18 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f18:	b508      	push	{r3, lr}
   d4f1a:	4b02      	ldr	r3, [pc, #8]	; (d4f24 <set_system_mode+0xc>)
   d4f1c:	681b      	ldr	r3, [r3, #0]
   d4f1e:	685b      	ldr	r3, [r3, #4]
   d4f20:	9301      	str	r3, [sp, #4]
   d4f22:	bd08      	pop	{r3, pc}
   d4f24:	00030220 	.word	0x00030220

000d4f28 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f28:	b508      	push	{r3, lr}
   d4f2a:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <application_thread_current+0xc>)
   d4f2c:	681b      	ldr	r3, [r3, #0]
   d4f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f30:	9301      	str	r3, [sp, #4]
   d4f32:	bd08      	pop	{r3, pc}
   d4f34:	00030220 	.word	0x00030220

000d4f38 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4f38:	b508      	push	{r3, lr}
   d4f3a:	4b02      	ldr	r3, [pc, #8]	; (d4f44 <application_thread_invoke+0xc>)
   d4f3c:	681b      	ldr	r3, [r3, #0]
   d4f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f40:	9301      	str	r3, [sp, #4]
   d4f42:	bd08      	pop	{r3, pc}
   d4f44:	00030220 	.word	0x00030220

000d4f48 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4f48:	b508      	push	{r3, lr}
   d4f4a:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <system_thread_get_state+0xc>)
   d4f4c:	681b      	ldr	r3, [r3, #0]
   d4f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4f50:	9301      	str	r3, [sp, #4]
   d4f52:	bd08      	pop	{r3, pc}
   d4f54:	00030220 	.word	0x00030220

000d4f58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f58:	b508      	push	{r3, lr}
   d4f5a:	4b03      	ldr	r3, [pc, #12]	; (d4f68 <system_ctrl_set_app_request_handler+0x10>)
   d4f5c:	681b      	ldr	r3, [r3, #0]
   d4f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4f62:	9301      	str	r3, [sp, #4]
   d4f64:	bd08      	pop	{r3, pc}
   d4f66:	0000      	.short	0x0000
   d4f68:	00030220 	.word	0x00030220

000d4f6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b03      	ldr	r3, [pc, #12]	; (d4f7c <system_ctrl_set_result+0x10>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4f76:	9301      	str	r3, [sp, #4]
   d4f78:	bd08      	pop	{r3, pc}
   d4f7a:	0000      	.short	0x0000
   d4f7c:	00030220 	.word	0x00030220

000d4f80 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <spark_variable+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	681b      	ldr	r3, [r3, #0]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030244 	.word	0x00030244

000d4f90 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <spark_function+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	685b      	ldr	r3, [r3, #4]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030244 	.word	0x00030244

000d4fa0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <spark_process+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	689b      	ldr	r3, [r3, #8]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030244 	.word	0x00030244

000d4fb0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <spark_cloud_flag_connected+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	695b      	ldr	r3, [r3, #20]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030244 	.word	0x00030244

000d4fc0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <spark_send_event+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	6a1b      	ldr	r3, [r3, #32]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030244 	.word	0x00030244

000d4fd0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <spark_sync_time_pending+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030244 	.word	0x00030244

000d4fe0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <spark_set_random_seed_from_cloud_handler+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030244 	.word	0x00030244

000d4ff0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <network_connect+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	685b      	ldr	r3, [r3, #4]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	00030240 	.word	0x00030240

000d5000 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <network_connecting+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	689b      	ldr	r3, [r3, #8]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	00030240 	.word	0x00030240

000d5010 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <network_disconnect+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	68db      	ldr	r3, [r3, #12]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	00030240 	.word	0x00030240

000d5020 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <network_ready+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	691b      	ldr	r3, [r3, #16]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030240 	.word	0x00030240

000d5030 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <network_on+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	695b      	ldr	r3, [r3, #20]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030240 	.word	0x00030240

000d5040 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <network_off+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	699b      	ldr	r3, [r3, #24]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030240 	.word	0x00030240

000d5050 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <network_listen+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	69db      	ldr	r3, [r3, #28]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030240 	.word	0x00030240

000d5060 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <network_listening+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6a1b      	ldr	r3, [r3, #32]
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030240 	.word	0x00030240

000d5070 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <network_set_listen_timeout+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030240 	.word	0x00030240

000d5080 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <network_get_listen_timeout+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030240 	.word	0x00030240

000d5090 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <malloc+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	681b      	ldr	r3, [r3, #0]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	0003021c 	.word	0x0003021c

000d50a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <free+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	685b      	ldr	r3, [r3, #4]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003021c 	.word	0x0003021c

000d50b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <realloc+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	689b      	ldr	r3, [r3, #8]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	0003021c 	.word	0x0003021c

000d50c0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <siprintf+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	691b      	ldr	r3, [r3, #16]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	0003021c 	.word	0x0003021c

000d50d0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <siscanf+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	699b      	ldr	r3, [r3, #24]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	0003021c 	.word	0x0003021c

000d50e0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <snprintf+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	69db      	ldr	r3, [r3, #28]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	0003021c 	.word	0x0003021c

000d50f0 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <abort+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	0003021c 	.word	0x0003021c

000d5100 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <_malloc_r+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	0003021c 	.word	0x0003021c

000d5110 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5110:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5112:	6883      	ldr	r3, [r0, #8]
   d5114:	4604      	mov	r4, r0
   d5116:	b90b      	cbnz	r3, d511c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5118:	f001 f9e7 	bl	d64ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d511c:	68c3      	ldr	r3, [r0, #12]
   d511e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5120:	68a3      	ldr	r3, [r4, #8]
   d5122:	b11b      	cbz	r3, d512c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5124:	2203      	movs	r2, #3
   d5126:	4621      	mov	r1, r4
   d5128:	4620      	mov	r0, r4
   d512a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d512c:	4620      	mov	r0, r4
   d512e:	2110      	movs	r1, #16
}
   d5130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5134:	f001 b9d7 	b.w	d64e6 <_ZdlPvj>

000d5138 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5138:	4770      	bx	lr

000d513a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d513a:	2000      	movs	r0, #0
   d513c:	4770      	bx	lr

000d513e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d513e:	b510      	push	{r4, lr}
   d5140:	2110      	movs	r1, #16
   d5142:	4604      	mov	r4, r0
   d5144:	f001 f9cf 	bl	d64e6 <_ZdlPvj>
   d5148:	4620      	mov	r0, r4
   d514a:	bd10      	pop	{r4, pc}

000d514c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d514c:	b508      	push	{r3, lr}
      { delete this; }
   d514e:	b108      	cbz	r0, d5154 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5150:	f7ff fff5 	bl	d513e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5154:	bd08      	pop	{r3, pc}

000d5156 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5156:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5158:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d515a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d515c:	b113      	cbz	r3, d5164 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d515e:	2203      	movs	r2, #3
   d5160:	4601      	mov	r1, r0
   d5162:	4798      	blx	r3
    }
   d5164:	4620      	mov	r0, r4
   d5166:	bd10      	pop	{r4, pc}

000d5168 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5168:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d516a:	68c4      	ldr	r4, [r0, #12]
   d516c:	b1ec      	cbz	r4, d51aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d516e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5170:	2b02      	cmp	r3, #2
   d5172:	d102      	bne.n	d517a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5174:	68e0      	ldr	r0, [r4, #12]
   d5176:	f7ff ff93 	bl	d50a0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d517a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d517c:	b135      	cbz	r5, d518c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d517e:	4628      	mov	r0, r5
   d5180:	f7ff ffe9 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
   d5184:	2110      	movs	r1, #16
   d5186:	4628      	mov	r0, r5
   d5188:	f001 f9ad 	bl	d64e6 <_ZdlPvj>
   d518c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d518e:	b135      	cbz	r5, d519e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d5190:	4628      	mov	r0, r5
   d5192:	f7ff ffe0 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
   d5196:	2110      	movs	r1, #16
   d5198:	4628      	mov	r0, r5
   d519a:	f001 f9a4 	bl	d64e6 <_ZdlPvj>
   d519e:	4620      	mov	r0, r4
   d51a0:	2114      	movs	r1, #20
   d51a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d51a6:	f001 b99e 	b.w	d64e6 <_ZdlPvj>
   d51aa:	bd38      	pop	{r3, r4, r5, pc}

000d51ac <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d51ac:	b510      	push	{r4, lr}
   d51ae:	b088      	sub	sp, #32
   d51b0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d51b2:	4668      	mov	r0, sp
   d51b4:	f000 fe00 	bl	d5db8 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d51b8:	4669      	mov	r1, sp
   d51ba:	a804      	add	r0, sp, #16
   d51bc:	f000 fe1e 	bl	d5dfc <_ZN6StringC1ERKS_>
   d51c0:	a804      	add	r0, sp, #16
   d51c2:	47a0      	blx	r4
   d51c4:	4604      	mov	r4, r0
   d51c6:	a804      	add	r0, sp, #16
   d51c8:	f000 fdaf 	bl	d5d2a <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d51cc:	4668      	mov	r0, sp
   d51ce:	f000 fdac 	bl	d5d2a <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d51d2:	4620      	mov	r0, r4
   d51d4:	b008      	add	sp, #32
   d51d6:	bd10      	pop	{r4, pc}

000d51d8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d51d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d51da:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d51dc:	b085      	sub	sp, #20
   d51de:	4607      	mov	r7, r0
   d51e0:	460e      	mov	r6, r1
   d51e2:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d51e4:	2100      	movs	r1, #0
   d51e6:	4622      	mov	r2, r4
   d51e8:	4668      	mov	r0, sp
   d51ea:	f001 fc16 	bl	d6a1a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d51ee:	2200      	movs	r2, #0
   d51f0:	4669      	mov	r1, sp
   d51f2:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d51f4:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d51f8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d51fa:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d51fc:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d51fe:	f7ff fec7 	bl	d4f90 <spark_function>
}
   d5202:	b005      	add	sp, #20
   d5204:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5206 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5206:	b513      	push	{r0, r1, r4, lr}
   d5208:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d520a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d520e:	2300      	movs	r3, #0
   d5210:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5212:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5214:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5216:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5218:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d521a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d521c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d521e:	f7fe ffa4 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5222:	4620      	mov	r0, r4
   d5224:	b002      	add	sp, #8
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5228:	680b      	ldr	r3, [r1, #0]
   d522a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d522c:	b113      	cbz	r3, d5234 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d522e:	685a      	ldr	r2, [r3, #4]
   d5230:	3201      	adds	r2, #1
   d5232:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5234:	4770      	bx	lr

000d5236 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5238:	460c      	mov	r4, r1
   d523a:	ad02      	add	r5, sp, #8
   d523c:	f854 3b04 	ldr.w	r3, [r4], #4
   d5240:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5244:	4606      	mov	r6, r0
   d5246:	460f      	mov	r7, r1
   d5248:	a801      	add	r0, sp, #4
   d524a:	4621      	mov	r1, r4
   d524c:	f7ff ffec 	bl	d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5250:	4629      	mov	r1, r5
   d5252:	4630      	mov	r0, r6
   d5254:	f7ff ffd7 	bl	d5206 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5258:	a801      	add	r0, sp, #4
   d525a:	f7fe ff86 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d525e:	4620      	mov	r0, r4
   d5260:	f7fe ff83 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5264:	4638      	mov	r0, r7
   d5266:	2108      	movs	r1, #8
   d5268:	f001 f93d 	bl	d64e6 <_ZdlPvj>
        return p;
    }
   d526c:	4630      	mov	r0, r6
   d526e:	b003      	add	sp, #12
   d5270:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5272 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5272:	b513      	push	{r0, r1, r4, lr}
   d5274:	460b      	mov	r3, r1
   d5276:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5278:	c803      	ldmia	r0, {r0, r1}
   d527a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d527e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5282:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5286:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d528a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d528e:	b002      	add	sp, #8
   d5290:	bd10      	pop	{r4, pc}

000d5292 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5292:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5294:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5296:	b90a      	cbnz	r2, d529c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5298:	f001 f927 	bl	d64ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d529c:	68c3      	ldr	r3, [r0, #12]
    }
   d529e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52a2:	4718      	bx	r3

000d52a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52a4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52a6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d52a8:	f100 0110 	add.w	r1, r0, #16
   d52ac:	f7ff fff1 	bl	d5292 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d52b0:	bd08      	pop	{r3, pc}

000d52b2 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d52b2:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d52b4:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d52b6:	b90a      	cbnz	r2, d52bc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d52b8:	f001 f917 	bl	d64ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52bc:	68c3      	ldr	r3, [r0, #12]
    }
   d52be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d52c2:	4718      	bx	r3

000d52c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d52c4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52c6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d52c8:	f100 0110 	add.w	r1, r0, #16
   d52cc:	f7ff fff1 	bl	d52b2 <_ZNKSt8functionIFvRKbEEclES1_>
   d52d0:	bd08      	pop	{r3, pc}

000d52d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52d2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52d4:	2300      	movs	r3, #0
   d52d6:	6083      	str	r3, [r0, #8]
   d52d8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52da:	4604      	mov	r4, r0
   d52dc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d52de:	b12b      	cbz	r3, d52ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52e0:	2202      	movs	r2, #2
   d52e2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52e4:	68eb      	ldr	r3, [r5, #12]
   d52e6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52e8:	68ab      	ldr	r3, [r5, #8]
   d52ea:	60a3      	str	r3, [r4, #8]
	}
    }
   d52ec:	4620      	mov	r0, r4
   d52ee:	bd38      	pop	{r3, r4, r5, pc}

000d52f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d52f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d52f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d52f8:	b086      	sub	sp, #24
   d52fa:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d52fc:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5300:	808b      	strh	r3, [r1, #4]
   d5302:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5304:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5306:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d530a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d530c:	f04f 0002 	mov.w	r0, #2
   d5310:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5314:	4299      	cmp	r1, r3
   d5316:	d103      	bne.n	d5320 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5318:	e8c4 0f45 	strexb	r5, r0, [r4]
   d531c:	2d00      	cmp	r5, #0
   d531e:	d1f7      	bne.n	d5310 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5320:	d002      	beq.n	d5328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5322:	f88d 1000 	strb.w	r1, [sp]
   d5326:	e06b      	b.n	d5400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5328:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d532c:	bf1e      	ittt	ne
   d532e:	60e7      	strne	r7, [r4, #12]
   d5330:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5332:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5334:	2301      	movs	r3, #1
   d5336:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d533a:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d533c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d533e:	f104 0308 	add.w	r3, r4, #8
   d5342:	f3bf 8f5f 	dmb	sy
   d5346:	e853 6f00 	ldrex	r6, [r3]
   d534a:	e843 0200 	strex	r2, r0, [r3]
   d534e:	2a00      	cmp	r2, #0
   d5350:	d1f9      	bne.n	d5346 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d5352:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5356:	2e00      	cmp	r6, #0
   d5358:	d052      	beq.n	d5400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d535a:	f7ff fde5 	bl	d4f28 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d535e:	b120      	cbz	r0, d536a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5360:	4629      	mov	r1, r5
   d5362:	4630      	mov	r0, r6
   d5364:	f7ff ff95 	bl	d5292 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5368:	e043      	b.n	d53f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d536a:	4631      	mov	r1, r6
   d536c:	4668      	mov	r0, sp
   d536e:	f7ff ffb0 	bl	d52d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5372:	68e0      	ldr	r0, [r4, #12]
   d5374:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5378:	b108      	cbz	r0, d537e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d537a:	f001 fb91 	bl	d6aa0 <strdup>
   d537e:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5380:	2010      	movs	r0, #16
   d5382:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5386:	f7fe fe86 	bl	d4096 <_Znwj>
   d538a:	4605      	mov	r5, r0
   d538c:	b330      	cbz	r0, d53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d538e:	f04f 0800 	mov.w	r8, #0
   d5392:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5396:	2018      	movs	r0, #24
   d5398:	f7fe fe7d 	bl	d4096 <_Znwj>
   d539c:	4604      	mov	r4, r0
   d539e:	b1c0      	cbz	r0, d53d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53a0:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d53a4:	4601      	mov	r1, r0
   d53a6:	4668      	mov	r0, sp
   d53a8:	f7ff ff63 	bl	d5272 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53ac:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d53ae:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53b0:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53b2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d53b4:	9202      	str	r2, [sp, #8]
   d53b6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53b8:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d53be:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d53c4:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53c8:	9b04      	ldr	r3, [sp, #16]
   d53ca:	9203      	str	r2, [sp, #12]
   d53cc:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ce:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d53d2:	4b0e      	ldr	r3, [pc, #56]	; (d540c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d53d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53d6:	4b0e      	ldr	r3, [pc, #56]	; (d5410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53d8:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53da:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d53dc:	9804      	ldr	r0, [sp, #16]
   d53de:	f7ff fe5f 	bl	d50a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53e2:	4668      	mov	r0, sp
   d53e4:	f7ff feb7 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53e8:	2200      	movs	r2, #0
   d53ea:	4629      	mov	r1, r5
   d53ec:	4809      	ldr	r0, [pc, #36]	; (d5414 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d53ee:	f7ff fda3 	bl	d4f38 <application_thread_invoke>
   d53f2:	4630      	mov	r0, r6
   d53f4:	f7ff feaf 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53f8:	2110      	movs	r1, #16
   d53fa:	4630      	mov	r0, r6
   d53fc:	f001 f873 	bl	d64e6 <_ZdlPvj>
   d5400:	4638      	mov	r0, r7
   d5402:	f7ff fe4d 	bl	d50a0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5406:	b006      	add	sp, #24
   d5408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d540c:	000d52a5 	.word	0x000d52a5
   d5410:	000d5501 	.word	0x000d5501
   d5414:	000d5111 	.word	0x000d5111

000d5418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d541c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d541e:	ad07      	add	r5, sp, #28
   d5420:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5424:	4606      	mov	r6, r0
   d5426:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5428:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d542a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d542c:	460f      	mov	r7, r1
   d542e:	4690      	mov	r8, r2
   d5430:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5434:	f8c5 b004 	str.w	fp, [r5, #4]
   d5438:	f8c5 b008 	str.w	fp, [r5, #8]
   d543c:	9307      	str	r3, [sp, #28]
   d543e:	f7fe fe2a 	bl	d4096 <_Znwj>
   d5442:	4604      	mov	r4, r0
   d5444:	b138      	cbz	r0, d5456 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5446:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d544a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d544e:	f8c0 b004 	str.w	fp, [r0, #4]
   d5452:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5456:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5458:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d545a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d545c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d545e:	f7fe fe1a 	bl	d4096 <_Znwj>
   d5462:	b128      	cbz	r0, d5470 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5464:	2301      	movs	r3, #1
   d5466:	6043      	str	r3, [r0, #4]
   d5468:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d546a:	4b23      	ldr	r3, [pc, #140]	; (d54f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d546c:	6003      	str	r3, [r0, #0]
   d546e:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5470:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5472:	4b22      	ldr	r3, [pc, #136]	; (d54fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5474:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5476:	2008      	movs	r0, #8
   d5478:	f7fe fe0d 	bl	d4096 <_Znwj>
   d547c:	4604      	mov	r4, r0
   d547e:	b128      	cbz	r0, d548c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5480:	9b03      	ldr	r3, [sp, #12]
   d5482:	f840 3b04 	str.w	r3, [r0], #4
   d5486:	a904      	add	r1, sp, #16
   d5488:	f7ff fece 	bl	d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d548c:	9500      	str	r5, [sp, #0]
   d548e:	fa5f f38a 	uxtb.w	r3, sl
   d5492:	464a      	mov	r2, r9
   d5494:	4641      	mov	r1, r8
   d5496:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5498:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d549a:	f7ff fd91 	bl	d4fc0 <spark_send_event>
   d549e:	b9b8      	cbnz	r0, d54d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d54a0:	9b03      	ldr	r3, [sp, #12]
   d54a2:	785b      	ldrb	r3, [r3, #1]
   d54a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d54a8:	b993      	cbnz	r3, d54d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d54aa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d54ae:	a905      	add	r1, sp, #20
   d54b0:	a803      	add	r0, sp, #12
   d54b2:	9205      	str	r2, [sp, #20]
   d54b4:	f8ad 3018 	strh.w	r3, [sp, #24]
   d54b8:	f7ff ff1a 	bl	d52f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d54bc:	9805      	ldr	r0, [sp, #20]
   d54be:	f7ff fdef 	bl	d50a0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d54c2:	a805      	add	r0, sp, #20
   d54c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d54c6:	f7ff feb6 	bl	d5236 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d54ca:	a806      	add	r0, sp, #24
   d54cc:	f7fe fe4d 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54d0:	9b03      	ldr	r3, [sp, #12]
   d54d2:	9305      	str	r3, [sp, #20]
   d54d4:	a904      	add	r1, sp, #16
   d54d6:	a806      	add	r0, sp, #24
   d54d8:	f7ff fea6 	bl	d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d54dc:	a905      	add	r1, sp, #20
   d54de:	4630      	mov	r0, r6
   d54e0:	f7ff fe91 	bl	d5206 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d54e4:	a806      	add	r0, sp, #24
   d54e6:	f7fe fe40 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54ea:	a804      	add	r0, sp, #16
   d54ec:	f7fe fe3d 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d54f0:	4630      	mov	r0, r6
   d54f2:	b00b      	add	sp, #44	; 0x2c
   d54f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d54f8:	000d74b8 	.word	0x000d74b8
   d54fc:	000d566d 	.word	0x000d566d

000d5500 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5500:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5504:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5506:	d006      	beq.n	d5516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5508:	2a03      	cmp	r2, #3
   d550a:	d017      	beq.n	d553c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d550c:	2a01      	cmp	r2, #1
   d550e:	d121      	bne.n	d5554 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5510:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5512:	6003      	str	r3, [r0, #0]
	      break;
   d5514:	e01e      	b.n	d5554 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5516:	2018      	movs	r0, #24
   d5518:	680e      	ldr	r6, [r1, #0]
   d551a:	f7fe fdbc 	bl	d4096 <_Znwj>
   d551e:	4605      	mov	r5, r0
   d5520:	b150      	cbz	r0, d5538 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5522:	4631      	mov	r1, r6
   d5524:	f7ff fed5 	bl	d52d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5528:	6930      	ldr	r0, [r6, #16]
   d552a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d552e:	b108      	cbz	r0, d5534 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5530:	f001 fab6 	bl	d6aa0 <strdup>
   d5534:	6128      	str	r0, [r5, #16]
   d5536:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5538:	6025      	str	r5, [r4, #0]
   d553a:	e00b      	b.n	d5554 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d553c:	6804      	ldr	r4, [r0, #0]
   d553e:	b14c      	cbz	r4, d5554 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5540:	6920      	ldr	r0, [r4, #16]
   d5542:	f7ff fdad 	bl	d50a0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5546:	4620      	mov	r0, r4
   d5548:	f7ff fe05 	bl	d5156 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d554c:	2118      	movs	r1, #24
   d554e:	4620      	mov	r0, r4
   d5550:	f000 ffc9 	bl	d64e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5554:	2000      	movs	r0, #0
   d5556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5558 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5558:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d555a:	2300      	movs	r3, #0
   d555c:	6083      	str	r3, [r0, #8]
   d555e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5560:	4604      	mov	r4, r0
   d5562:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5564:	b12b      	cbz	r3, d5572 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5566:	2202      	movs	r2, #2
   d5568:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d556a:	68eb      	ldr	r3, [r5, #12]
   d556c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d556e:	68ab      	ldr	r3, [r5, #8]
   d5570:	60a3      	str	r3, [r4, #8]
	}
    }
   d5572:	4620      	mov	r0, r4
   d5574:	bd38      	pop	{r3, r4, r5, pc}

000d5576 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5576:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5578:	b570      	push	{r4, r5, r6, lr}
   d557a:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d557c:	d006      	beq.n	d558c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d557e:	2a03      	cmp	r2, #3
   d5580:	d011      	beq.n	d55a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5582:	2a01      	cmp	r2, #1
   d5584:	d118      	bne.n	d55b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5586:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5588:	6003      	str	r3, [r0, #0]
	      break;
   d558a:	e015      	b.n	d55b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d558c:	2014      	movs	r0, #20
   d558e:	680e      	ldr	r6, [r1, #0]
   d5590:	f7fe fd81 	bl	d4096 <_Znwj>
   d5594:	4605      	mov	r5, r0
   d5596:	b120      	cbz	r0, d55a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5598:	4631      	mov	r1, r6
   d559a:	f7ff ffdd 	bl	d5558 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d559e:	7c33      	ldrb	r3, [r6, #16]
   d55a0:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d55a2:	6025      	str	r5, [r4, #0]
   d55a4:	e008      	b.n	d55b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d55a6:	6804      	ldr	r4, [r0, #0]
   d55a8:	b134      	cbz	r4, d55b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff fdd3 	bl	d5156 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d55b0:	2114      	movs	r1, #20
   d55b2:	4620      	mov	r0, r4
   d55b4:	f000 ff97 	bl	d64e6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d55b8:	2000      	movs	r0, #0
   d55ba:	bd70      	pop	{r4, r5, r6, pc}

000d55bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d55bc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d55be:	2300      	movs	r3, #0
   d55c0:	b087      	sub	sp, #28
   d55c2:	460c      	mov	r4, r1
   d55c4:	f3bf 8f5f 	dmb	sy
   d55c8:	e850 6f00 	ldrex	r6, [r0]
   d55cc:	e840 3200 	strex	r2, r3, [r0]
   d55d0:	2a00      	cmp	r2, #0
   d55d2:	d1f9      	bne.n	d55c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d55d4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d55d8:	2e00      	cmp	r6, #0
   d55da:	d03f      	beq.n	d565c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d55dc:	4618      	mov	r0, r3
   d55de:	f7ff fca3 	bl	d4f28 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d55e2:	4607      	mov	r7, r0
   d55e4:	b120      	cbz	r0, d55f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d55e6:	4621      	mov	r1, r4
   d55e8:	4630      	mov	r0, r6
   d55ea:	f7ff fe62 	bl	d52b2 <_ZNKSt8functionIFvRKbEEclES1_>
   d55ee:	e02e      	b.n	d564e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d55f0:	4631      	mov	r1, r6
   d55f2:	a801      	add	r0, sp, #4
   d55f4:	f7ff ffb0 	bl	d5558 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d55f8:	7823      	ldrb	r3, [r4, #0]
   d55fa:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d55fe:	2010      	movs	r0, #16
   d5600:	f7fe fd49 	bl	d4096 <_Znwj>
   d5604:	4605      	mov	r5, r0
   d5606:	b1d0      	cbz	r0, d563e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5608:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d560a:	2014      	movs	r0, #20
   d560c:	f7fe fd43 	bl	d4096 <_Znwj>
   d5610:	4604      	mov	r4, r0
   d5612:	b178      	cbz	r0, d5634 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5614:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5616:	4601      	mov	r1, r0
   d5618:	a801      	add	r0, sp, #4
   d561a:	f7ff fe2a 	bl	d5272 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d561e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5620:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5622:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5624:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5626:	9203      	str	r2, [sp, #12]
   d5628:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d562a:	60e3      	str	r3, [r4, #12]
   d562c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5630:	9204      	str	r2, [sp, #16]
   d5632:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5634:	4b0a      	ldr	r3, [pc, #40]	; (d5660 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5636:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5638:	4b0a      	ldr	r3, [pc, #40]	; (d5664 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d563a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d563c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d563e:	a801      	add	r0, sp, #4
   d5640:	f7ff fd89 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5644:	2200      	movs	r2, #0
   d5646:	4629      	mov	r1, r5
   d5648:	4807      	ldr	r0, [pc, #28]	; (d5668 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d564a:	f7ff fc75 	bl	d4f38 <application_thread_invoke>
   d564e:	4630      	mov	r0, r6
   d5650:	f7ff fd81 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5654:	2110      	movs	r1, #16
   d5656:	4630      	mov	r0, r6
   d5658:	f000 ff45 	bl	d64e6 <_ZdlPvj>
        }
    }
   d565c:	b007      	add	sp, #28
   d565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5660:	000d52c5 	.word	0x000d52c5
   d5664:	000d5577 	.word	0x000d5577
   d5668:	000d5111 	.word	0x000d5111

000d566c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d566c:	b530      	push	{r4, r5, lr}
   d566e:	b085      	sub	sp, #20
   d5670:	4604      	mov	r4, r0
   d5672:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5674:	4668      	mov	r0, sp
   d5676:	4611      	mov	r1, r2
   d5678:	f7ff fddd 	bl	d5236 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d567c:	b17c      	cbz	r4, d569e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d567e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5680:	4628      	mov	r0, r5
   d5682:	b10d      	cbz	r5, d5688 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5684:	f001 fa0c 	bl	d6aa0 <strdup>
   d5688:	9002      	str	r0, [sp, #8]
   d568a:	a902      	add	r1, sp, #8
   d568c:	4668      	mov	r0, sp
   d568e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5692:	f7ff fe2d 	bl	d52f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5696:	9802      	ldr	r0, [sp, #8]
   d5698:	f7ff fd02 	bl	d50a0 <free>
   d569c:	e01d      	b.n	d56da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d569e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d56a0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d56a4:	f04f 0201 	mov.w	r2, #1
   d56a8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d56ac:	42a3      	cmp	r3, r4
   d56ae:	d103      	bne.n	d56b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d56b0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d56b4:	2900      	cmp	r1, #0
   d56b6:	d1f7      	bne.n	d56a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d56b8:	d002      	beq.n	d56c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d56ba:	f88d 3008 	strb.w	r3, [sp, #8]
   d56be:	e00c      	b.n	d56da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d56c0:	f110 010c 	adds.w	r1, r0, #12
   d56c4:	f04f 0301 	mov.w	r3, #1
   d56c8:	bf18      	it	ne
   d56ca:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d56cc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d56d0:	3004      	adds	r0, #4
   d56d2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d56d6:	f7ff ff71 	bl	d55bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d56da:	a801      	add	r0, sp, #4
   d56dc:	f7fe fd45 	bl	d416a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d56e0:	b005      	add	sp, #20
   d56e2:	bd30      	pop	{r4, r5, pc}

000d56e4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56e4:	2200      	movs	r2, #0
   d56e6:	4611      	mov	r1, r2
   d56e8:	6840      	ldr	r0, [r0, #4]
   d56ea:	f7ff bcb9 	b.w	d5060 <network_listening>

000d56ee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56ee:	2200      	movs	r2, #0
   d56f0:	4611      	mov	r1, r2
   d56f2:	6840      	ldr	r0, [r0, #4]
   d56f4:	f7ff bcc4 	b.w	d5080 <network_get_listen_timeout>

000d56f8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56f8:	2200      	movs	r2, #0
   d56fa:	6840      	ldr	r0, [r0, #4]
   d56fc:	f7ff bcb8 	b.w	d5070 <network_set_listen_timeout>

000d5700 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5700:	2200      	movs	r2, #0
   d5702:	f081 0101 	eor.w	r1, r1, #1
   d5706:	6840      	ldr	r0, [r0, #4]
   d5708:	f7ff bca2 	b.w	d5050 <network_listen>

000d570c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d570c:	2300      	movs	r3, #0
   d570e:	461a      	mov	r2, r3
   d5710:	4619      	mov	r1, r3
   d5712:	6840      	ldr	r0, [r0, #4]
   d5714:	f7ff bc94 	b.w	d5040 <network_off>

000d5718 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5718:	2300      	movs	r3, #0
   d571a:	461a      	mov	r2, r3
   d571c:	4619      	mov	r1, r3
   d571e:	6840      	ldr	r0, [r0, #4]
   d5720:	f7ff bc86 	b.w	d5030 <network_on>

000d5724 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5724:	2200      	movs	r2, #0
   d5726:	4611      	mov	r1, r2
   d5728:	6840      	ldr	r0, [r0, #4]
   d572a:	f7ff bc79 	b.w	d5020 <network_ready>

000d572e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d572e:	2200      	movs	r2, #0
   d5730:	4611      	mov	r1, r2
   d5732:	6840      	ldr	r0, [r0, #4]
   d5734:	f7ff bc64 	b.w	d5000 <network_connecting>

000d5738 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5738:	2200      	movs	r2, #0
   d573a:	2102      	movs	r1, #2
   d573c:	6840      	ldr	r0, [r0, #4]
   d573e:	f7ff bc67 	b.w	d5010 <network_disconnect>

000d5742 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5742:	2300      	movs	r3, #0
   d5744:	461a      	mov	r2, r3
   d5746:	6840      	ldr	r0, [r0, #4]
   d5748:	f7ff bc52 	b.w	d4ff0 <network_connect>

000d574c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d574c:	4b02      	ldr	r3, [pc, #8]	; (d5758 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d574e:	2203      	movs	r2, #3
   d5750:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5752:	4a02      	ldr	r2, [pc, #8]	; (d575c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5754:	601a      	str	r2, [r3, #0]
   d5756:	4770      	bx	lr
   d5758:	2003e370 	.word	0x2003e370
   d575c:	000d74d4 	.word	0x000d74d4

000d5760 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5760:	4770      	bx	lr

000d5762 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5764:	4606      	mov	r6, r0
   d5766:	4615      	mov	r5, r2
   d5768:	460c      	mov	r4, r1
   d576a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d576c:	42bc      	cmp	r4, r7
   d576e:	d006      	beq.n	d577e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5770:	6833      	ldr	r3, [r6, #0]
   d5772:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5776:	689b      	ldr	r3, [r3, #8]
   d5778:	4630      	mov	r0, r6
   d577a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d577c:	e7f6      	b.n	d576c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d577e:	4628      	mov	r0, r5
   d5780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5782 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5782:	2200      	movs	r2, #0
   d5784:	7c00      	ldrb	r0, [r0, #16]
   d5786:	f7ff baef 	b.w	d4d68 <HAL_I2C_Write_Data>

000d578a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d578a:	2100      	movs	r1, #0
   d578c:	7c00      	ldrb	r0, [r0, #16]
   d578e:	f7ff baf3 	b.w	d4d78 <HAL_I2C_Available_Data>

000d5792 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5792:	2100      	movs	r1, #0
   d5794:	7c00      	ldrb	r0, [r0, #16]
   d5796:	f7ff baf7 	b.w	d4d88 <HAL_I2C_Read_Data>

000d579a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d579a:	2100      	movs	r1, #0
   d579c:	7c00      	ldrb	r0, [r0, #16]
   d579e:	f7ff bafb 	b.w	d4d98 <HAL_I2C_Peek_Data>

000d57a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d57a2:	2100      	movs	r1, #0
   d57a4:	7c00      	ldrb	r0, [r0, #16]
   d57a6:	f7ff baff 	b.w	d4da8 <HAL_I2C_Flush_Data>

000d57aa <_ZN7TwoWireD0Ev>:
   d57aa:	b510      	push	{r4, lr}
   d57ac:	2114      	movs	r1, #20
   d57ae:	4604      	mov	r4, r0
   d57b0:	f000 fe99 	bl	d64e6 <_ZdlPvj>
   d57b4:	4620      	mov	r0, r4
   d57b6:	bd10      	pop	{r4, pc}

000d57b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57b8:	b510      	push	{r4, lr}
   d57ba:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57c0:	4608      	mov	r0, r1
   d57c2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57c4:	2100      	movs	r1, #0
   d57c6:	4b04      	ldr	r3, [pc, #16]	; (d57d8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d57c8:	7420      	strb	r0, [r4, #16]
   d57ca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d57ce:	f7ff fafb 	bl	d4dc8 <HAL_I2C_Init>

}
   d57d2:	4620      	mov	r0, r4
   d57d4:	bd10      	pop	{r4, pc}
   d57d6:	bf00      	nop
   d57d8:	000d7508 	.word	0x000d7508

000d57dc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d57dc:	2300      	movs	r3, #0
   d57de:	461a      	mov	r2, r3
   d57e0:	4619      	mov	r1, r3
   d57e2:	7c00      	ldrb	r0, [r0, #16]
   d57e4:	f7ff baa0 	b.w	d4d28 <HAL_I2C_Begin>

000d57e8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d57e8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d57ea:	2400      	movs	r4, #0
   d57ec:	7c00      	ldrb	r0, [r0, #16]
   d57ee:	9400      	str	r4, [sp, #0]
   d57f0:	f7ff faa2 	bl	d4d38 <HAL_I2C_Request_Data>
  return result;
}
   d57f4:	b2c0      	uxtb	r0, r0
   d57f6:	b002      	add	sp, #8
   d57f8:	bd10      	pop	{r4, pc}

000d57fa <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d57fa:	2301      	movs	r3, #1
   d57fc:	b2d2      	uxtb	r2, r2
   d57fe:	b2c9      	uxtb	r1, r1
   d5800:	f7ff bff2 	b.w	d57e8 <_ZN7TwoWire11requestFromEhhh>

000d5804 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5804:	2200      	movs	r2, #0
   d5806:	7c00      	ldrb	r0, [r0, #16]
   d5808:	f7ff ba9e 	b.w	d4d48 <HAL_I2C_Begin_Transmission>

000d580c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d580c:	b2c9      	uxtb	r1, r1
   d580e:	f7ff bff9 	b.w	d5804 <_ZN7TwoWire17beginTransmissionEh>

000d5812 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5812:	2200      	movs	r2, #0
   d5814:	7c00      	ldrb	r0, [r0, #16]
   d5816:	f7ff ba9f 	b.w	d4d58 <HAL_I2C_End_Transmission>

000d581a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d581a:	2101      	movs	r1, #1
   d581c:	f7ff bff9 	b.w	d5812 <_ZN7TwoWire15endTransmissionEh>

000d5820 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5820:	2100      	movs	r1, #0
   d5822:	7c00      	ldrb	r0, [r0, #16]
   d5824:	f7ff bac8 	b.w	d4db8 <HAL_I2C_Is_Enabled>

000d5828 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5828:	4700      	bx	r0
	...

000d582c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d582c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d582e:	b085      	sub	sp, #20
   d5830:	461c      	mov	r4, r3
   d5832:	4605      	mov	r5, r0
   d5834:	460e      	mov	r6, r1
   d5836:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
   d5838:	f7ff fa6e 	bl	d4d18 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d583c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d583e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5840:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5844:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5846:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d584a:	bfa5      	ittet	ge
   d584c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5850:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d5854:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d5856:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d5858:	9300      	str	r3, [sp, #0]
   d585a:	4628      	mov	r0, r5
   d585c:	463b      	mov	r3, r7
   d585e:	4632      	mov	r2, r6
   d5860:	4904      	ldr	r1, [pc, #16]	; (d5874 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d5862:	bfa8      	it	ge
   d5864:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d5868:	f7ff fa4e 	bl	d4d08 <HAL_Interrupts_Attach>
    return true;
}
   d586c:	2001      	movs	r0, #1
   d586e:	b005      	add	sp, #20
   d5870:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5872:	bf00      	nop
   d5874:	000d5829 	.word	0x000d5829

000d5878 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5878:	4770      	bx	lr

000d587a <_ZN9IPAddressD0Ev>:
   d587a:	b510      	push	{r4, lr}
   d587c:	2118      	movs	r1, #24
   d587e:	4604      	mov	r4, r0
   d5880:	f000 fe31 	bl	d64e6 <_ZdlPvj>
   d5884:	4620      	mov	r0, r4
   d5886:	bd10      	pop	{r4, pc}

000d5888 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5888:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d588a:	7d03      	ldrb	r3, [r0, #20]
   d588c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d588e:	b08d      	sub	sp, #52	; 0x34
   d5890:	460e      	mov	r6, r1
   d5892:	f100 0704 	add.w	r7, r0, #4
   d5896:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d589a:	d002      	beq.n	d58a2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d589c:	f100 0508 	add.w	r5, r0, #8
   d58a0:	e018      	b.n	d58d4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d58a2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58a4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d58a6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d58aa:	232f      	movs	r3, #47	; 0x2f
   d58ac:	462a      	mov	r2, r5
   d58ae:	200a      	movs	r0, #10
   d58b0:	f7ff fa92 	bl	d4dd8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58b4:	4628      	mov	r0, r5
   d58b6:	f001 f90e 	bl	d6ad6 <strlen>
   d58ba:	6833      	ldr	r3, [r6, #0]
   d58bc:	4602      	mov	r2, r0
   d58be:	68db      	ldr	r3, [r3, #12]
   d58c0:	4629      	mov	r1, r5
   d58c2:	4630      	mov	r0, r6
   d58c4:	4798      	blx	r3
   d58c6:	e00f      	b.n	d58e8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d58c8:	b124      	cbz	r4, d58d4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d58ca:	212e      	movs	r1, #46	; 0x2e
   d58cc:	4630      	mov	r0, r6
   d58ce:	f000 f9c7 	bl	d5c60 <_ZN5Print5printEc>
   d58d2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d58d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d58d8:	220a      	movs	r2, #10
   d58da:	4630      	mov	r0, r6
   d58dc:	f000 f9f0 	bl	d5cc0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d58e0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d58e2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d58e4:	d1f0      	bne.n	d58c8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d58e6:	4620      	mov	r0, r4
    }
    return n;
}
   d58e8:	b00d      	add	sp, #52	; 0x34
   d58ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d58ec:	b510      	push	{r4, lr}
   d58ee:	4b05      	ldr	r3, [pc, #20]	; (d5904 <_ZN9IPAddressC1Ev+0x18>)
   d58f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d58f2:	2211      	movs	r2, #17
   d58f4:	f840 3b04 	str.w	r3, [r0], #4
   d58f8:	2100      	movs	r1, #0
   d58fa:	f001 f88e 	bl	d6a1a <memset>
{
    clear();
}
   d58fe:	4620      	mov	r0, r4
   d5900:	bd10      	pop	{r4, pc}
   d5902:	bf00      	nop
   d5904:	000d7530 	.word	0x000d7530

000d5908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5908:	4603      	mov	r3, r0
   d590a:	4a07      	ldr	r2, [pc, #28]	; (d5928 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d590c:	b510      	push	{r4, lr}
   d590e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5912:	f101 0210 	add.w	r2, r1, #16
   d5916:	f851 4b04 	ldr.w	r4, [r1], #4
   d591a:	f843 4b04 	str.w	r4, [r3], #4
   d591e:	4291      	cmp	r1, r2
   d5920:	d1f9      	bne.n	d5916 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5922:	780a      	ldrb	r2, [r1, #0]
   d5924:	701a      	strb	r2, [r3, #0]
}
   d5926:	bd10      	pop	{r4, pc}
   d5928:	000d7530 	.word	0x000d7530

000d592c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d592c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d592e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5932:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5936:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d593a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d593e:	2304      	movs	r3, #4
   d5940:	6041      	str	r1, [r0, #4]
   d5942:	7503      	strb	r3, [r0, #20]
   d5944:	bd10      	pop	{r4, pc}

000d5946 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5946:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5948:	780d      	ldrb	r5, [r1, #0]
   d594a:	788b      	ldrb	r3, [r1, #2]
   d594c:	784a      	ldrb	r2, [r1, #1]
   d594e:	78c9      	ldrb	r1, [r1, #3]
   d5950:	9100      	str	r1, [sp, #0]
   d5952:	4629      	mov	r1, r5
   d5954:	f7ff ffea 	bl	d592c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5958:	b003      	add	sp, #12
   d595a:	bd30      	pop	{r4, r5, pc}

000d595c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d595c:	4b01      	ldr	r3, [pc, #4]	; (d5964 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d595e:	4a02      	ldr	r2, [pc, #8]	; (d5968 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5960:	601a      	str	r2, [r3, #0]
   d5962:	4770      	bx	lr
   d5964:	2003e378 	.word	0x2003e378
   d5968:	000d75f1 	.word	0x000d75f1

000d596c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d596c:	2200      	movs	r2, #0
   d596e:	4611      	mov	r1, r2
   d5970:	6840      	ldr	r0, [r0, #4]
   d5972:	f7ff bb75 	b.w	d5060 <network_listening>

000d5976 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5976:	2200      	movs	r2, #0
   d5978:	4611      	mov	r1, r2
   d597a:	6840      	ldr	r0, [r0, #4]
   d597c:	f7ff bb80 	b.w	d5080 <network_get_listen_timeout>

000d5980 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5980:	2200      	movs	r2, #0
   d5982:	6840      	ldr	r0, [r0, #4]
   d5984:	f7ff bb74 	b.w	d5070 <network_set_listen_timeout>

000d5988 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5988:	2200      	movs	r2, #0
   d598a:	f081 0101 	eor.w	r1, r1, #1
   d598e:	6840      	ldr	r0, [r0, #4]
   d5990:	f7ff bb5e 	b.w	d5050 <network_listen>

000d5994 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5994:	2300      	movs	r3, #0
   d5996:	461a      	mov	r2, r3
   d5998:	4619      	mov	r1, r3
   d599a:	6840      	ldr	r0, [r0, #4]
   d599c:	f7ff bb50 	b.w	d5040 <network_off>

000d59a0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d59a0:	2300      	movs	r3, #0
   d59a2:	461a      	mov	r2, r3
   d59a4:	4619      	mov	r1, r3
   d59a6:	6840      	ldr	r0, [r0, #4]
   d59a8:	f7ff bb42 	b.w	d5030 <network_on>

000d59ac <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59ac:	2200      	movs	r2, #0
   d59ae:	4611      	mov	r1, r2
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	f7ff bb35 	b.w	d5020 <network_ready>

000d59b6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59b6:	2200      	movs	r2, #0
   d59b8:	4611      	mov	r1, r2
   d59ba:	6840      	ldr	r0, [r0, #4]
   d59bc:	f7ff bb20 	b.w	d5000 <network_connecting>

000d59c0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59c0:	2200      	movs	r2, #0
   d59c2:	2102      	movs	r1, #2
   d59c4:	6840      	ldr	r0, [r0, #4]
   d59c6:	f7ff bb23 	b.w	d5010 <network_disconnect>

000d59ca <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59ca:	2300      	movs	r3, #0
   d59cc:	461a      	mov	r2, r3
   d59ce:	6840      	ldr	r0, [r0, #4]
   d59d0:	f7ff bb0e 	b.w	d4ff0 <network_connect>

000d59d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d59d4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59d6:	4605      	mov	r5, r0
   d59d8:	b188      	cbz	r0, d59fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59da:	6804      	ldr	r4, [r0, #0]
   d59dc:	b14c      	cbz	r4, d59f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d59de:	68a3      	ldr	r3, [r4, #8]
   d59e0:	b11b      	cbz	r3, d59ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59e2:	2203      	movs	r2, #3
   d59e4:	4621      	mov	r1, r4
   d59e6:	4620      	mov	r0, r4
   d59e8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59ea:	2110      	movs	r1, #16
   d59ec:	4620      	mov	r0, r4
   d59ee:	f000 fd7a 	bl	d64e6 <_ZdlPvj>
   d59f2:	4628      	mov	r0, r5
   d59f4:	2114      	movs	r1, #20
      }
   d59f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59fa:	f000 bd74 	b.w	d64e6 <_ZdlPvj>
   d59fe:	bd38      	pop	{r3, r4, r5, pc}

000d5a00 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5a00:	b110      	cbz	r0, d5a08 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5a02:	6803      	ldr	r3, [r0, #0]
   d5a04:	685b      	ldr	r3, [r3, #4]
   d5a06:	4718      	bx	r3
   d5a08:	4770      	bx	lr

000d5a0a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5a0a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a0c:	6803      	ldr	r3, [r0, #0]
   d5a0e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5a10:	b1bb      	cbz	r3, d5a42 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5a12:	6858      	ldr	r0, [r3, #4]
   d5a14:	f7ff f8f8 	bl	d4c08 <os_thread_is_current>
   d5a18:	b978      	cbnz	r0, d5a3a <_ZN6ThreadD1Ev+0x30>
   d5a1a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5a1c:	7c5a      	ldrb	r2, [r3, #17]
   d5a1e:	b912      	cbnz	r2, d5a26 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5a20:	6858      	ldr	r0, [r3, #4]
   d5a22:	f7ff f8f9 	bl	d4c18 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5a26:	6823      	ldr	r3, [r4, #0]
   d5a28:	6858      	ldr	r0, [r3, #4]
   d5a2a:	f7ff f8fd 	bl	d4c28 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a2e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a30:	2300      	movs	r3, #0
   d5a32:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a34:	b128      	cbz	r0, d5a42 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5a36:	f7ff ffcd 	bl	d59d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a3a:	6820      	ldr	r0, [r4, #0]
   d5a3c:	b108      	cbz	r0, d5a42 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5a3e:	f7ff ffc9 	bl	d59d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5a42:	4620      	mov	r0, r4
   d5a44:	bd10      	pop	{r4, pc}
	...

000d5a48 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5a48:	b538      	push	{r3, r4, r5, lr}
   d5a4a:	4b0c      	ldr	r3, [pc, #48]	; (d5a7c <_ZN5spark9MeshClassD1Ev+0x34>)
   d5a4c:	6003      	str	r3, [r0, #0]
   d5a4e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a50:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5a54:	b108      	cbz	r0, d5a5a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5a56:	f7fe fb22 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a5a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5a5e:	b135      	cbz	r5, d5a6e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a60:	4628      	mov	r0, r5
   d5a62:	f7ff ffd2 	bl	d5a0a <_ZN6ThreadD1Ev>
   d5a66:	2104      	movs	r1, #4
   d5a68:	4628      	mov	r0, r5
   d5a6a:	f000 fd3c 	bl	d64e6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a6e:	68a0      	ldr	r0, [r4, #8]
   d5a70:	b108      	cbz	r0, d5a76 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5a72:	f7ff ffc5 	bl	d5a00 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5a76:	4620      	mov	r0, r4
   d5a78:	bd38      	pop	{r3, r4, r5, pc}
   d5a7a:	bf00      	nop
   d5a7c:	000d7624 	.word	0x000d7624

000d5a80 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5a80:	b538      	push	{r3, r4, r5, lr}
   d5a82:	4c0d      	ldr	r4, [pc, #52]	; (d5ab8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5a84:	4b0d      	ldr	r3, [pc, #52]	; (d5abc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5a86:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a88:	2500      	movs	r5, #0
   d5a8a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5a8c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5a90:	6063      	str	r3, [r4, #4]
   d5a92:	60a5      	str	r5, [r4, #8]
   d5a94:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a98:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5a9c:	f7ff f8d4 	bl	d4c48 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5aa0:	4b07      	ldr	r3, [pc, #28]	; (d5ac0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5aa2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5aa6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	4a06      	ldr	r2, [pc, #24]	; (d5ac4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5aac:	4906      	ldr	r1, [pc, #24]	; (d5ac8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5ab2:	f000 bd13 	b.w	d64dc <__aeabi_atexit>
   d5ab6:	bf00      	nop
   d5ab8:	2003e37c 	.word	0x2003e37c
   d5abc:	000d7658 	.word	0x000d7658
   d5ac0:	000d7624 	.word	0x000d7624
   d5ac4:	2003e340 	.word	0x2003e340
   d5ac8:	000d5a49 	.word	0x000d5a49

000d5acc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5acc:	2300      	movs	r3, #0
   d5ace:	461a      	mov	r2, r3
   d5ad0:	6840      	ldr	r0, [r0, #4]
   d5ad2:	f7ff ba8d 	b.w	d4ff0 <network_connect>

000d5ad6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ad6:	2200      	movs	r2, #0
   d5ad8:	2102      	movs	r1, #2
   d5ada:	6840      	ldr	r0, [r0, #4]
   d5adc:	f7ff ba98 	b.w	d5010 <network_disconnect>

000d5ae0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5ae0:	2200      	movs	r2, #0
   d5ae2:	4611      	mov	r1, r2
   d5ae4:	6840      	ldr	r0, [r0, #4]
   d5ae6:	f7ff ba8b 	b.w	d5000 <network_connecting>

000d5aea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5aea:	2200      	movs	r2, #0
   d5aec:	4611      	mov	r1, r2
   d5aee:	6840      	ldr	r0, [r0, #4]
   d5af0:	f7ff ba96 	b.w	d5020 <network_ready>

000d5af4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5af4:	2300      	movs	r3, #0
   d5af6:	461a      	mov	r2, r3
   d5af8:	4619      	mov	r1, r3
   d5afa:	6840      	ldr	r0, [r0, #4]
   d5afc:	f7ff ba98 	b.w	d5030 <network_on>

000d5b00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5b00:	2300      	movs	r3, #0
   d5b02:	461a      	mov	r2, r3
   d5b04:	4619      	mov	r1, r3
   d5b06:	6840      	ldr	r0, [r0, #4]
   d5b08:	f7ff ba9a 	b.w	d5040 <network_off>

000d5b0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5b0c:	2200      	movs	r2, #0
   d5b0e:	f081 0101 	eor.w	r1, r1, #1
   d5b12:	6840      	ldr	r0, [r0, #4]
   d5b14:	f7ff ba9c 	b.w	d5050 <network_listen>

000d5b18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5b18:	2200      	movs	r2, #0
   d5b1a:	6840      	ldr	r0, [r0, #4]
   d5b1c:	f7ff baa8 	b.w	d5070 <network_set_listen_timeout>

000d5b20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5b20:	2200      	movs	r2, #0
   d5b22:	4611      	mov	r1, r2
   d5b24:	6840      	ldr	r0, [r0, #4]
   d5b26:	f7ff baab 	b.w	d5080 <network_get_listen_timeout>

000d5b2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5b2a:	2200      	movs	r2, #0
   d5b2c:	4611      	mov	r1, r2
   d5b2e:	6840      	ldr	r0, [r0, #4]
   d5b30:	f7ff ba96 	b.w	d5060 <network_listening>

000d5b34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b38:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b3a:	b095      	sub	sp, #84	; 0x54
   d5b3c:	4616      	mov	r6, r2
   d5b3e:	460d      	mov	r5, r1
   d5b40:	4607      	mov	r7, r0
    IPAddress addr;
   d5b42:	f7ff fed3 	bl	d58ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5b46:	4621      	mov	r1, r4
   d5b48:	2220      	movs	r2, #32
   d5b4a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b4c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5b4e:	f000 ff64 	bl	d6a1a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5b52:	2340      	movs	r3, #64	; 0x40
   d5b54:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5b56:	4621      	mov	r1, r4
   d5b58:	466b      	mov	r3, sp
   d5b5a:	aa0c      	add	r2, sp, #48	; 0x30
   d5b5c:	4630      	mov	r0, r6
   d5b5e:	f7ff f94b 	bl	d4df8 <netdb_getaddrinfo>
    if (!r) {
   d5b62:	4604      	mov	r4, r0
   d5b64:	2800      	cmp	r0, #0
   d5b66:	d144      	bne.n	d5bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b68:	4602      	mov	r2, r0
   d5b6a:	2101      	movs	r1, #1
   d5b6c:	6868      	ldr	r0, [r5, #4]
   d5b6e:	f7ff fa57 	bl	d5020 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b72:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b74:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b76:	4622      	mov	r2, r4
   d5b78:	6868      	ldr	r0, [r5, #4]
   d5b7a:	f7ff fa51 	bl	d5020 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b7e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b80:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5b82:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b84:	2e00      	cmp	r6, #0
   d5b86:	d034      	beq.n	d5bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5b88:	2900      	cmp	r1, #0
   d5b8a:	d132      	bne.n	d5bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5b8c:	6873      	ldr	r3, [r6, #4]
   d5b8e:	2b02      	cmp	r3, #2
   d5b90:	d002      	beq.n	d5b98 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5b92:	2b0a      	cmp	r3, #10
   d5b94:	d009      	beq.n	d5baa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5b96:	e02a      	b.n	d5bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5b98:	f1b8 0f00 	cmp.w	r8, #0
   d5b9c:	d027      	beq.n	d5bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5b9e:	6971      	ldr	r1, [r6, #20]
   d5ba0:	4638      	mov	r0, r7
   d5ba2:	3104      	adds	r1, #4
   d5ba4:	f7ff fecf 	bl	d5946 <_ZN9IPAddressaSEPKh>
   d5ba8:	e020      	b.n	d5bec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5baa:	f1b9 0f00 	cmp.w	r9, #0
   d5bae:	d01e      	beq.n	d5bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5bb0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5bb2:	2211      	movs	r2, #17
   d5bb4:	a801      	add	r0, sp, #4
   d5bb6:	f000 ff30 	bl	d6a1a <memset>
                    a.v = 6;
   d5bba:	2306      	movs	r3, #6
   d5bbc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5bc0:	ad01      	add	r5, sp, #4
   d5bc2:	f104 0308 	add.w	r3, r4, #8
   d5bc6:	3418      	adds	r4, #24
   d5bc8:	6818      	ldr	r0, [r3, #0]
   d5bca:	6859      	ldr	r1, [r3, #4]
   d5bcc:	462a      	mov	r2, r5
   d5bce:	c203      	stmia	r2!, {r0, r1}
   d5bd0:	3308      	adds	r3, #8
   d5bd2:	42a3      	cmp	r3, r4
   d5bd4:	4615      	mov	r5, r2
   d5bd6:	d1f7      	bne.n	d5bc8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5bd8:	a901      	add	r1, sp, #4
   d5bda:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5bdc:	ad07      	add	r5, sp, #28
   d5bde:	f7ff fe93 	bl	d5908 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5be4:	1d3c      	adds	r4, r7, #4
   d5be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5be8:	682b      	ldr	r3, [r5, #0]
   d5bea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5bec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bee:	69f6      	ldr	r6, [r6, #28]
   d5bf0:	e7c8      	b.n	d5b84 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5bf2:	9800      	ldr	r0, [sp, #0]
   d5bf4:	f7ff f8f8 	bl	d4de8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5bf8:	4638      	mov	r0, r7
   d5bfa:	b015      	add	sp, #84	; 0x54
   d5bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5c00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5c00:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5c02:	4a03      	ldr	r2, [pc, #12]	; (d5c10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5c04:	601a      	str	r2, [r3, #0]
   d5c06:	2200      	movs	r2, #0
   d5c08:	605a      	str	r2, [r3, #4]
   d5c0a:	4770      	bx	lr
   d5c0c:	2003e54c 	.word	0x2003e54c
   d5c10:	000d7658 	.word	0x000d7658

000d5c14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c16:	4606      	mov	r6, r0
   d5c18:	460d      	mov	r5, r1
   d5c1a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5c1c:	2400      	movs	r4, #0
  while (size--) {
   d5c1e:	42bd      	cmp	r5, r7
   d5c20:	d00c      	beq.n	d5c3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c22:	6833      	ldr	r3, [r6, #0]
   d5c24:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c28:	689b      	ldr	r3, [r3, #8]
   d5c2a:	4630      	mov	r0, r6
   d5c2c:	4798      	blx	r3
     if (chunk>=0)
   d5c2e:	2800      	cmp	r0, #0
   d5c30:	db01      	blt.n	d5c36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c32:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5c34:	e7f3      	b.n	d5c1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c36:	2c00      	cmp	r4, #0
   d5c38:	bf08      	it	eq
   d5c3a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c40 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c40:	b570      	push	{r4, r5, r6, lr}
   d5c42:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c44:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c46:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c48:	b149      	cbz	r1, d5c5e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c4a:	f000 ff44 	bl	d6ad6 <strlen>
   d5c4e:	682b      	ldr	r3, [r5, #0]
   d5c50:	4602      	mov	r2, r0
   d5c52:	4621      	mov	r1, r4
   d5c54:	4628      	mov	r0, r5
   d5c56:	68db      	ldr	r3, [r3, #12]
    }
   d5c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c5c:	4718      	bx	r3
    }
   d5c5e:	bd70      	pop	{r4, r5, r6, pc}

000d5c60 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c60:	6803      	ldr	r3, [r0, #0]
   d5c62:	689b      	ldr	r3, [r3, #8]
   d5c64:	4718      	bx	r3

000d5c66 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c66:	b530      	push	{r4, r5, lr}
   d5c68:	b08b      	sub	sp, #44	; 0x2c
   d5c6a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c6c:	2100      	movs	r1, #0
   d5c6e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c72:	2a01      	cmp	r2, #1
   d5c74:	bf98      	it	ls
   d5c76:	220a      	movls	r2, #10
   d5c78:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5c7c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5c80:	fb05 3312 	mls	r3, r5, r2, r3
   d5c84:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c88:	2b09      	cmp	r3, #9
   d5c8a:	bf94      	ite	ls
   d5c8c:	3330      	addls	r3, #48	; 0x30
   d5c8e:	3337      	addhi	r3, #55	; 0x37
   d5c90:	b2db      	uxtb	r3, r3
   d5c92:	4621      	mov	r1, r4
   d5c94:	f804 3901 	strb.w	r3, [r4], #-1
   d5c98:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5c9a:	2d00      	cmp	r5, #0
   d5c9c:	d1ee      	bne.n	d5c7c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5c9e:	f7ff ffcf 	bl	d5c40 <_ZN5Print5writeEPKc>
}
   d5ca2:	b00b      	add	sp, #44	; 0x2c
   d5ca4:	bd30      	pop	{r4, r5, pc}

000d5ca6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5ca6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5ca8:	b92a      	cbnz	r2, d5cb6 <_ZN5Print5printEmi+0x10>
   d5caa:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5cb0:	689b      	ldr	r3, [r3, #8]
   d5cb2:	b2c9      	uxtb	r1, r1
   d5cb4:	4718      	bx	r3
  else return printNumber(n, base);
   d5cb6:	b2d2      	uxtb	r2, r2
}
   d5cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5cbc:	f7ff bfd3 	b.w	d5c66 <_ZN5Print11printNumberEmh>

000d5cc0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5cc0:	f7ff bff1 	b.w	d5ca6 <_ZN5Print5printEmi>

000d5cc4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cc8:	f7ff fa45 	bl	d5156 <_ZNSt14_Function_baseD1Ev>
   d5ccc:	4620      	mov	r0, r4
   d5cce:	bd10      	pop	{r4, pc}

000d5cd0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5cd0:	4803      	ldr	r0, [pc, #12]	; (d5ce0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5cd2:	4a04      	ldr	r2, [pc, #16]	; (d5ce4 <_GLOBAL__sub_I_RGB+0x14>)
   d5cd4:	4904      	ldr	r1, [pc, #16]	; (d5ce8 <_GLOBAL__sub_I_RGB+0x18>)
   d5cd6:	2300      	movs	r3, #0
   d5cd8:	6083      	str	r3, [r0, #8]
   d5cda:	f000 bbff 	b.w	d64dc <__aeabi_atexit>
   d5cde:	bf00      	nop
   d5ce0:	2003e554 	.word	0x2003e554
   d5ce4:	2003e340 	.word	0x2003e340
   d5ce8:	000d5cc5 	.word	0x000d5cc5

000d5cec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5cec:	4770      	bx	lr

000d5cee <_ZN8SPIClassD0Ev>:
   d5cee:	b510      	push	{r4, lr}
   d5cf0:	2110      	movs	r1, #16
   d5cf2:	4604      	mov	r4, r0
   d5cf4:	f000 fbf7 	bl	d64e6 <_ZdlPvj>
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	bd10      	pop	{r4, pc}

000d5cfc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5cfc:	b570      	push	{r4, r5, r6, lr}
   d5cfe:	4b08      	ldr	r3, [pc, #32]	; (d5d20 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5d00:	6003      	str	r3, [r0, #0]
   d5d02:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5d04:	2500      	movs	r5, #0
   d5d06:	460e      	mov	r6, r1
   d5d08:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5d0c:	f7fe ff94 	bl	d4c38 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5d10:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5d12:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5d14:	f7ff f878 	bl	d4e08 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5d18:	60a5      	str	r5, [r4, #8]
}
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	bd70      	pop	{r4, r5, r6, pc}
   d5d1e:	bf00      	nop
   d5d20:	000d768c 	.word	0x000d768c

000d5d24 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5d24:	7900      	ldrb	r0, [r0, #4]
   d5d26:	f7ff b877 	b.w	d4e18 <HAL_SPI_Is_Enabled>

000d5d2a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5d2a:	b510      	push	{r4, lr}
   d5d2c:	4604      	mov	r4, r0
{
	free(buffer);
   d5d2e:	6800      	ldr	r0, [r0, #0]
   d5d30:	f7ff f9b6 	bl	d50a0 <free>
}
   d5d34:	4620      	mov	r0, r4
   d5d36:	bd10      	pop	{r4, pc}

000d5d38 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5d38:	b510      	push	{r4, lr}
   d5d3a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5d3c:	6800      	ldr	r0, [r0, #0]
   d5d3e:	b108      	cbz	r0, d5d44 <_ZN6String10invalidateEv+0xc>
   d5d40:	f7ff f9ae 	bl	d50a0 <free>
	buffer = NULL;
   d5d44:	2300      	movs	r3, #0
   d5d46:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5d48:	60a3      	str	r3, [r4, #8]
   d5d4a:	6063      	str	r3, [r4, #4]
   d5d4c:	bd10      	pop	{r4, pc}

000d5d4e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5d4e:	b538      	push	{r3, r4, r5, lr}
   d5d50:	4604      	mov	r4, r0
   d5d52:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5d54:	6800      	ldr	r0, [r0, #0]
   d5d56:	3101      	adds	r1, #1
   d5d58:	f7ff f9aa 	bl	d50b0 <realloc>
	if (newbuffer) {
   d5d5c:	b110      	cbz	r0, d5d64 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5d5e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5d62:	2001      	movs	r0, #1
	}
	return 0;
}
   d5d64:	bd38      	pop	{r3, r4, r5, pc}

000d5d66 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d66:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5d68:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d6a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5d6c:	b113      	cbz	r3, d5d74 <_ZN6String7reserveEj+0xe>
   d5d6e:	6843      	ldr	r3, [r0, #4]
   d5d70:	428b      	cmp	r3, r1
   d5d72:	d207      	bcs.n	d5d84 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5d74:	4620      	mov	r0, r4
   d5d76:	f7ff ffea 	bl	d5d4e <_ZN6String12changeBufferEj>
   d5d7a:	b120      	cbz	r0, d5d86 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5d7c:	68a3      	ldr	r3, [r4, #8]
   d5d7e:	b90b      	cbnz	r3, d5d84 <_ZN6String7reserveEj+0x1e>
   d5d80:	6822      	ldr	r2, [r4, #0]
   d5d82:	7013      	strb	r3, [r2, #0]
   d5d84:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5d86:	bd10      	pop	{r4, pc}

000d5d88 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5d88:	b570      	push	{r4, r5, r6, lr}
   d5d8a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5d8c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5d8e:	4604      	mov	r4, r0
   d5d90:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5d92:	f7ff ffe8 	bl	d5d66 <_ZN6String7reserveEj>
   d5d96:	b918      	cbnz	r0, d5da0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5d98:	4620      	mov	r0, r4
   d5d9a:	f7ff ffcd 	bl	d5d38 <_ZN6String10invalidateEv>
		return *this;
   d5d9e:	e009      	b.n	d5db4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5da0:	462a      	mov	r2, r5
   d5da2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5da4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5da6:	6820      	ldr	r0, [r4, #0]
   d5da8:	f000 fe2c 	bl	d6a04 <memcpy>
	buffer[len] = 0;
   d5dac:	6822      	ldr	r2, [r4, #0]
   d5dae:	68a3      	ldr	r3, [r4, #8]
   d5db0:	2100      	movs	r1, #0
   d5db2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5db4:	4620      	mov	r0, r4
   d5db6:	bd70      	pop	{r4, r5, r6, pc}

000d5db8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5db8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5dba:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5dbc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5dbe:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5dc0:	6043      	str	r3, [r0, #4]
	len = 0;
   d5dc2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5dc4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5dc6:	460d      	mov	r5, r1
   d5dc8:	b139      	cbz	r1, d5dda <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5dca:	4608      	mov	r0, r1
   d5dcc:	f000 fe83 	bl	d6ad6 <strlen>
   d5dd0:	4629      	mov	r1, r5
   d5dd2:	4602      	mov	r2, r0
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	f7ff ffd7 	bl	d5d88 <_ZN6String4copyEPKcj>
}
   d5dda:	4620      	mov	r0, r4
   d5ddc:	bd38      	pop	{r3, r4, r5, pc}

000d5dde <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5dde:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5de0:	b510      	push	{r4, lr}
   d5de2:	460b      	mov	r3, r1
   d5de4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5de6:	d007      	beq.n	d5df8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5de8:	6809      	ldr	r1, [r1, #0]
   d5dea:	b119      	cbz	r1, d5df4 <_ZN6StringaSERKS_+0x16>
   d5dec:	689a      	ldr	r2, [r3, #8]
   d5dee:	f7ff ffcb 	bl	d5d88 <_ZN6String4copyEPKcj>
   d5df2:	e001      	b.n	d5df8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5df4:	f7ff ffa0 	bl	d5d38 <_ZN6String10invalidateEv>

	return *this;
}
   d5df8:	4620      	mov	r0, r4
   d5dfa:	bd10      	pop	{r4, pc}

000d5dfc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5dfc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5dfe:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e04:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e08:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5e0a:	f7ff ffe8 	bl	d5dde <_ZN6StringaSERKS_>
}
   d5e0e:	4620      	mov	r0, r4
   d5e10:	bd10      	pop	{r4, pc}

000d5e12 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5e12:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5e14:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5e16:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5e18:	b912      	cbnz	r2, d5e20 <_ZNK6String6equalsEPKc+0xe>
   d5e1a:	b919      	cbnz	r1, d5e24 <_ZNK6String6equalsEPKc+0x12>
   d5e1c:	2001      	movs	r0, #1
   d5e1e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5e20:	b911      	cbnz	r1, d5e28 <_ZNK6String6equalsEPKc+0x16>
   d5e22:	6803      	ldr	r3, [r0, #0]
   d5e24:	7818      	ldrb	r0, [r3, #0]
   d5e26:	e002      	b.n	d5e2e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5e28:	6800      	ldr	r0, [r0, #0]
   d5e2a:	f000 fe27 	bl	d6a7c <strcmp>
   d5e2e:	fab0 f080 	clz	r0, r0
   d5e32:	0940      	lsrs	r0, r0, #5
}
   d5e34:	bd08      	pop	{r3, pc}
	...

000d5e38 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5e38:	4b04      	ldr	r3, [pc, #16]	; (d5e4c <_GLOBAL__sub_I_System+0x14>)
   d5e3a:	2000      	movs	r0, #0
   d5e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e40:	7018      	strb	r0, [r3, #0]
   d5e42:	8058      	strh	r0, [r3, #2]
   d5e44:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5e46:	f7ff b867 	b.w	d4f18 <set_system_mode>
   d5e4a:	bf00      	nop
   d5e4c:	2003e564 	.word	0x2003e564

000d5e50 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d5e52:	4b14      	ldr	r3, [pc, #80]	; (d5ea4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5e54:	4f14      	ldr	r7, [pc, #80]	; (d5ea8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5e56:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5e58:	4b14      	ldr	r3, [pc, #80]	; (d5eac <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5e5a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5e5c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5e5e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5e60:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d5e62:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5e64:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5e66:	d01b      	beq.n	d5ea0 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5e68:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5e6a:	ad01      	add	r5, sp, #4
   d5e6c:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5e70:	f000 fcd0 	bl	d6814 <localtime>
	calendar_time->tm_year += 1900;
   d5e74:	6943      	ldr	r3, [r0, #20]
   d5e76:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5e7a:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5e7c:	4604      	mov	r4, r0
   d5e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5e86:	f8d4 e000 	ldr.w	lr, [r4]
   d5e8a:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5e8e:	ad01      	add	r5, sp, #4
   d5e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e92:	4c07      	ldr	r4, [pc, #28]	; (d5eb0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5e9a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5e9c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5ea0:	b00b      	add	sp, #44	; 0x2c
   d5ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5ea4:	2003e59c 	.word	0x2003e59c
   d5ea8:	2003e598 	.word	0x2003e598
   d5eac:	2003e594 	.word	0x2003e594
   d5eb0:	2003e56c 	.word	0x2003e56c

000d5eb4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5eb4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5eb6:	2000      	movs	r0, #0
   d5eb8:	f7ff f88a 	bl	d4fd0 <spark_sync_time_pending>
   d5ebc:	b128      	cbz	r0, d5eca <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ebe:	f7ff f877 	bl	d4fb0 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5ec2:	f080 0001 	eor.w	r0, r0, #1
   d5ec6:	b2c0      	uxtb	r0, r0
   d5ec8:	bd08      	pop	{r3, pc}
   d5eca:	2001      	movs	r0, #1
    }
   d5ecc:	bd08      	pop	{r3, pc}
	...

000d5ed0 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   d5ed0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5ed2:	f7ff ffbd 	bl	d5e50 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <_ZN9TimeClass5monthEl+0x10>)
   d5ed8:	6918      	ldr	r0, [r3, #16]
}
   d5eda:	3001      	adds	r0, #1
   d5edc:	bd08      	pop	{r3, pc}
   d5ede:	bf00      	nop
   d5ee0:	2003e56c 	.word	0x2003e56c

000d5ee4 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d5ee4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5ee8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5ef0:	d40f      	bmi.n	d5f12 <_ZN9TimeClass4zoneEf+0x2e>
   d5ef2:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d5ef6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5efe:	dc08      	bgt.n	d5f12 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5f00:	eddf 7a04 	vldr	s15, [pc, #16]	; d5f14 <_ZN9TimeClass4zoneEf+0x30>
   d5f04:	4b04      	ldr	r3, [pc, #16]	; (d5f18 <_ZN9TimeClass4zoneEf+0x34>)
   d5f06:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5f0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5f0e:	ed83 0a00 	vstr	s0, [r3]
   d5f12:	4770      	bx	lr
   d5f14:	45610000 	.word	0x45610000
   d5f18:	2003e59c 	.word	0x2003e59c

000d5f1c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d5f1e:	4b0e      	ldr	r3, [pc, #56]	; (d5f58 <_ZN9TimeClass7timeStrEl+0x3c>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	4419      	add	r1, r3
   d5f24:	4b0d      	ldr	r3, [pc, #52]	; (d5f5c <_ZN9TimeClass7timeStrEl+0x40>)
   d5f26:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5f28:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d5f2a:	a802      	add	r0, sp, #8
   d5f2c:	4419      	add	r1, r3
   d5f2e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d5f32:	f000 fc6f 	bl	d6814 <localtime>
        char* ascstr = asctime(calendar_time);
   d5f36:	f000 fc23 	bl	d6780 <asctime>
   d5f3a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d5f3c:	f000 fdcb 	bl	d6ad6 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d5f40:	4428      	add	r0, r5
   d5f42:	2300      	movs	r3, #0
   d5f44:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d5f48:	4629      	mov	r1, r5
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	f7ff ff34 	bl	d5db8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5f50:	4620      	mov	r0, r4
   d5f52:	b003      	add	sp, #12
   d5f54:	bd30      	pop	{r4, r5, pc}
   d5f56:	bf00      	nop
   d5f58:	2003e59c 	.word	0x2003e59c
   d5f5c:	2003e594 	.word	0x2003e594

000d5f60 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5f60:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5f62:	2000      	movs	r0, #0
   d5f64:	f7fe fea8 	bl	d4cb8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5f68:	4604      	mov	r4, r0
   d5f6a:	b968      	cbnz	r0, d5f88 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5f6c:	f7fe ffcc 	bl	d4f08 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5f70:	2801      	cmp	r0, #1
   d5f72:	d10b      	bne.n	d5f8c <_ZN9TimeClass7isValidEv+0x2c>
   d5f74:	4620      	mov	r0, r4
   d5f76:	f7fe ffe7 	bl	d4f48 <system_thread_get_state>
   d5f7a:	b938      	cbnz	r0, d5f8c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5f7c:	f7ff ff9a 	bl	d5eb4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5f80:	b930      	cbnz	r0, d5f90 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5f82:	f7ff f80d 	bl	d4fa0 <spark_process>
   d5f86:	e7f9      	b.n	d5f7c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5f88:	2001      	movs	r0, #1
   d5f8a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5f8c:	2000      	movs	r0, #0
   d5f8e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5f90:	f7ff ff90 	bl	d5eb4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5f94:	2000      	movs	r0, #0
   d5f96:	f7fe fe8f 	bl	d4cb8 <HAL_RTC_Time_Is_Valid>
   d5f9a:	3000      	adds	r0, #0
   d5f9c:	bf18      	it	ne
   d5f9e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5fa0:	bd10      	pop	{r4, pc}

000d5fa2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5fa2:	b508      	push	{r3, lr}
    (void)isValid();
   d5fa4:	f7ff ffdc 	bl	d5f60 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5fac:	f7fe be64 	b.w	d4c78 <HAL_RTC_Get_UnixTime>

000d5fb0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
   d5fb0:	b508      	push	{r3, lr}
	return hour(now());
   d5fb2:	f7ff fff6 	bl	d5fa2 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5fb6:	f7ff ff4b 	bl	d5e50 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
   d5fba:	4b01      	ldr	r3, [pc, #4]	; (d5fc0 <_ZN9TimeClass4hourEv+0x10>)
   d5fbc:	6898      	ldr	r0, [r3, #8]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	2003e56c 	.word	0x2003e56c

000d5fc4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d5fc4:	b508      	push	{r3, lr}
	return minute(now());
   d5fc6:	f7ff ffec 	bl	d5fa2 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5fca:	f7ff ff41 	bl	d5e50 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d5fce:	4b01      	ldr	r3, [pc, #4]	; (d5fd4 <_ZN9TimeClass6minuteEv+0x10>)
   d5fd0:	6858      	ldr	r0, [r3, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	2003e56c 	.word	0x2003e56c

000d5fd8 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
   d5fd8:	b508      	push	{r3, lr}
	return second(now());
   d5fda:	f7ff ffe2 	bl	d5fa2 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5fde:	f7ff ff37 	bl	d5e50 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
   d5fe2:	4b01      	ldr	r3, [pc, #4]	; (d5fe8 <_ZN9TimeClass6secondEv+0x10>)
   d5fe4:	6818      	ldr	r0, [r3, #0]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	2003e56c 	.word	0x2003e56c

000d5fec <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
   d5fec:	b508      	push	{r3, lr}
	return day(now());
   d5fee:	f7ff ffd8 	bl	d5fa2 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d5ff2:	f7ff ff2d 	bl	d5e50 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
   d5ff6:	4b01      	ldr	r3, [pc, #4]	; (d5ffc <_ZN9TimeClass3dayEv+0x10>)
   d5ff8:	68d8      	ldr	r0, [r3, #12]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	2003e56c 	.word	0x2003e56c

000d6000 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
   d6000:	b508      	push	{r3, lr}
	return month(now());
   d6002:	f7ff ffce 	bl	d5fa2 <_ZN9TimeClass3nowEv>
}
   d6006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
   d600a:	f7ff bf61 	b.w	d5ed0 <_ZN9TimeClass5monthEl>
	...

000d6010 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d6010:	b508      	push	{r3, lr}
	return year(now());
   d6012:	f7ff ffc6 	bl	d5fa2 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d6016:	f7ff ff1b 	bl	d5e50 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d601a:	4b01      	ldr	r3, [pc, #4]	; (d6020 <_ZN9TimeClass4yearEv+0x10>)
   d601c:	6958      	ldr	r0, [r3, #20]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	2003e56c 	.word	0x2003e56c

000d6024 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6024:	4b02      	ldr	r3, [pc, #8]	; (d6030 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6026:	681a      	ldr	r2, [r3, #0]
   d6028:	4b02      	ldr	r3, [pc, #8]	; (d6034 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d602a:	601a      	str	r2, [r3, #0]
   d602c:	4770      	bx	lr
   d602e:	bf00      	nop
   d6030:	2003e288 	.word	0x2003e288
   d6034:	2003e590 	.word	0x2003e590

000d6038 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6038:	4770      	bx	lr

000d603a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d603a:	7441      	strb	r1, [r0, #17]
   d603c:	4770      	bx	lr

000d603e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d603e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6040:	7c00      	ldrb	r0, [r0, #16]
   d6042:	f7fe ff29 	bl	d4e98 <HAL_USART_Available_Data_For_Write>
}
   d6046:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d604a:	bd08      	pop	{r3, pc}

000d604c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d604c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d604e:	7c00      	ldrb	r0, [r0, #16]
   d6050:	f7fe fefa 	bl	d4e48 <HAL_USART_Available_Data>
}
   d6054:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6058:	bd08      	pop	{r3, pc}

000d605a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d605a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d605c:	7c00      	ldrb	r0, [r0, #16]
   d605e:	f7fe ff03 	bl	d4e68 <HAL_USART_Peek_Data>
}
   d6062:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6066:	bf28      	it	cs
   d6068:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d606c:	bd08      	pop	{r3, pc}

000d606e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d606e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6070:	7c00      	ldrb	r0, [r0, #16]
   d6072:	f7fe fef1 	bl	d4e58 <HAL_USART_Read_Data>
}
   d6076:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d607a:	bf28      	it	cs
   d607c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6080:	bd08      	pop	{r3, pc}

000d6082 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6082:	7c00      	ldrb	r0, [r0, #16]
   d6084:	f7fe bef8 	b.w	d4e78 <HAL_USART_Flush_Data>

000d6088 <_ZN11USARTSerialD0Ev>:
   d6088:	b510      	push	{r4, lr}
   d608a:	2114      	movs	r1, #20
   d608c:	4604      	mov	r4, r0
   d608e:	f000 fa2a 	bl	d64e6 <_ZdlPvj>
   d6092:	4620      	mov	r0, r4
   d6094:	bd10      	pop	{r4, pc}

000d6096 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6096:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6098:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d609a:	4604      	mov	r4, r0
   d609c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d609e:	b925      	cbnz	r5, d60aa <_ZN11USARTSerial5writeEh+0x14>
   d60a0:	7c00      	ldrb	r0, [r0, #16]
   d60a2:	f7fe fef9 	bl	d4e98 <HAL_USART_Available_Data_For_Write>
   d60a6:	2800      	cmp	r0, #0
   d60a8:	dd05      	ble.n	d60b6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60aa:	4631      	mov	r1, r6
   d60ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d60ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60b2:	f7fe bec1 	b.w	d4e38 <HAL_USART_Write_Data>
  }
  return 0;
}
   d60b6:	4628      	mov	r0, r5
   d60b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d60bc:	b510      	push	{r4, lr}
   d60be:	4604      	mov	r4, r0
   d60c0:	4608      	mov	r0, r1
   d60c2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d60c4:	2200      	movs	r2, #0
   d60c6:	6062      	str	r2, [r4, #4]
   d60c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60cc:	60a2      	str	r2, [r4, #8]
   d60ce:	4a05      	ldr	r2, [pc, #20]	; (d60e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d60d0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d60d2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d60d4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d60d6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d60d8:	461a      	mov	r2, r3
   d60da:	f7fe fea5 	bl	d4e28 <HAL_USART_Init>
}
   d60de:	4620      	mov	r0, r4
   d60e0:	bd10      	pop	{r4, pc}
   d60e2:	bf00      	nop
   d60e4:	000d76c4 	.word	0x000d76c4

000d60e8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7fe becd 	b.w	d4e88 <HAL_USART_Is_Enabled>
	...

000d60f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d60f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d60f2:	4d0c      	ldr	r5, [pc, #48]	; (d6124 <_Z22__fetch_global_Serial1v+0x34>)
   d60f4:	6829      	ldr	r1, [r5, #0]
   d60f6:	f011 0401 	ands.w	r4, r1, #1
   d60fa:	d111      	bne.n	d6120 <_Z22__fetch_global_Serial1v+0x30>
   d60fc:	4628      	mov	r0, r5
   d60fe:	f7fd ffd0 	bl	d40a2 <__cxa_guard_acquire>
   d6102:	b168      	cbz	r0, d6120 <_Z22__fetch_global_Serial1v+0x30>
   d6104:	4a08      	ldr	r2, [pc, #32]	; (d6128 <_Z22__fetch_global_Serial1v+0x38>)
   d6106:	4b09      	ldr	r3, [pc, #36]	; (d612c <_Z22__fetch_global_Serial1v+0x3c>)
   d6108:	4809      	ldr	r0, [pc, #36]	; (d6130 <_Z22__fetch_global_Serial1v+0x40>)
   d610a:	4621      	mov	r1, r4
   d610c:	f7ff ffd6 	bl	d60bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6110:	4628      	mov	r0, r5
   d6112:	f7fd ffcb 	bl	d40ac <__cxa_guard_release>
   d6116:	4a07      	ldr	r2, [pc, #28]	; (d6134 <_Z22__fetch_global_Serial1v+0x44>)
   d6118:	4907      	ldr	r1, [pc, #28]	; (d6138 <_Z22__fetch_global_Serial1v+0x48>)
   d611a:	4805      	ldr	r0, [pc, #20]	; (d6130 <_Z22__fetch_global_Serial1v+0x40>)
   d611c:	f000 f9de 	bl	d64dc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6120:	4803      	ldr	r0, [pc, #12]	; (d6130 <_Z22__fetch_global_Serial1v+0x40>)
   d6122:	bd38      	pop	{r3, r4, r5, pc}
   d6124:	2003e638 	.word	0x2003e638
   d6128:	2003e63c 	.word	0x2003e63c
   d612c:	2003e5b4 	.word	0x2003e5b4
   d6130:	2003e5a0 	.word	0x2003e5a0
   d6134:	2003e340 	.word	0x2003e340
   d6138:	000d6039 	.word	0x000d6039

000d613c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d613c:	7441      	strb	r1, [r0, #17]
   d613e:	4770      	bx	lr

000d6140 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6140:	4770      	bx	lr

000d6142 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6142:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6144:	2100      	movs	r1, #0
   d6146:	7c00      	ldrb	r0, [r0, #16]
   d6148:	f7fe fec6 	bl	d4ed8 <HAL_USB_USART_Receive_Data>
}
   d614c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6150:	bf28      	it	cs
   d6152:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6156:	bd08      	pop	{r3, pc}

000d6158 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6158:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d615a:	2101      	movs	r1, #1
   d615c:	7c00      	ldrb	r0, [r0, #16]
   d615e:	f7fe febb 	bl	d4ed8 <HAL_USB_USART_Receive_Data>
}
   d6162:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6166:	bf28      	it	cs
   d6168:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d616c:	bd08      	pop	{r3, pc}

000d616e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d616e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6170:	7c00      	ldrb	r0, [r0, #16]
   d6172:	f7fe fea9 	bl	d4ec8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6176:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d617a:	bd08      	pop	{r3, pc}

000d617c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d617c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d617e:	7c00      	ldrb	r0, [r0, #16]
   d6180:	f7fe fe9a 	bl	d4eb8 <HAL_USB_USART_Available_Data>
}
   d6184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6188:	bd08      	pop	{r3, pc}

000d618a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d618a:	7c00      	ldrb	r0, [r0, #16]
   d618c:	f7fe beb4 	b.w	d4ef8 <HAL_USB_USART_Flush_Data>

000d6190 <_ZN9USBSerialD0Ev>:
   d6190:	b510      	push	{r4, lr}
   d6192:	2114      	movs	r1, #20
   d6194:	4604      	mov	r4, r0
   d6196:	f000 f9a6 	bl	d64e6 <_ZdlPvj>
   d619a:	4620      	mov	r0, r4
   d619c:	bd10      	pop	{r4, pc}

000d619e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d619e:	b538      	push	{r3, r4, r5, lr}
   d61a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61a2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d61a4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61a6:	f7fe fe8f 	bl	d4ec8 <HAL_USB_USART_Available_Data_For_Write>
   d61aa:	2800      	cmp	r0, #0
   d61ac:	dc01      	bgt.n	d61b2 <_ZN9USBSerial5writeEh+0x14>
   d61ae:	7c60      	ldrb	r0, [r4, #17]
   d61b0:	b128      	cbz	r0, d61be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d61b2:	4629      	mov	r1, r5
   d61b4:	7c20      	ldrb	r0, [r4, #16]
   d61b6:	f7fe fe97 	bl	d4ee8 <HAL_USB_USART_Send_Data>
   d61ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d61be:	bd38      	pop	{r3, r4, r5, pc}

000d61c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d61c0:	b510      	push	{r4, lr}
   d61c2:	4604      	mov	r4, r0
   d61c4:	2300      	movs	r3, #0
   d61c6:	6063      	str	r3, [r4, #4]
   d61c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61cc:	60a3      	str	r3, [r4, #8]
   d61ce:	4b05      	ldr	r3, [pc, #20]	; (d61e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d61d0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d61d2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d61d4:	4608      	mov	r0, r1
{
  _serial = serial;
   d61d6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d61d8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d61da:	4611      	mov	r1, r2
   d61dc:	f7fe fe64 	bl	d4ea8 <HAL_USB_USART_Init>
}
   d61e0:	4620      	mov	r0, r4
   d61e2:	bd10      	pop	{r4, pc}
   d61e4:	000d76f4 	.word	0x000d76f4

000d61e8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d61e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d61ea:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d61ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d61ee:	2100      	movs	r1, #0
   d61f0:	f000 fc13 	bl	d6a1a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d61f4:	4620      	mov	r0, r4
   d61f6:	bd10      	pop	{r4, pc}

000d61f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d61f8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d61fa:	4d0e      	ldr	r5, [pc, #56]	; (d6234 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d61fc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d61fe:	a801      	add	r0, sp, #4
   d6200:	f7ff fff2 	bl	d61e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6204:	6829      	ldr	r1, [r5, #0]
   d6206:	f011 0401 	ands.w	r4, r1, #1
   d620a:	d110      	bne.n	d622e <_Z16_fetch_usbserialv+0x36>
   d620c:	4628      	mov	r0, r5
   d620e:	f7fd ff48 	bl	d40a2 <__cxa_guard_acquire>
   d6212:	b160      	cbz	r0, d622e <_Z16_fetch_usbserialv+0x36>
   d6214:	aa01      	add	r2, sp, #4
   d6216:	4621      	mov	r1, r4
   d6218:	4807      	ldr	r0, [pc, #28]	; (d6238 <_Z16_fetch_usbserialv+0x40>)
   d621a:	f7ff ffd1 	bl	d61c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d621e:	4628      	mov	r0, r5
   d6220:	f7fd ff44 	bl	d40ac <__cxa_guard_release>
   d6224:	4a05      	ldr	r2, [pc, #20]	; (d623c <_Z16_fetch_usbserialv+0x44>)
   d6226:	4906      	ldr	r1, [pc, #24]	; (d6240 <_Z16_fetch_usbserialv+0x48>)
   d6228:	4803      	ldr	r0, [pc, #12]	; (d6238 <_Z16_fetch_usbserialv+0x40>)
   d622a:	f000 f957 	bl	d64dc <__aeabi_atexit>
	return _usbserial;
}
   d622e:	4802      	ldr	r0, [pc, #8]	; (d6238 <_Z16_fetch_usbserialv+0x40>)
   d6230:	b007      	add	sp, #28
   d6232:	bd30      	pop	{r4, r5, pc}
   d6234:	2003e6c0 	.word	0x2003e6c0
   d6238:	2003e6c4 	.word	0x2003e6c4
   d623c:	2003e340 	.word	0x2003e340
   d6240:	000d6141 	.word	0x000d6141

000d6244 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6244:	2200      	movs	r2, #0
   d6246:	4611      	mov	r1, r2
   d6248:	6840      	ldr	r0, [r0, #4]
   d624a:	f7fe bee9 	b.w	d5020 <network_ready>

000d624e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d624e:	2200      	movs	r2, #0
   d6250:	4611      	mov	r1, r2
   d6252:	6840      	ldr	r0, [r0, #4]
   d6254:	f7fe bf04 	b.w	d5060 <network_listening>

000d6258 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6258:	2200      	movs	r2, #0
   d625a:	4611      	mov	r1, r2
   d625c:	6840      	ldr	r0, [r0, #4]
   d625e:	f7fe bf0f 	b.w	d5080 <network_get_listen_timeout>

000d6262 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6262:	2200      	movs	r2, #0
   d6264:	6840      	ldr	r0, [r0, #4]
   d6266:	f7fe bf03 	b.w	d5070 <network_set_listen_timeout>

000d626a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d626a:	2200      	movs	r2, #0
   d626c:	f081 0101 	eor.w	r1, r1, #1
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	f7fe beed 	b.w	d5050 <network_listen>

000d6276 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6276:	2300      	movs	r3, #0
   d6278:	461a      	mov	r2, r3
   d627a:	4619      	mov	r1, r3
   d627c:	6840      	ldr	r0, [r0, #4]
   d627e:	f7fe bedf 	b.w	d5040 <network_off>

000d6282 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6282:	2300      	movs	r3, #0
   d6284:	461a      	mov	r2, r3
   d6286:	4619      	mov	r1, r3
   d6288:	6840      	ldr	r0, [r0, #4]
   d628a:	f7fe bed1 	b.w	d5030 <network_on>

000d628e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d628e:	2200      	movs	r2, #0
   d6290:	4611      	mov	r1, r2
   d6292:	6840      	ldr	r0, [r0, #4]
   d6294:	f7fe beb4 	b.w	d5000 <network_connecting>

000d6298 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6298:	2200      	movs	r2, #0
   d629a:	2102      	movs	r1, #2
   d629c:	6840      	ldr	r0, [r0, #4]
   d629e:	f7fe beb7 	b.w	d5010 <network_disconnect>

000d62a2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d62a2:	2300      	movs	r3, #0
   d62a4:	461a      	mov	r2, r3
   d62a6:	6840      	ldr	r0, [r0, #4]
   d62a8:	f7fe bea2 	b.w	d4ff0 <network_connect>

000d62ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d62ac:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d62ae:	2204      	movs	r2, #4
   d62b0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d62b2:	4a02      	ldr	r2, [pc, #8]	; (d62bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d62b4:	601a      	str	r2, [r3, #0]
   d62b6:	4770      	bx	lr
   d62b8:	2003e6d8 	.word	0x2003e6d8
   d62bc:	000d7724 	.word	0x000d7724

000d62c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d62c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d62c2:	4b0c      	ldr	r3, [pc, #48]	; (d62f4 <serialEventRun+0x34>)
   d62c4:	b133      	cbz	r3, d62d4 <serialEventRun+0x14>
   d62c6:	f7ff ff97 	bl	d61f8 <_Z16_fetch_usbserialv>
   d62ca:	6803      	ldr	r3, [r0, #0]
   d62cc:	691b      	ldr	r3, [r3, #16]
   d62ce:	4798      	blx	r3
   d62d0:	2800      	cmp	r0, #0
   d62d2:	dc09      	bgt.n	d62e8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d62d4:	4b08      	ldr	r3, [pc, #32]	; (d62f8 <serialEventRun+0x38>)
   d62d6:	b163      	cbz	r3, d62f2 <serialEventRun+0x32>
   d62d8:	f7ff ff0a 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d62dc:	6803      	ldr	r3, [r0, #0]
   d62de:	691b      	ldr	r3, [r3, #16]
   d62e0:	4798      	blx	r3
   d62e2:	2800      	cmp	r0, #0
   d62e4:	dc03      	bgt.n	d62ee <serialEventRun+0x2e>
   d62e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d62e8:	f3af 8000 	nop.w
   d62ec:	e7f2      	b.n	d62d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d62ee:	f3af 8000 	nop.w
   d62f2:	bd08      	pop	{r3, pc}
	...

000d62fc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d62fc:	b508      	push	{r3, lr}
	serialEventRun();
   d62fe:	f7ff ffdf 	bl	d62c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6302:	f7fe fcb1 	bl	d4c68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6306:	4b01      	ldr	r3, [pc, #4]	; (d630c <_post_loop+0x10>)
   d6308:	6018      	str	r0, [r3, #0]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	2003e6e4 	.word	0x2003e6e4

000d6310 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6310:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6312:	2300      	movs	r3, #0
   d6314:	9300      	str	r3, [sp, #0]
   d6316:	461a      	mov	r2, r3
   d6318:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d631c:	f7fe fe26 	bl	d4f6c <system_ctrl_set_result>
}
   d6320:	b003      	add	sp, #12
   d6322:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6328 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6328:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d632a:	8843      	ldrh	r3, [r0, #2]
   d632c:	2b0a      	cmp	r3, #10
   d632e:	d008      	beq.n	d6342 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6330:	2b50      	cmp	r3, #80	; 0x50
   d6332:	d109      	bne.n	d6348 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6334:	4b09      	ldr	r3, [pc, #36]	; (d635c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6336:	681b      	ldr	r3, [r3, #0]
   d6338:	b13b      	cbz	r3, d634a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d633a:	b003      	add	sp, #12
   d633c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6340:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6342:	f7ff ffe5 	bl	d6310 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6346:	e006      	b.n	d6356 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6348:	2300      	movs	r3, #0
   d634a:	9300      	str	r3, [sp, #0]
   d634c:	461a      	mov	r2, r3
   d634e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6352:	f7fe fe0b 	bl	d4f6c <system_ctrl_set_result>
        break;
    }
}
   d6356:	b003      	add	sp, #12
   d6358:	f85d fb04 	ldr.w	pc, [sp], #4
   d635c:	2003e6e0 	.word	0x2003e6e0

000d6360 <module_user_init_hook>:

void module_user_init_hook()
{
   d6360:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6362:	f7fe fc79 	bl	d4c58 <HAL_RNG_GetRandomNumber>
   d6366:	4604      	mov	r4, r0
    srand(seed);
   d6368:	f000 fb60 	bl	d6a2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d636c:	4b07      	ldr	r3, [pc, #28]	; (d638c <module_user_init_hook+0x2c>)
   d636e:	b113      	cbz	r3, d6376 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6370:	4620      	mov	r0, r4
   d6372:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6376:	2100      	movs	r1, #0
   d6378:	4804      	ldr	r0, [pc, #16]	; (d638c <module_user_init_hook+0x2c>)
   d637a:	f7fe fe31 	bl	d4fe0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d637e:	2100      	movs	r1, #0
   d6380:	4803      	ldr	r0, [pc, #12]	; (d6390 <module_user_init_hook+0x30>)
}
   d6382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6386:	f7fe bde7 	b.w	d4f58 <system_ctrl_set_app_request_handler>
   d638a:	bf00      	nop
   d638c:	00000000 	.word	0x00000000
   d6390:	000d6329 	.word	0x000d6329

000d6394 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6394:	b510      	push	{r4, lr}
   d6396:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6398:	480f      	ldr	r0, [pc, #60]	; (d63d8 <pinAvailable+0x44>)
   d639a:	f7ff fcc3 	bl	d5d24 <_ZN8SPIClass9isEnabledEv>
   d639e:	b128      	cbz	r0, d63ac <pinAvailable+0x18>
   d63a0:	f1a4 030b 	sub.w	r3, r4, #11
   d63a4:	2b02      	cmp	r3, #2
   d63a6:	d801      	bhi.n	d63ac <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d63a8:	2000      	movs	r0, #0
   d63aa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d63ac:	f000 f854 	bl	d6458 <_Z19__fetch_global_Wirev>
   d63b0:	f7ff fa36 	bl	d5820 <_ZN7TwoWire9isEnabledEv>
   d63b4:	b108      	cbz	r0, d63ba <pinAvailable+0x26>
   d63b6:	2c01      	cmp	r4, #1
   d63b8:	d9f6      	bls.n	d63a8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d63ba:	f7ff fe99 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d63be:	f7ff fe93 	bl	d60e8 <_ZN11USARTSerial9isEnabledEv>
   d63c2:	b118      	cbz	r0, d63cc <pinAvailable+0x38>
   d63c4:	f1a4 0309 	sub.w	r3, r4, #9
   d63c8:	2b01      	cmp	r3, #1
   d63ca:	d9ed      	bls.n	d63a8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d63cc:	2c23      	cmp	r4, #35	; 0x23
   d63ce:	bf8c      	ite	hi
   d63d0:	2000      	movhi	r0, #0
   d63d2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d63d4:	bd10      	pop	{r4, pc}
   d63d6:	bf00      	nop
   d63d8:	2003e708 	.word	0x2003e708

000d63dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63dc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d63de:	b538      	push	{r3, r4, r5, lr}
   d63e0:	4604      	mov	r4, r0
   d63e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d63e4:	d80a      	bhi.n	d63fc <pinMode+0x20>
   d63e6:	29ff      	cmp	r1, #255	; 0xff
   d63e8:	d008      	beq.n	d63fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d63ea:	f7ff ffd3 	bl	d6394 <pinAvailable>
   d63ee:	b128      	cbz	r0, d63fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d63f0:	4629      	mov	r1, r5
   d63f2:	4620      	mov	r0, r4
}
   d63f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d63f8:	f7fe bc6e 	b.w	d4cd8 <HAL_Pin_Mode>
   d63fc:	bd38      	pop	{r3, r4, r5, pc}

000d63fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d63fe:	b538      	push	{r3, r4, r5, lr}
   d6400:	4604      	mov	r4, r0
   d6402:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6404:	f7fe fc70 	bl	d4ce8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6408:	28ff      	cmp	r0, #255	; 0xff
   d640a:	d010      	beq.n	d642e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d640c:	2806      	cmp	r0, #6
   d640e:	d804      	bhi.n	d641a <digitalWrite+0x1c>
   d6410:	234d      	movs	r3, #77	; 0x4d
   d6412:	fa23 f000 	lsr.w	r0, r3, r0
   d6416:	07c3      	lsls	r3, r0, #31
   d6418:	d409      	bmi.n	d642e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d641a:	4620      	mov	r0, r4
   d641c:	f7ff ffba 	bl	d6394 <pinAvailable>
   d6420:	b128      	cbz	r0, d642e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6422:	4629      	mov	r1, r5
   d6424:	4620      	mov	r0, r4
}
   d6426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d642a:	f7fe bc65 	b.w	d4cf8 <HAL_GPIO_Write>
   d642e:	bd38      	pop	{r3, r4, r5, pc}

000d6430 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6430:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6432:	4c07      	ldr	r4, [pc, #28]	; (d6450 <_Z21__fetch_global_EEPROMv+0x20>)
   d6434:	6823      	ldr	r3, [r4, #0]
   d6436:	07db      	lsls	r3, r3, #31
   d6438:	d408      	bmi.n	d644c <_Z21__fetch_global_EEPROMv+0x1c>
   d643a:	4620      	mov	r0, r4
   d643c:	f7fd fe31 	bl	d40a2 <__cxa_guard_acquire>
   d6440:	b120      	cbz	r0, d644c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6442:	f7fe fc21 	bl	d4c88 <HAL_EEPROM_Init>
   d6446:	4620      	mov	r0, r4
   d6448:	f7fd fe30 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d644c:	4801      	ldr	r0, [pc, #4]	; (d6454 <_Z21__fetch_global_EEPROMv+0x24>)
   d644e:	bd10      	pop	{r4, pc}
   d6450:	2003e6e8 	.word	0x2003e6e8
   d6454:	2003e6ec 	.word	0x2003e6ec

000d6458 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6458:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d645a:	4d0b      	ldr	r5, [pc, #44]	; (d6488 <_Z19__fetch_global_Wirev+0x30>)
   d645c:	6829      	ldr	r1, [r5, #0]
   d645e:	f011 0401 	ands.w	r4, r1, #1
   d6462:	d10f      	bne.n	d6484 <_Z19__fetch_global_Wirev+0x2c>
   d6464:	4628      	mov	r0, r5
   d6466:	f7fd fe1c 	bl	d40a2 <__cxa_guard_acquire>
   d646a:	b158      	cbz	r0, d6484 <_Z19__fetch_global_Wirev+0x2c>
   d646c:	4621      	mov	r1, r4
   d646e:	4807      	ldr	r0, [pc, #28]	; (d648c <_Z19__fetch_global_Wirev+0x34>)
   d6470:	f7ff f9a2 	bl	d57b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6474:	4628      	mov	r0, r5
   d6476:	f7fd fe19 	bl	d40ac <__cxa_guard_release>
   d647a:	4a05      	ldr	r2, [pc, #20]	; (d6490 <_Z19__fetch_global_Wirev+0x38>)
   d647c:	4905      	ldr	r1, [pc, #20]	; (d6494 <_Z19__fetch_global_Wirev+0x3c>)
   d647e:	4803      	ldr	r0, [pc, #12]	; (d648c <_Z19__fetch_global_Wirev+0x34>)
   d6480:	f000 f82c 	bl	d64dc <__aeabi_atexit>
	return wire;
}
   d6484:	4801      	ldr	r0, [pc, #4]	; (d648c <_Z19__fetch_global_Wirev+0x34>)
   d6486:	bd38      	pop	{r3, r4, r5, pc}
   d6488:	2003e6f0 	.word	0x2003e6f0
   d648c:	2003e6f4 	.word	0x2003e6f4
   d6490:	2003e340 	.word	0x2003e340
   d6494:	000d5761 	.word	0x000d5761

000d6498 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6498:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d649a:	4c0c      	ldr	r4, [pc, #48]	; (d64cc <_GLOBAL__sub_I_SPI+0x34>)
   d649c:	4e0c      	ldr	r6, [pc, #48]	; (d64d0 <_GLOBAL__sub_I_SPI+0x38>)
   d649e:	4d0d      	ldr	r5, [pc, #52]	; (d64d4 <_GLOBAL__sub_I_SPI+0x3c>)
   d64a0:	2100      	movs	r1, #0
   d64a2:	4620      	mov	r0, r4
   d64a4:	f7ff fc2a 	bl	d5cfc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d64a8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d64aa:	4c0b      	ldr	r4, [pc, #44]	; (d64d8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d64ac:	4632      	mov	r2, r6
   d64ae:	4629      	mov	r1, r5
   d64b0:	f000 f814 	bl	d64dc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d64b4:	2101      	movs	r1, #1
   d64b6:	4620      	mov	r0, r4
   d64b8:	f7ff fc20 	bl	d5cfc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d64bc:	4632      	mov	r2, r6
   d64be:	4629      	mov	r1, r5
   d64c0:	4620      	mov	r0, r4
   d64c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d64c6:	f000 b809 	b.w	d64dc <__aeabi_atexit>
   d64ca:	bf00      	nop
   d64cc:	2003e708 	.word	0x2003e708
   d64d0:	2003e340 	.word	0x2003e340
   d64d4:	000d5ced 	.word	0x000d5ced
   d64d8:	2003e718 	.word	0x2003e718

000d64dc <__aeabi_atexit>:
   d64dc:	460b      	mov	r3, r1
   d64de:	4601      	mov	r1, r0
   d64e0:	4618      	mov	r0, r3
   d64e2:	f000 b989 	b.w	d67f8 <__cxa_atexit>

000d64e6 <_ZdlPvj>:
   d64e6:	f7fd bdd8 	b.w	d409a <_ZdlPv>

000d64ea <_ZSt25__throw_bad_function_callv>:
   d64ea:	b508      	push	{r3, lr}
   d64ec:	f7fe fe00 	bl	d50f0 <abort>

000d64f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d64f0:	4b24      	ldr	r3, [pc, #144]	; (d6584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d0      	lsls	r0, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b22      	ldr	r3, [pc, #136]	; (d6588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d1      	lsls	r1, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b20      	ldr	r3, [pc, #128]	; (d658c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d2      	lsls	r2, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b1e      	ldr	r3, [pc, #120]	; (d6590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d0      	lsls	r0, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4b1c      	ldr	r3, [pc, #112]	; (d6594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d1      	lsls	r1, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b1a      	ldr	r3, [pc, #104]	; (d6598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d2      	lsls	r2, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4b18      	ldr	r3, [pc, #96]	; (d659c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d653a:	681a      	ldr	r2, [r3, #0]
   d653c:	07d0      	lsls	r0, r2, #31
   d653e:	bf5c      	itt	pl
   d6540:	2201      	movpl	r2, #1
   d6542:	601a      	strpl	r2, [r3, #0]
   d6544:	4b16      	ldr	r3, [pc, #88]	; (d65a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6546:	681a      	ldr	r2, [r3, #0]
   d6548:	07d1      	lsls	r1, r2, #31
   d654a:	bf5c      	itt	pl
   d654c:	2201      	movpl	r2, #1
   d654e:	601a      	strpl	r2, [r3, #0]
   d6550:	4b14      	ldr	r3, [pc, #80]	; (d65a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6552:	681a      	ldr	r2, [r3, #0]
   d6554:	07d2      	lsls	r2, r2, #31
   d6556:	bf5c      	itt	pl
   d6558:	2201      	movpl	r2, #1
   d655a:	601a      	strpl	r2, [r3, #0]
   d655c:	4b12      	ldr	r3, [pc, #72]	; (d65a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	07d0      	lsls	r0, r2, #31
   d6562:	bf5c      	itt	pl
   d6564:	2201      	movpl	r2, #1
   d6566:	601a      	strpl	r2, [r3, #0]
   d6568:	4b10      	ldr	r3, [pc, #64]	; (d65ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d656a:	681a      	ldr	r2, [r3, #0]
   d656c:	07d1      	lsls	r1, r2, #31
   d656e:	bf5c      	itt	pl
   d6570:	2201      	movpl	r2, #1
   d6572:	601a      	strpl	r2, [r3, #0]
   d6574:	4b0e      	ldr	r3, [pc, #56]	; (d65b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d2      	lsls	r2, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4770      	bx	lr
   d6582:	bf00      	nop
   d6584:	2003e754 	.word	0x2003e754
   d6588:	2003e750 	.word	0x2003e750
   d658c:	2003e74c 	.word	0x2003e74c
   d6590:	2003e748 	.word	0x2003e748
   d6594:	2003e744 	.word	0x2003e744
   d6598:	2003e740 	.word	0x2003e740
   d659c:	2003e73c 	.word	0x2003e73c
   d65a0:	2003e738 	.word	0x2003e738
   d65a4:	2003e734 	.word	0x2003e734
   d65a8:	2003e730 	.word	0x2003e730
   d65ac:	2003e72c 	.word	0x2003e72c
   d65b0:	2003e728 	.word	0x2003e728

000d65b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d65b4:	4b18      	ldr	r3, [pc, #96]	; (d6618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d1      	lsls	r1, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b16      	ldr	r3, [pc, #88]	; (d661c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d2      	lsls	r2, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4b14      	ldr	r3, [pc, #80]	; (d6620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d65ce:	681a      	ldr	r2, [r3, #0]
   d65d0:	07d0      	lsls	r0, r2, #31
   d65d2:	bf5c      	itt	pl
   d65d4:	2201      	movpl	r2, #1
   d65d6:	601a      	strpl	r2, [r3, #0]
   d65d8:	4b12      	ldr	r3, [pc, #72]	; (d6624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d65da:	681a      	ldr	r2, [r3, #0]
   d65dc:	07d1      	lsls	r1, r2, #31
   d65de:	bf5c      	itt	pl
   d65e0:	2201      	movpl	r2, #1
   d65e2:	601a      	strpl	r2, [r3, #0]
   d65e4:	4b10      	ldr	r3, [pc, #64]	; (d6628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d65e6:	681a      	ldr	r2, [r3, #0]
   d65e8:	07d2      	lsls	r2, r2, #31
   d65ea:	bf5c      	itt	pl
   d65ec:	2201      	movpl	r2, #1
   d65ee:	601a      	strpl	r2, [r3, #0]
   d65f0:	4b0e      	ldr	r3, [pc, #56]	; (d662c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d65f2:	681a      	ldr	r2, [r3, #0]
   d65f4:	07d0      	lsls	r0, r2, #31
   d65f6:	bf5c      	itt	pl
   d65f8:	2201      	movpl	r2, #1
   d65fa:	601a      	strpl	r2, [r3, #0]
   d65fc:	4b0c      	ldr	r3, [pc, #48]	; (d6630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	07d1      	lsls	r1, r2, #31
   d6602:	bf5c      	itt	pl
   d6604:	2201      	movpl	r2, #1
   d6606:	601a      	strpl	r2, [r3, #0]
   d6608:	4b0a      	ldr	r3, [pc, #40]	; (d6634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d2      	lsls	r2, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4770      	bx	lr
   d6616:	bf00      	nop
   d6618:	2003e774 	.word	0x2003e774
   d661c:	2003e770 	.word	0x2003e770
   d6620:	2003e76c 	.word	0x2003e76c
   d6624:	2003e768 	.word	0x2003e768
   d6628:	2003e764 	.word	0x2003e764
   d662c:	2003e760 	.word	0x2003e760
   d6630:	2003e75c 	.word	0x2003e75c
   d6634:	2003e758 	.word	0x2003e758

000d6638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6638:	4b18      	ldr	r3, [pc, #96]	; (d669c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d663a:	681a      	ldr	r2, [r3, #0]
   d663c:	07d1      	lsls	r1, r2, #31
   d663e:	bf5c      	itt	pl
   d6640:	2201      	movpl	r2, #1
   d6642:	601a      	strpl	r2, [r3, #0]
   d6644:	4b16      	ldr	r3, [pc, #88]	; (d66a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6646:	681a      	ldr	r2, [r3, #0]
   d6648:	07d2      	lsls	r2, r2, #31
   d664a:	bf5c      	itt	pl
   d664c:	2201      	movpl	r2, #1
   d664e:	601a      	strpl	r2, [r3, #0]
   d6650:	4b14      	ldr	r3, [pc, #80]	; (d66a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6652:	681a      	ldr	r2, [r3, #0]
   d6654:	07d0      	lsls	r0, r2, #31
   d6656:	bf5c      	itt	pl
   d6658:	2201      	movpl	r2, #1
   d665a:	601a      	strpl	r2, [r3, #0]
   d665c:	4b12      	ldr	r3, [pc, #72]	; (d66a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d665e:	681a      	ldr	r2, [r3, #0]
   d6660:	07d1      	lsls	r1, r2, #31
   d6662:	bf5c      	itt	pl
   d6664:	2201      	movpl	r2, #1
   d6666:	601a      	strpl	r2, [r3, #0]
   d6668:	4b10      	ldr	r3, [pc, #64]	; (d66ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d666a:	681a      	ldr	r2, [r3, #0]
   d666c:	07d2      	lsls	r2, r2, #31
   d666e:	bf5c      	itt	pl
   d6670:	2201      	movpl	r2, #1
   d6672:	601a      	strpl	r2, [r3, #0]
   d6674:	4b0e      	ldr	r3, [pc, #56]	; (d66b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6676:	681a      	ldr	r2, [r3, #0]
   d6678:	07d0      	lsls	r0, r2, #31
   d667a:	bf5c      	itt	pl
   d667c:	2201      	movpl	r2, #1
   d667e:	601a      	strpl	r2, [r3, #0]
   d6680:	4b0c      	ldr	r3, [pc, #48]	; (d66b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6682:	681a      	ldr	r2, [r3, #0]
   d6684:	07d1      	lsls	r1, r2, #31
   d6686:	bf5c      	itt	pl
   d6688:	2201      	movpl	r2, #1
   d668a:	601a      	strpl	r2, [r3, #0]
   d668c:	4b0a      	ldr	r3, [pc, #40]	; (d66b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d668e:	681a      	ldr	r2, [r3, #0]
   d6690:	07d2      	lsls	r2, r2, #31
   d6692:	bf5c      	itt	pl
   d6694:	2201      	movpl	r2, #1
   d6696:	601a      	strpl	r2, [r3, #0]
   d6698:	4770      	bx	lr
   d669a:	bf00      	nop
   d669c:	2003e794 	.word	0x2003e794
   d66a0:	2003e790 	.word	0x2003e790
   d66a4:	2003e78c 	.word	0x2003e78c
   d66a8:	2003e788 	.word	0x2003e788
   d66ac:	2003e784 	.word	0x2003e784
   d66b0:	2003e780 	.word	0x2003e780
   d66b4:	2003e77c 	.word	0x2003e77c
   d66b8:	2003e778 	.word	0x2003e778

000d66bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d66bc:	4b24      	ldr	r3, [pc, #144]	; (d6750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d66be:	681a      	ldr	r2, [r3, #0]
   d66c0:	07d0      	lsls	r0, r2, #31
   d66c2:	bf5c      	itt	pl
   d66c4:	2201      	movpl	r2, #1
   d66c6:	601a      	strpl	r2, [r3, #0]
   d66c8:	4b22      	ldr	r3, [pc, #136]	; (d6754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d66ca:	681a      	ldr	r2, [r3, #0]
   d66cc:	07d1      	lsls	r1, r2, #31
   d66ce:	bf5c      	itt	pl
   d66d0:	2201      	movpl	r2, #1
   d66d2:	601a      	strpl	r2, [r3, #0]
   d66d4:	4b20      	ldr	r3, [pc, #128]	; (d6758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d66d6:	681a      	ldr	r2, [r3, #0]
   d66d8:	07d2      	lsls	r2, r2, #31
   d66da:	bf5c      	itt	pl
   d66dc:	2201      	movpl	r2, #1
   d66de:	601a      	strpl	r2, [r3, #0]
   d66e0:	4b1e      	ldr	r3, [pc, #120]	; (d675c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d66e2:	681a      	ldr	r2, [r3, #0]
   d66e4:	07d0      	lsls	r0, r2, #31
   d66e6:	bf5c      	itt	pl
   d66e8:	2201      	movpl	r2, #1
   d66ea:	601a      	strpl	r2, [r3, #0]
   d66ec:	4b1c      	ldr	r3, [pc, #112]	; (d6760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d66ee:	681a      	ldr	r2, [r3, #0]
   d66f0:	07d1      	lsls	r1, r2, #31
   d66f2:	bf5c      	itt	pl
   d66f4:	2201      	movpl	r2, #1
   d66f6:	601a      	strpl	r2, [r3, #0]
   d66f8:	4b1a      	ldr	r3, [pc, #104]	; (d6764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d66fa:	681a      	ldr	r2, [r3, #0]
   d66fc:	07d2      	lsls	r2, r2, #31
   d66fe:	bf5c      	itt	pl
   d6700:	2201      	movpl	r2, #1
   d6702:	601a      	strpl	r2, [r3, #0]
   d6704:	4b18      	ldr	r3, [pc, #96]	; (d6768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6706:	681a      	ldr	r2, [r3, #0]
   d6708:	07d0      	lsls	r0, r2, #31
   d670a:	bf5c      	itt	pl
   d670c:	2201      	movpl	r2, #1
   d670e:	601a      	strpl	r2, [r3, #0]
   d6710:	4b16      	ldr	r3, [pc, #88]	; (d676c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6712:	681a      	ldr	r2, [r3, #0]
   d6714:	07d1      	lsls	r1, r2, #31
   d6716:	bf5c      	itt	pl
   d6718:	2201      	movpl	r2, #1
   d671a:	601a      	strpl	r2, [r3, #0]
   d671c:	4b14      	ldr	r3, [pc, #80]	; (d6770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d671e:	681a      	ldr	r2, [r3, #0]
   d6720:	07d2      	lsls	r2, r2, #31
   d6722:	bf5c      	itt	pl
   d6724:	2201      	movpl	r2, #1
   d6726:	601a      	strpl	r2, [r3, #0]
   d6728:	4b12      	ldr	r3, [pc, #72]	; (d6774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d672a:	681a      	ldr	r2, [r3, #0]
   d672c:	07d0      	lsls	r0, r2, #31
   d672e:	bf5c      	itt	pl
   d6730:	2201      	movpl	r2, #1
   d6732:	601a      	strpl	r2, [r3, #0]
   d6734:	4b10      	ldr	r3, [pc, #64]	; (d6778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6736:	681a      	ldr	r2, [r3, #0]
   d6738:	07d1      	lsls	r1, r2, #31
   d673a:	bf5c      	itt	pl
   d673c:	2201      	movpl	r2, #1
   d673e:	601a      	strpl	r2, [r3, #0]
   d6740:	4b0e      	ldr	r3, [pc, #56]	; (d677c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6742:	681a      	ldr	r2, [r3, #0]
   d6744:	07d2      	lsls	r2, r2, #31
   d6746:	bf5c      	itt	pl
   d6748:	2201      	movpl	r2, #1
   d674a:	601a      	strpl	r2, [r3, #0]
   d674c:	4770      	bx	lr
   d674e:	bf00      	nop
   d6750:	2003e7c4 	.word	0x2003e7c4
   d6754:	2003e7c0 	.word	0x2003e7c0
   d6758:	2003e7bc 	.word	0x2003e7bc
   d675c:	2003e7b8 	.word	0x2003e7b8
   d6760:	2003e7b4 	.word	0x2003e7b4
   d6764:	2003e7b0 	.word	0x2003e7b0
   d6768:	2003e7ac 	.word	0x2003e7ac
   d676c:	2003e7a8 	.word	0x2003e7a8
   d6770:	2003e7a4 	.word	0x2003e7a4
   d6774:	2003e7a0 	.word	0x2003e7a0
   d6778:	2003e79c 	.word	0x2003e79c
   d677c:	2003e798 	.word	0x2003e798

000d6780 <asctime>:
   d6780:	4b09      	ldr	r3, [pc, #36]	; (d67a8 <asctime+0x28>)
   d6782:	b570      	push	{r4, r5, r6, lr}
   d6784:	681c      	ldr	r4, [r3, #0]
   d6786:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d6788:	4606      	mov	r6, r0
   d678a:	b93d      	cbnz	r5, d679c <asctime+0x1c>
   d678c:	201a      	movs	r0, #26
   d678e:	f7fe fc7f 	bl	d5090 <malloc>
   d6792:	221a      	movs	r2, #26
   d6794:	6420      	str	r0, [r4, #64]	; 0x40
   d6796:	4629      	mov	r1, r5
   d6798:	f000 f93f 	bl	d6a1a <memset>
   d679c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d679e:	4630      	mov	r0, r6
   d67a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d67a4:	f000 b802 	b.w	d67ac <asctime_r>
   d67a8:	2003e2f0 	.word	0x2003e2f0

000d67ac <asctime_r>:
   d67ac:	b510      	push	{r4, lr}
   d67ae:	460c      	mov	r4, r1
   d67b0:	6941      	ldr	r1, [r0, #20]
   d67b2:	6903      	ldr	r3, [r0, #16]
   d67b4:	6982      	ldr	r2, [r0, #24]
   d67b6:	b086      	sub	sp, #24
   d67b8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d67bc:	9104      	str	r1, [sp, #16]
   d67be:	6801      	ldr	r1, [r0, #0]
   d67c0:	9103      	str	r1, [sp, #12]
   d67c2:	6841      	ldr	r1, [r0, #4]
   d67c4:	9102      	str	r1, [sp, #8]
   d67c6:	6881      	ldr	r1, [r0, #8]
   d67c8:	9101      	str	r1, [sp, #4]
   d67ca:	68c1      	ldr	r1, [r0, #12]
   d67cc:	9100      	str	r1, [sp, #0]
   d67ce:	4907      	ldr	r1, [pc, #28]	; (d67ec <asctime_r+0x40>)
   d67d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d67d4:	440b      	add	r3, r1
   d67d6:	4906      	ldr	r1, [pc, #24]	; (d67f0 <asctime_r+0x44>)
   d67d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d67dc:	440a      	add	r2, r1
   d67de:	4620      	mov	r0, r4
   d67e0:	4904      	ldr	r1, [pc, #16]	; (d67f4 <asctime_r+0x48>)
   d67e2:	f7fe fc6d 	bl	d50c0 <siprintf>
   d67e6:	4620      	mov	r0, r4
   d67e8:	b006      	add	sp, #24
   d67ea:	bd10      	pop	{r4, pc}
   d67ec:	000d7765 	.word	0x000d7765
   d67f0:	000d7750 	.word	0x000d7750
   d67f4:	000d7789 	.word	0x000d7789

000d67f8 <__cxa_atexit>:
   d67f8:	b510      	push	{r4, lr}
   d67fa:	4c05      	ldr	r4, [pc, #20]	; (d6810 <__cxa_atexit+0x18>)
   d67fc:	4613      	mov	r3, r2
   d67fe:	b12c      	cbz	r4, d680c <__cxa_atexit+0x14>
   d6800:	460a      	mov	r2, r1
   d6802:	4601      	mov	r1, r0
   d6804:	2002      	movs	r0, #2
   d6806:	f3af 8000 	nop.w
   d680a:	bd10      	pop	{r4, pc}
   d680c:	4620      	mov	r0, r4
   d680e:	bd10      	pop	{r4, pc}
   d6810:	00000000 	.word	0x00000000

000d6814 <localtime>:
   d6814:	b538      	push	{r3, r4, r5, lr}
   d6816:	4b07      	ldr	r3, [pc, #28]	; (d6834 <localtime+0x20>)
   d6818:	681c      	ldr	r4, [r3, #0]
   d681a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d681c:	4605      	mov	r5, r0
   d681e:	b91b      	cbnz	r3, d6828 <localtime+0x14>
   d6820:	2024      	movs	r0, #36	; 0x24
   d6822:	f7fe fc35 	bl	d5090 <malloc>
   d6826:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6828:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d682a:	4628      	mov	r0, r5
   d682c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6830:	f000 b802 	b.w	d6838 <localtime_r>
   d6834:	2003e2f0 	.word	0x2003e2f0

000d6838 <localtime_r>:
   d6838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d683c:	460c      	mov	r4, r1
   d683e:	4680      	mov	r8, r0
   d6840:	f000 fcf2 	bl	d7228 <__gettzinfo>
   d6844:	4621      	mov	r1, r4
   d6846:	4607      	mov	r7, r0
   d6848:	4640      	mov	r0, r8
   d684a:	f000 fcf1 	bl	d7230 <gmtime_r>
   d684e:	6946      	ldr	r6, [r0, #20]
   d6850:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6854:	07b3      	lsls	r3, r6, #30
   d6856:	4604      	mov	r4, r0
   d6858:	d105      	bne.n	d6866 <localtime_r+0x2e>
   d685a:	2264      	movs	r2, #100	; 0x64
   d685c:	fb96 f3f2 	sdiv	r3, r6, r2
   d6860:	fb02 6313 	mls	r3, r2, r3, r6
   d6864:	b94b      	cbnz	r3, d687a <localtime_r+0x42>
   d6866:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d686a:	fb96 f3f5 	sdiv	r3, r6, r5
   d686e:	fb05 6513 	mls	r5, r5, r3, r6
   d6872:	fab5 f385 	clz	r3, r5
   d6876:	095b      	lsrs	r3, r3, #5
   d6878:	e000      	b.n	d687c <localtime_r+0x44>
   d687a:	2301      	movs	r3, #1
   d687c:	4a5f      	ldr	r2, [pc, #380]	; (d69fc <localtime_r+0x1c4>)
   d687e:	2530      	movs	r5, #48	; 0x30
   d6880:	fb05 2503 	mla	r5, r5, r3, r2
   d6884:	f000 fb04 	bl	d6e90 <__tz_lock>
   d6888:	f000 fb04 	bl	d6e94 <_tzset_unlocked>
   d688c:	4b5c      	ldr	r3, [pc, #368]	; (d6a00 <localtime_r+0x1c8>)
   d688e:	681b      	ldr	r3, [r3, #0]
   d6890:	b1f3      	cbz	r3, d68d0 <localtime_r+0x98>
   d6892:	687b      	ldr	r3, [r7, #4]
   d6894:	429e      	cmp	r6, r3
   d6896:	d105      	bne.n	d68a4 <localtime_r+0x6c>
   d6898:	6839      	ldr	r1, [r7, #0]
   d689a:	f8d8 3000 	ldr.w	r3, [r8]
   d689e:	69fa      	ldr	r2, [r7, #28]
   d68a0:	b941      	cbnz	r1, d68b4 <localtime_r+0x7c>
   d68a2:	e00a      	b.n	d68ba <localtime_r+0x82>
   d68a4:	4630      	mov	r0, r6
   d68a6:	f000 fa4b 	bl	d6d40 <__tzcalc_limits>
   d68aa:	2800      	cmp	r0, #0
   d68ac:	d1f4      	bne.n	d6898 <localtime_r+0x60>
   d68ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d68b2:	e00d      	b.n	d68d0 <localtime_r+0x98>
   d68b4:	4293      	cmp	r3, r2
   d68b6:	db08      	blt.n	d68ca <localtime_r+0x92>
   d68b8:	e001      	b.n	d68be <localtime_r+0x86>
   d68ba:	4293      	cmp	r3, r2
   d68bc:	da07      	bge.n	d68ce <localtime_r+0x96>
   d68be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d68c0:	4293      	cmp	r3, r2
   d68c2:	bfac      	ite	ge
   d68c4:	2300      	movge	r3, #0
   d68c6:	2301      	movlt	r3, #1
   d68c8:	e002      	b.n	d68d0 <localtime_r+0x98>
   d68ca:	2300      	movs	r3, #0
   d68cc:	e000      	b.n	d68d0 <localtime_r+0x98>
   d68ce:	2301      	movs	r3, #1
   d68d0:	6223      	str	r3, [r4, #32]
   d68d2:	6a23      	ldr	r3, [r4, #32]
   d68d4:	2b01      	cmp	r3, #1
   d68d6:	bf0c      	ite	eq
   d68d8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d68da:	6a39      	ldrne	r1, [r7, #32]
   d68dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d68e0:	203c      	movs	r0, #60	; 0x3c
   d68e2:	fb91 f6f3 	sdiv	r6, r1, r3
   d68e6:	fb03 1316 	mls	r3, r3, r6, r1
   d68ea:	6861      	ldr	r1, [r4, #4]
   d68ec:	fb93 f2f0 	sdiv	r2, r3, r0
   d68f0:	fb00 3012 	mls	r0, r0, r2, r3
   d68f4:	6823      	ldr	r3, [r4, #0]
   d68f6:	1a89      	subs	r1, r1, r2
   d68f8:	68a2      	ldr	r2, [r4, #8]
   d68fa:	6061      	str	r1, [r4, #4]
   d68fc:	1a1b      	subs	r3, r3, r0
   d68fe:	1b92      	subs	r2, r2, r6
   d6900:	2b3b      	cmp	r3, #59	; 0x3b
   d6902:	6023      	str	r3, [r4, #0]
   d6904:	60a2      	str	r2, [r4, #8]
   d6906:	dd03      	ble.n	d6910 <localtime_r+0xd8>
   d6908:	3101      	adds	r1, #1
   d690a:	6061      	str	r1, [r4, #4]
   d690c:	3b3c      	subs	r3, #60	; 0x3c
   d690e:	e004      	b.n	d691a <localtime_r+0xe2>
   d6910:	2b00      	cmp	r3, #0
   d6912:	da03      	bge.n	d691c <localtime_r+0xe4>
   d6914:	3901      	subs	r1, #1
   d6916:	6061      	str	r1, [r4, #4]
   d6918:	333c      	adds	r3, #60	; 0x3c
   d691a:	6023      	str	r3, [r4, #0]
   d691c:	6863      	ldr	r3, [r4, #4]
   d691e:	2b3b      	cmp	r3, #59	; 0x3b
   d6920:	dd03      	ble.n	d692a <localtime_r+0xf2>
   d6922:	3201      	adds	r2, #1
   d6924:	60a2      	str	r2, [r4, #8]
   d6926:	3b3c      	subs	r3, #60	; 0x3c
   d6928:	e004      	b.n	d6934 <localtime_r+0xfc>
   d692a:	2b00      	cmp	r3, #0
   d692c:	da03      	bge.n	d6936 <localtime_r+0xfe>
   d692e:	3a01      	subs	r2, #1
   d6930:	60a2      	str	r2, [r4, #8]
   d6932:	333c      	adds	r3, #60	; 0x3c
   d6934:	6063      	str	r3, [r4, #4]
   d6936:	68a3      	ldr	r3, [r4, #8]
   d6938:	2b17      	cmp	r3, #23
   d693a:	dd22      	ble.n	d6982 <localtime_r+0x14a>
   d693c:	69e2      	ldr	r2, [r4, #28]
   d693e:	3201      	adds	r2, #1
   d6940:	61e2      	str	r2, [r4, #28]
   d6942:	69a2      	ldr	r2, [r4, #24]
   d6944:	3201      	adds	r2, #1
   d6946:	2a06      	cmp	r2, #6
   d6948:	bfc8      	it	gt
   d694a:	2200      	movgt	r2, #0
   d694c:	61a2      	str	r2, [r4, #24]
   d694e:	68e2      	ldr	r2, [r4, #12]
   d6950:	3b18      	subs	r3, #24
   d6952:	3201      	adds	r2, #1
   d6954:	60a3      	str	r3, [r4, #8]
   d6956:	6923      	ldr	r3, [r4, #16]
   d6958:	60e2      	str	r2, [r4, #12]
   d695a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d695e:	428a      	cmp	r2, r1
   d6960:	dd46      	ble.n	d69f0 <localtime_r+0x1b8>
   d6962:	3301      	adds	r3, #1
   d6964:	2b0c      	cmp	r3, #12
   d6966:	bf0c      	ite	eq
   d6968:	6963      	ldreq	r3, [r4, #20]
   d696a:	6123      	strne	r3, [r4, #16]
   d696c:	eba2 0201 	sub.w	r2, r2, r1
   d6970:	60e2      	str	r2, [r4, #12]
   d6972:	bf01      	itttt	eq
   d6974:	3301      	addeq	r3, #1
   d6976:	2200      	moveq	r2, #0
   d6978:	6122      	streq	r2, [r4, #16]
   d697a:	6163      	streq	r3, [r4, #20]
   d697c:	bf08      	it	eq
   d697e:	61e2      	streq	r2, [r4, #28]
   d6980:	e036      	b.n	d69f0 <localtime_r+0x1b8>
   d6982:	2b00      	cmp	r3, #0
   d6984:	da34      	bge.n	d69f0 <localtime_r+0x1b8>
   d6986:	69e2      	ldr	r2, [r4, #28]
   d6988:	3a01      	subs	r2, #1
   d698a:	61e2      	str	r2, [r4, #28]
   d698c:	69a2      	ldr	r2, [r4, #24]
   d698e:	3a01      	subs	r2, #1
   d6990:	bf48      	it	mi
   d6992:	2206      	movmi	r2, #6
   d6994:	61a2      	str	r2, [r4, #24]
   d6996:	68e2      	ldr	r2, [r4, #12]
   d6998:	3318      	adds	r3, #24
   d699a:	3a01      	subs	r2, #1
   d699c:	60e2      	str	r2, [r4, #12]
   d699e:	60a3      	str	r3, [r4, #8]
   d69a0:	bb32      	cbnz	r2, d69f0 <localtime_r+0x1b8>
   d69a2:	6923      	ldr	r3, [r4, #16]
   d69a4:	3b01      	subs	r3, #1
   d69a6:	d401      	bmi.n	d69ac <localtime_r+0x174>
   d69a8:	6123      	str	r3, [r4, #16]
   d69aa:	e01d      	b.n	d69e8 <localtime_r+0x1b0>
   d69ac:	230b      	movs	r3, #11
   d69ae:	6123      	str	r3, [r4, #16]
   d69b0:	6963      	ldr	r3, [r4, #20]
   d69b2:	1e5a      	subs	r2, r3, #1
   d69b4:	f012 0f03 	tst.w	r2, #3
   d69b8:	6162      	str	r2, [r4, #20]
   d69ba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d69be:	d105      	bne.n	d69cc <localtime_r+0x194>
   d69c0:	2164      	movs	r1, #100	; 0x64
   d69c2:	fb93 f2f1 	sdiv	r2, r3, r1
   d69c6:	fb01 3212 	mls	r2, r1, r2, r3
   d69ca:	b94a      	cbnz	r2, d69e0 <localtime_r+0x1a8>
   d69cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d69d0:	fb93 f2f1 	sdiv	r2, r3, r1
   d69d4:	fb01 3312 	mls	r3, r1, r2, r3
   d69d8:	fab3 f383 	clz	r3, r3
   d69dc:	095b      	lsrs	r3, r3, #5
   d69de:	e000      	b.n	d69e2 <localtime_r+0x1aa>
   d69e0:	2301      	movs	r3, #1
   d69e2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d69e6:	61e3      	str	r3, [r4, #28]
   d69e8:	6923      	ldr	r3, [r4, #16]
   d69ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d69ee:	60e3      	str	r3, [r4, #12]
   d69f0:	f000 fa4f 	bl	d6e92 <__tz_unlock>
   d69f4:	4620      	mov	r0, r4
   d69f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69fa:	bf00      	nop
   d69fc:	000d7910 	.word	0x000d7910
   d6a00:	2003e7e4 	.word	0x2003e7e4

000d6a04 <memcpy>:
   d6a04:	b510      	push	{r4, lr}
   d6a06:	1e43      	subs	r3, r0, #1
   d6a08:	440a      	add	r2, r1
   d6a0a:	4291      	cmp	r1, r2
   d6a0c:	d004      	beq.n	d6a18 <memcpy+0x14>
   d6a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6a12:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6a16:	e7f8      	b.n	d6a0a <memcpy+0x6>
   d6a18:	bd10      	pop	{r4, pc}

000d6a1a <memset>:
   d6a1a:	4402      	add	r2, r0
   d6a1c:	4603      	mov	r3, r0
   d6a1e:	4293      	cmp	r3, r2
   d6a20:	d002      	beq.n	d6a28 <memset+0xe>
   d6a22:	f803 1b01 	strb.w	r1, [r3], #1
   d6a26:	e7fa      	b.n	d6a1e <memset+0x4>
   d6a28:	4770      	bx	lr
	...

000d6a2c <srand>:
   d6a2c:	b538      	push	{r3, r4, r5, lr}
   d6a2e:	4b12      	ldr	r3, [pc, #72]	; (d6a78 <srand+0x4c>)
   d6a30:	681c      	ldr	r4, [r3, #0]
   d6a32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a34:	4605      	mov	r5, r0
   d6a36:	b9d3      	cbnz	r3, d6a6e <srand+0x42>
   d6a38:	2018      	movs	r0, #24
   d6a3a:	f7fe fb29 	bl	d5090 <malloc>
   d6a3e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6a42:	63a0      	str	r0, [r4, #56]	; 0x38
   d6a44:	8003      	strh	r3, [r0, #0]
   d6a46:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6a4a:	8043      	strh	r3, [r0, #2]
   d6a4c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6a50:	8083      	strh	r3, [r0, #4]
   d6a52:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6a56:	80c3      	strh	r3, [r0, #6]
   d6a58:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6a5c:	8103      	strh	r3, [r0, #8]
   d6a5e:	2305      	movs	r3, #5
   d6a60:	8143      	strh	r3, [r0, #10]
   d6a62:	230b      	movs	r3, #11
   d6a64:	8183      	strh	r3, [r0, #12]
   d6a66:	2201      	movs	r2, #1
   d6a68:	2300      	movs	r3, #0
   d6a6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a70:	2200      	movs	r2, #0
   d6a72:	611d      	str	r5, [r3, #16]
   d6a74:	615a      	str	r2, [r3, #20]
   d6a76:	bd38      	pop	{r3, r4, r5, pc}
   d6a78:	2003e2f0 	.word	0x2003e2f0

000d6a7c <strcmp>:
   d6a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6a80:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6a84:	2a01      	cmp	r2, #1
   d6a86:	bf28      	it	cs
   d6a88:	429a      	cmpcs	r2, r3
   d6a8a:	d0f7      	beq.n	d6a7c <strcmp>
   d6a8c:	1ad0      	subs	r0, r2, r3
   d6a8e:	4770      	bx	lr

000d6a90 <strcpy>:
   d6a90:	4603      	mov	r3, r0
   d6a92:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6a96:	f803 2b01 	strb.w	r2, [r3], #1
   d6a9a:	2a00      	cmp	r2, #0
   d6a9c:	d1f9      	bne.n	d6a92 <strcpy+0x2>
   d6a9e:	4770      	bx	lr

000d6aa0 <strdup>:
   d6aa0:	4b02      	ldr	r3, [pc, #8]	; (d6aac <strdup+0xc>)
   d6aa2:	4601      	mov	r1, r0
   d6aa4:	6818      	ldr	r0, [r3, #0]
   d6aa6:	f000 b803 	b.w	d6ab0 <_strdup_r>
   d6aaa:	bf00      	nop
   d6aac:	2003e2f0 	.word	0x2003e2f0

000d6ab0 <_strdup_r>:
   d6ab0:	b570      	push	{r4, r5, r6, lr}
   d6ab2:	4606      	mov	r6, r0
   d6ab4:	4608      	mov	r0, r1
   d6ab6:	460c      	mov	r4, r1
   d6ab8:	f000 f80d 	bl	d6ad6 <strlen>
   d6abc:	1c45      	adds	r5, r0, #1
   d6abe:	4629      	mov	r1, r5
   d6ac0:	4630      	mov	r0, r6
   d6ac2:	f7fe fb1d 	bl	d5100 <_malloc_r>
   d6ac6:	4606      	mov	r6, r0
   d6ac8:	b118      	cbz	r0, d6ad2 <_strdup_r+0x22>
   d6aca:	462a      	mov	r2, r5
   d6acc:	4621      	mov	r1, r4
   d6ace:	f7ff ff99 	bl	d6a04 <memcpy>
   d6ad2:	4630      	mov	r0, r6
   d6ad4:	bd70      	pop	{r4, r5, r6, pc}

000d6ad6 <strlen>:
   d6ad6:	4603      	mov	r3, r0
   d6ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6adc:	2a00      	cmp	r2, #0
   d6ade:	d1fb      	bne.n	d6ad8 <strlen+0x2>
   d6ae0:	1a18      	subs	r0, r3, r0
   d6ae2:	3801      	subs	r0, #1
   d6ae4:	4770      	bx	lr

000d6ae6 <strncmp>:
   d6ae6:	b530      	push	{r4, r5, lr}
   d6ae8:	b182      	cbz	r2, d6b0c <strncmp+0x26>
   d6aea:	1e45      	subs	r5, r0, #1
   d6aec:	3901      	subs	r1, #1
   d6aee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6af2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6af6:	42a3      	cmp	r3, r4
   d6af8:	d106      	bne.n	d6b08 <strncmp+0x22>
   d6afa:	43ec      	mvns	r4, r5
   d6afc:	4414      	add	r4, r2
   d6afe:	42e0      	cmn	r0, r4
   d6b00:	d001      	beq.n	d6b06 <strncmp+0x20>
   d6b02:	2b00      	cmp	r3, #0
   d6b04:	d1f3      	bne.n	d6aee <strncmp+0x8>
   d6b06:	461c      	mov	r4, r3
   d6b08:	1b18      	subs	r0, r3, r4
   d6b0a:	bd30      	pop	{r4, r5, pc}
   d6b0c:	4610      	mov	r0, r2
   d6b0e:	bd30      	pop	{r4, r5, pc}

000d6b10 <_strtol_r>:
   d6b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b14:	4680      	mov	r8, r0
   d6b16:	4840      	ldr	r0, [pc, #256]	; (d6c18 <_strtol_r+0x108>)
   d6b18:	f8d0 9000 	ldr.w	r9, [r0]
   d6b1c:	460f      	mov	r7, r1
   d6b1e:	463d      	mov	r5, r7
   d6b20:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6b24:	eb09 0004 	add.w	r0, r9, r4
   d6b28:	7840      	ldrb	r0, [r0, #1]
   d6b2a:	f000 0008 	and.w	r0, r0, #8
   d6b2e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6b32:	b108      	cbz	r0, d6b38 <_strtol_r+0x28>
   d6b34:	462f      	mov	r7, r5
   d6b36:	e7f2      	b.n	d6b1e <_strtol_r+0xe>
   d6b38:	2c2d      	cmp	r4, #45	; 0x2d
   d6b3a:	d103      	bne.n	d6b44 <_strtol_r+0x34>
   d6b3c:	1cbd      	adds	r5, r7, #2
   d6b3e:	787c      	ldrb	r4, [r7, #1]
   d6b40:	2601      	movs	r6, #1
   d6b42:	e003      	b.n	d6b4c <_strtol_r+0x3c>
   d6b44:	2c2b      	cmp	r4, #43	; 0x2b
   d6b46:	bf04      	itt	eq
   d6b48:	787c      	ldrbeq	r4, [r7, #1]
   d6b4a:	1cbd      	addeq	r5, r7, #2
   d6b4c:	b113      	cbz	r3, d6b54 <_strtol_r+0x44>
   d6b4e:	2b10      	cmp	r3, #16
   d6b50:	d10a      	bne.n	d6b68 <_strtol_r+0x58>
   d6b52:	e05b      	b.n	d6c0c <_strtol_r+0xfc>
   d6b54:	2c30      	cmp	r4, #48	; 0x30
   d6b56:	d157      	bne.n	d6c08 <_strtol_r+0xf8>
   d6b58:	7828      	ldrb	r0, [r5, #0]
   d6b5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6b5e:	2858      	cmp	r0, #88	; 0x58
   d6b60:	d14d      	bne.n	d6bfe <_strtol_r+0xee>
   d6b62:	786c      	ldrb	r4, [r5, #1]
   d6b64:	2310      	movs	r3, #16
   d6b66:	3502      	adds	r5, #2
   d6b68:	2e00      	cmp	r6, #0
   d6b6a:	bf14      	ite	ne
   d6b6c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6b70:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6b74:	2700      	movs	r7, #0
   d6b76:	fbbc faf3 	udiv	sl, ip, r3
   d6b7a:	4638      	mov	r0, r7
   d6b7c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6b80:	eb09 0e04 	add.w	lr, r9, r4
   d6b84:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6b88:	f01e 0f04 	tst.w	lr, #4
   d6b8c:	d001      	beq.n	d6b92 <_strtol_r+0x82>
   d6b8e:	3c30      	subs	r4, #48	; 0x30
   d6b90:	e00b      	b.n	d6baa <_strtol_r+0x9a>
   d6b92:	f01e 0e03 	ands.w	lr, lr, #3
   d6b96:	d01b      	beq.n	d6bd0 <_strtol_r+0xc0>
   d6b98:	f1be 0f01 	cmp.w	lr, #1
   d6b9c:	bf0c      	ite	eq
   d6b9e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6ba2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6ba6:	ebce 0404 	rsb	r4, lr, r4
   d6baa:	42a3      	cmp	r3, r4
   d6bac:	dd10      	ble.n	d6bd0 <_strtol_r+0xc0>
   d6bae:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d6bb2:	d00a      	beq.n	d6bca <_strtol_r+0xba>
   d6bb4:	4550      	cmp	r0, sl
   d6bb6:	d806      	bhi.n	d6bc6 <_strtol_r+0xb6>
   d6bb8:	d101      	bne.n	d6bbe <_strtol_r+0xae>
   d6bba:	4564      	cmp	r4, ip
   d6bbc:	dc03      	bgt.n	d6bc6 <_strtol_r+0xb6>
   d6bbe:	fb03 4000 	mla	r0, r3, r0, r4
   d6bc2:	2701      	movs	r7, #1
   d6bc4:	e001      	b.n	d6bca <_strtol_r+0xba>
   d6bc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d6bca:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6bce:	e7d7      	b.n	d6b80 <_strtol_r+0x70>
   d6bd0:	1c7b      	adds	r3, r7, #1
   d6bd2:	d10c      	bne.n	d6bee <_strtol_r+0xde>
   d6bd4:	2e00      	cmp	r6, #0
   d6bd6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d6bda:	bf14      	ite	ne
   d6bdc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6be0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6be4:	f8c8 3000 	str.w	r3, [r8]
   d6be8:	b92a      	cbnz	r2, d6bf6 <_strtol_r+0xe6>
   d6bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bee:	b106      	cbz	r6, d6bf2 <_strtol_r+0xe2>
   d6bf0:	4240      	negs	r0, r0
   d6bf2:	b172      	cbz	r2, d6c12 <_strtol_r+0x102>
   d6bf4:	b107      	cbz	r7, d6bf8 <_strtol_r+0xe8>
   d6bf6:	1e69      	subs	r1, r5, #1
   d6bf8:	6011      	str	r1, [r2, #0]
   d6bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bfe:	2430      	movs	r4, #48	; 0x30
   d6c00:	2b00      	cmp	r3, #0
   d6c02:	d1b1      	bne.n	d6b68 <_strtol_r+0x58>
   d6c04:	2308      	movs	r3, #8
   d6c06:	e7af      	b.n	d6b68 <_strtol_r+0x58>
   d6c08:	230a      	movs	r3, #10
   d6c0a:	e7ad      	b.n	d6b68 <_strtol_r+0x58>
   d6c0c:	2c30      	cmp	r4, #48	; 0x30
   d6c0e:	d0a3      	beq.n	d6b58 <_strtol_r+0x48>
   d6c10:	e7aa      	b.n	d6b68 <_strtol_r+0x58>
   d6c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c16:	bf00      	nop
   d6c18:	2003e28c 	.word	0x2003e28c

000d6c1c <strtol>:
   d6c1c:	4613      	mov	r3, r2
   d6c1e:	460a      	mov	r2, r1
   d6c20:	4601      	mov	r1, r0
   d6c22:	4802      	ldr	r0, [pc, #8]	; (d6c2c <strtol+0x10>)
   d6c24:	6800      	ldr	r0, [r0, #0]
   d6c26:	f7ff bf73 	b.w	d6b10 <_strtol_r>
   d6c2a:	bf00      	nop
   d6c2c:	2003e2f0 	.word	0x2003e2f0

000d6c30 <_strtoul_r>:
   d6c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6c34:	4680      	mov	r8, r0
   d6c36:	483c      	ldr	r0, [pc, #240]	; (d6d28 <_strtoul_r+0xf8>)
   d6c38:	f8d0 9000 	ldr.w	r9, [r0]
   d6c3c:	460e      	mov	r6, r1
   d6c3e:	4635      	mov	r5, r6
   d6c40:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6c44:	eb09 0004 	add.w	r0, r9, r4
   d6c48:	7840      	ldrb	r0, [r0, #1]
   d6c4a:	f000 0008 	and.w	r0, r0, #8
   d6c4e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6c52:	b108      	cbz	r0, d6c58 <_strtoul_r+0x28>
   d6c54:	462e      	mov	r6, r5
   d6c56:	e7f2      	b.n	d6c3e <_strtoul_r+0xe>
   d6c58:	2c2d      	cmp	r4, #45	; 0x2d
   d6c5a:	d103      	bne.n	d6c64 <_strtoul_r+0x34>
   d6c5c:	1cb5      	adds	r5, r6, #2
   d6c5e:	7874      	ldrb	r4, [r6, #1]
   d6c60:	2701      	movs	r7, #1
   d6c62:	e003      	b.n	d6c6c <_strtoul_r+0x3c>
   d6c64:	2c2b      	cmp	r4, #43	; 0x2b
   d6c66:	bf04      	itt	eq
   d6c68:	7874      	ldrbeq	r4, [r6, #1]
   d6c6a:	1cb5      	addeq	r5, r6, #2
   d6c6c:	b113      	cbz	r3, d6c74 <_strtoul_r+0x44>
   d6c6e:	2b10      	cmp	r3, #16
   d6c70:	d10a      	bne.n	d6c88 <_strtoul_r+0x58>
   d6c72:	e053      	b.n	d6d1c <_strtoul_r+0xec>
   d6c74:	2c30      	cmp	r4, #48	; 0x30
   d6c76:	d14f      	bne.n	d6d18 <_strtoul_r+0xe8>
   d6c78:	7828      	ldrb	r0, [r5, #0]
   d6c7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6c7e:	2858      	cmp	r0, #88	; 0x58
   d6c80:	d145      	bne.n	d6d0e <_strtoul_r+0xde>
   d6c82:	786c      	ldrb	r4, [r5, #1]
   d6c84:	2310      	movs	r3, #16
   d6c86:	3502      	adds	r5, #2
   d6c88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6c8c:	2600      	movs	r6, #0
   d6c8e:	fbbc fcf3 	udiv	ip, ip, r3
   d6c92:	fb03 fa0c 	mul.w	sl, r3, ip
   d6c96:	ea6f 0a0a 	mvn.w	sl, sl
   d6c9a:	4630      	mov	r0, r6
   d6c9c:	eb09 0e04 	add.w	lr, r9, r4
   d6ca0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6ca4:	f01e 0f04 	tst.w	lr, #4
   d6ca8:	d001      	beq.n	d6cae <_strtoul_r+0x7e>
   d6caa:	3c30      	subs	r4, #48	; 0x30
   d6cac:	e00b      	b.n	d6cc6 <_strtoul_r+0x96>
   d6cae:	f01e 0e03 	ands.w	lr, lr, #3
   d6cb2:	d01a      	beq.n	d6cea <_strtoul_r+0xba>
   d6cb4:	f1be 0f01 	cmp.w	lr, #1
   d6cb8:	bf0c      	ite	eq
   d6cba:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6cbe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6cc2:	ebce 0404 	rsb	r4, lr, r4
   d6cc6:	42a3      	cmp	r3, r4
   d6cc8:	dd0f      	ble.n	d6cea <_strtoul_r+0xba>
   d6cca:	2e00      	cmp	r6, #0
   d6ccc:	db08      	blt.n	d6ce0 <_strtoul_r+0xb0>
   d6cce:	4560      	cmp	r0, ip
   d6cd0:	d806      	bhi.n	d6ce0 <_strtoul_r+0xb0>
   d6cd2:	d101      	bne.n	d6cd8 <_strtoul_r+0xa8>
   d6cd4:	4554      	cmp	r4, sl
   d6cd6:	dc03      	bgt.n	d6ce0 <_strtoul_r+0xb0>
   d6cd8:	fb03 4000 	mla	r0, r3, r0, r4
   d6cdc:	2601      	movs	r6, #1
   d6cde:	e001      	b.n	d6ce4 <_strtoul_r+0xb4>
   d6ce0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d6ce4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6ce8:	e7d8      	b.n	d6c9c <_strtoul_r+0x6c>
   d6cea:	2e00      	cmp	r6, #0
   d6cec:	da07      	bge.n	d6cfe <_strtoul_r+0xce>
   d6cee:	2322      	movs	r3, #34	; 0x22
   d6cf0:	f8c8 3000 	str.w	r3, [r8]
   d6cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6cf8:	b92a      	cbnz	r2, d6d06 <_strtoul_r+0xd6>
   d6cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6cfe:	b107      	cbz	r7, d6d02 <_strtoul_r+0xd2>
   d6d00:	4240      	negs	r0, r0
   d6d02:	b172      	cbz	r2, d6d22 <_strtoul_r+0xf2>
   d6d04:	b106      	cbz	r6, d6d08 <_strtoul_r+0xd8>
   d6d06:	1e69      	subs	r1, r5, #1
   d6d08:	6011      	str	r1, [r2, #0]
   d6d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d0e:	2430      	movs	r4, #48	; 0x30
   d6d10:	2b00      	cmp	r3, #0
   d6d12:	d1b9      	bne.n	d6c88 <_strtoul_r+0x58>
   d6d14:	2308      	movs	r3, #8
   d6d16:	e7b7      	b.n	d6c88 <_strtoul_r+0x58>
   d6d18:	230a      	movs	r3, #10
   d6d1a:	e7b5      	b.n	d6c88 <_strtoul_r+0x58>
   d6d1c:	2c30      	cmp	r4, #48	; 0x30
   d6d1e:	d0ab      	beq.n	d6c78 <_strtoul_r+0x48>
   d6d20:	e7b2      	b.n	d6c88 <_strtoul_r+0x58>
   d6d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d26:	bf00      	nop
   d6d28:	2003e28c 	.word	0x2003e28c

000d6d2c <strtoul>:
   d6d2c:	4613      	mov	r3, r2
   d6d2e:	460a      	mov	r2, r1
   d6d30:	4601      	mov	r1, r0
   d6d32:	4802      	ldr	r0, [pc, #8]	; (d6d3c <strtoul+0x10>)
   d6d34:	6800      	ldr	r0, [r0, #0]
   d6d36:	f7ff bf7b 	b.w	d6c30 <_strtoul_r>
   d6d3a:	bf00      	nop
   d6d3c:	2003e2f0 	.word	0x2003e2f0

000d6d40 <__tzcalc_limits>:
   d6d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d44:	4604      	mov	r4, r0
   d6d46:	f000 fa6f 	bl	d7228 <__gettzinfo>
   d6d4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d6d4e:	429c      	cmp	r4, r3
   d6d50:	f340 8096 	ble.w	d6e80 <__tzcalc_limits+0x140>
   d6d54:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6d58:	18e3      	adds	r3, r4, r3
   d6d5a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d6d5e:	109b      	asrs	r3, r3, #2
   d6d60:	f240 156d 	movw	r5, #365	; 0x16d
   d6d64:	fb05 3502 	mla	r5, r5, r2, r3
   d6d68:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6d6c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6d70:	fb92 f3f3 	sdiv	r3, r2, r3
   d6d74:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6d78:	442b      	add	r3, r5
   d6d7a:	18a5      	adds	r5, r4, r2
   d6d7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6d80:	fb95 f5f2 	sdiv	r5, r5, r2
   d6d84:	441d      	add	r5, r3
   d6d86:	2364      	movs	r3, #100	; 0x64
   d6d88:	fb94 f7f2 	sdiv	r7, r4, r2
   d6d8c:	fb94 f6f3 	sdiv	r6, r4, r3
   d6d90:	fb02 4717 	mls	r7, r2, r7, r4
   d6d94:	fb03 4616 	mls	r6, r3, r6, r4
   d6d98:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6d9c:	fab7 fe87 	clz	lr, r7
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	f004 0303 	and.w	r3, r4, #3
   d6da6:	6044      	str	r4, [r0, #4]
   d6da8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6dac:	4601      	mov	r1, r0
   d6dae:	9300      	str	r3, [sp, #0]
   d6db0:	f04f 0c07 	mov.w	ip, #7
   d6db4:	7a0b      	ldrb	r3, [r1, #8]
   d6db6:	2b4a      	cmp	r3, #74	; 0x4a
   d6db8:	d10e      	bne.n	d6dd8 <__tzcalc_limits+0x98>
   d6dba:	694b      	ldr	r3, [r1, #20]
   d6dbc:	9a00      	ldr	r2, [sp, #0]
   d6dbe:	18ec      	adds	r4, r5, r3
   d6dc0:	b902      	cbnz	r2, d6dc4 <__tzcalc_limits+0x84>
   d6dc2:	b906      	cbnz	r6, d6dc6 <__tzcalc_limits+0x86>
   d6dc4:	b927      	cbnz	r7, d6dd0 <__tzcalc_limits+0x90>
   d6dc6:	2b3b      	cmp	r3, #59	; 0x3b
   d6dc8:	bfd4      	ite	le
   d6dca:	2300      	movle	r3, #0
   d6dcc:	2301      	movgt	r3, #1
   d6dce:	e000      	b.n	d6dd2 <__tzcalc_limits+0x92>
   d6dd0:	2300      	movs	r3, #0
   d6dd2:	4423      	add	r3, r4
   d6dd4:	3b01      	subs	r3, #1
   d6dd6:	e03f      	b.n	d6e58 <__tzcalc_limits+0x118>
   d6dd8:	2b44      	cmp	r3, #68	; 0x44
   d6dda:	d102      	bne.n	d6de2 <__tzcalc_limits+0xa2>
   d6ddc:	694b      	ldr	r3, [r1, #20]
   d6dde:	442b      	add	r3, r5
   d6de0:	e03a      	b.n	d6e58 <__tzcalc_limits+0x118>
   d6de2:	9b00      	ldr	r3, [sp, #0]
   d6de4:	b92b      	cbnz	r3, d6df2 <__tzcalc_limits+0xb2>
   d6de6:	2e00      	cmp	r6, #0
   d6de8:	bf0c      	ite	eq
   d6dea:	46f0      	moveq	r8, lr
   d6dec:	f04f 0801 	movne.w	r8, #1
   d6df0:	e000      	b.n	d6df4 <__tzcalc_limits+0xb4>
   d6df2:	46f0      	mov	r8, lr
   d6df4:	4b24      	ldr	r3, [pc, #144]	; (d6e88 <__tzcalc_limits+0x148>)
   d6df6:	68cc      	ldr	r4, [r1, #12]
   d6df8:	2230      	movs	r2, #48	; 0x30
   d6dfa:	fb02 3808 	mla	r8, r2, r8, r3
   d6dfe:	f1a8 0a04 	sub.w	sl, r8, #4
   d6e02:	46a9      	mov	r9, r5
   d6e04:	2301      	movs	r3, #1
   d6e06:	42a3      	cmp	r3, r4
   d6e08:	da04      	bge.n	d6e14 <__tzcalc_limits+0xd4>
   d6e0a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d6e0e:	3301      	adds	r3, #1
   d6e10:	44d9      	add	r9, fp
   d6e12:	e7f8      	b.n	d6e06 <__tzcalc_limits+0xc6>
   d6e14:	f109 0304 	add.w	r3, r9, #4
   d6e18:	fb93 fbfc 	sdiv	fp, r3, ip
   d6e1c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6e20:	2c01      	cmp	r4, #1
   d6e22:	ebca 0a03 	rsb	sl, sl, r3
   d6e26:	694b      	ldr	r3, [r1, #20]
   d6e28:	bfb8      	it	lt
   d6e2a:	2401      	movlt	r4, #1
   d6e2c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6e30:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6e34:	690b      	ldr	r3, [r1, #16]
   d6e36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d6e3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d6e3e:	bf48      	it	mi
   d6e40:	f10a 0a07 	addmi.w	sl, sl, #7
   d6e44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6e48:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6e4c:	4453      	add	r3, sl
   d6e4e:	42a3      	cmp	r3, r4
   d6e50:	db01      	blt.n	d6e56 <__tzcalc_limits+0x116>
   d6e52:	3b07      	subs	r3, #7
   d6e54:	e7fb      	b.n	d6e4e <__tzcalc_limits+0x10e>
   d6e56:	444b      	add	r3, r9
   d6e58:	698c      	ldr	r4, [r1, #24]
   d6e5a:	4a0c      	ldr	r2, [pc, #48]	; (d6e8c <__tzcalc_limits+0x14c>)
   d6e5c:	fb02 4303 	mla	r3, r2, r3, r4
   d6e60:	6a0c      	ldr	r4, [r1, #32]
   d6e62:	4423      	add	r3, r4
   d6e64:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6e68:	9b01      	ldr	r3, [sp, #4]
   d6e6a:	4299      	cmp	r1, r3
   d6e6c:	d1a2      	bne.n	d6db4 <__tzcalc_limits+0x74>
   d6e6e:	69c3      	ldr	r3, [r0, #28]
   d6e70:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6e72:	4293      	cmp	r3, r2
   d6e74:	bfac      	ite	ge
   d6e76:	2300      	movge	r3, #0
   d6e78:	2301      	movlt	r3, #1
   d6e7a:	6003      	str	r3, [r0, #0]
   d6e7c:	2001      	movs	r0, #1
   d6e7e:	e000      	b.n	d6e82 <__tzcalc_limits+0x142>
   d6e80:	2000      	movs	r0, #0
   d6e82:	b003      	add	sp, #12
   d6e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e88:	000d7910 	.word	0x000d7910
   d6e8c:	00015180 	.word	0x00015180

000d6e90 <__tz_lock>:
   d6e90:	4770      	bx	lr

000d6e92 <__tz_unlock>:
   d6e92:	4770      	bx	lr

000d6e94 <_tzset_unlocked>:
   d6e94:	4b01      	ldr	r3, [pc, #4]	; (d6e9c <_tzset_unlocked+0x8>)
   d6e96:	6818      	ldr	r0, [r3, #0]
   d6e98:	f000 b802 	b.w	d6ea0 <_tzset_unlocked_r>
   d6e9c:	2003e2f0 	.word	0x2003e2f0

000d6ea0 <_tzset_unlocked_r>:
   d6ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ea4:	b08d      	sub	sp, #52	; 0x34
   d6ea6:	4607      	mov	r7, r0
   d6ea8:	f000 f9be 	bl	d7228 <__gettzinfo>
   d6eac:	49b0      	ldr	r1, [pc, #704]	; (d7170 <_tzset_unlocked_r+0x2d0>)
   d6eae:	4eb1      	ldr	r6, [pc, #708]	; (d7174 <_tzset_unlocked_r+0x2d4>)
   d6eb0:	4604      	mov	r4, r0
   d6eb2:	4638      	mov	r0, r7
   d6eb4:	f000 f9b0 	bl	d7218 <_getenv_r>
   d6eb8:	4605      	mov	r5, r0
   d6eba:	b960      	cbnz	r0, d6ed6 <_tzset_unlocked_r+0x36>
   d6ebc:	4bae      	ldr	r3, [pc, #696]	; (d7178 <_tzset_unlocked_r+0x2d8>)
   d6ebe:	4aaf      	ldr	r2, [pc, #700]	; (d717c <_tzset_unlocked_r+0x2dc>)
   d6ec0:	6018      	str	r0, [r3, #0]
   d6ec2:	4baf      	ldr	r3, [pc, #700]	; (d7180 <_tzset_unlocked_r+0x2e0>)
   d6ec4:	6018      	str	r0, [r3, #0]
   d6ec6:	4baf      	ldr	r3, [pc, #700]	; (d7184 <_tzset_unlocked_r+0x2e4>)
   d6ec8:	6830      	ldr	r0, [r6, #0]
   d6eca:	601a      	str	r2, [r3, #0]
   d6ecc:	605a      	str	r2, [r3, #4]
   d6ece:	f7fe f8e7 	bl	d50a0 <free>
   d6ed2:	6035      	str	r5, [r6, #0]
   d6ed4:	e148      	b.n	d7168 <_tzset_unlocked_r+0x2c8>
   d6ed6:	6831      	ldr	r1, [r6, #0]
   d6ed8:	b979      	cbnz	r1, d6efa <_tzset_unlocked_r+0x5a>
   d6eda:	6830      	ldr	r0, [r6, #0]
   d6edc:	f7fe f8e0 	bl	d50a0 <free>
   d6ee0:	4628      	mov	r0, r5
   d6ee2:	f7ff fdf8 	bl	d6ad6 <strlen>
   d6ee6:	1c41      	adds	r1, r0, #1
   d6ee8:	4638      	mov	r0, r7
   d6eea:	f7fe f909 	bl	d5100 <_malloc_r>
   d6eee:	6030      	str	r0, [r6, #0]
   d6ef0:	b148      	cbz	r0, d6f06 <_tzset_unlocked_r+0x66>
   d6ef2:	4629      	mov	r1, r5
   d6ef4:	f7ff fdcc 	bl	d6a90 <strcpy>
   d6ef8:	e005      	b.n	d6f06 <_tzset_unlocked_r+0x66>
   d6efa:	f7ff fdbf 	bl	d6a7c <strcmp>
   d6efe:	2800      	cmp	r0, #0
   d6f00:	f000 8132 	beq.w	d7168 <_tzset_unlocked_r+0x2c8>
   d6f04:	e7e9      	b.n	d6eda <_tzset_unlocked_r+0x3a>
   d6f06:	782b      	ldrb	r3, [r5, #0]
   d6f08:	4a9f      	ldr	r2, [pc, #636]	; (d7188 <_tzset_unlocked_r+0x2e8>)
   d6f0a:	49a0      	ldr	r1, [pc, #640]	; (d718c <_tzset_unlocked_r+0x2ec>)
   d6f0c:	2b3a      	cmp	r3, #58	; 0x3a
   d6f0e:	bf08      	it	eq
   d6f10:	3501      	addeq	r5, #1
   d6f12:	ae0a      	add	r6, sp, #40	; 0x28
   d6f14:	4633      	mov	r3, r6
   d6f16:	4628      	mov	r0, r5
   d6f18:	f7fe f8da 	bl	d50d0 <siscanf>
   d6f1c:	2800      	cmp	r0, #0
   d6f1e:	f340 8123 	ble.w	d7168 <_tzset_unlocked_r+0x2c8>
   d6f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f24:	18ef      	adds	r7, r5, r3
   d6f26:	5ceb      	ldrb	r3, [r5, r3]
   d6f28:	2b2d      	cmp	r3, #45	; 0x2d
   d6f2a:	d103      	bne.n	d6f34 <_tzset_unlocked_r+0x94>
   d6f2c:	3701      	adds	r7, #1
   d6f2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d6f32:	e003      	b.n	d6f3c <_tzset_unlocked_r+0x9c>
   d6f34:	2b2b      	cmp	r3, #43	; 0x2b
   d6f36:	bf08      	it	eq
   d6f38:	3701      	addeq	r7, #1
   d6f3a:	2501      	movs	r5, #1
   d6f3c:	f10d 0a20 	add.w	sl, sp, #32
   d6f40:	f10d 0b1e 	add.w	fp, sp, #30
   d6f44:	f04f 0800 	mov.w	r8, #0
   d6f48:	9603      	str	r6, [sp, #12]
   d6f4a:	f8cd a008 	str.w	sl, [sp, #8]
   d6f4e:	9601      	str	r6, [sp, #4]
   d6f50:	f8cd b000 	str.w	fp, [sp]
   d6f54:	4633      	mov	r3, r6
   d6f56:	aa07      	add	r2, sp, #28
   d6f58:	498d      	ldr	r1, [pc, #564]	; (d7190 <_tzset_unlocked_r+0x2f0>)
   d6f5a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6f5e:	4638      	mov	r0, r7
   d6f60:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6f64:	f7fe f8b4 	bl	d50d0 <siscanf>
   d6f68:	4540      	cmp	r0, r8
   d6f6a:	f340 80fd 	ble.w	d7168 <_tzset_unlocked_r+0x2c8>
   d6f6e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6f72:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6f76:	f8df 9224 	ldr.w	r9, [pc, #548]	; d719c <_tzset_unlocked_r+0x2fc>
   d6f7a:	213c      	movs	r1, #60	; 0x3c
   d6f7c:	fb01 3302 	mla	r3, r1, r2, r3
   d6f80:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6f84:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6f88:	fb01 3302 	mla	r3, r1, r2, r3
   d6f8c:	435d      	muls	r5, r3
   d6f8e:	6225      	str	r5, [r4, #32]
   d6f90:	4d7c      	ldr	r5, [pc, #496]	; (d7184 <_tzset_unlocked_r+0x2e4>)
   d6f92:	4b7d      	ldr	r3, [pc, #500]	; (d7188 <_tzset_unlocked_r+0x2e8>)
   d6f94:	602b      	str	r3, [r5, #0]
   d6f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f98:	497c      	ldr	r1, [pc, #496]	; (d718c <_tzset_unlocked_r+0x2ec>)
   d6f9a:	441f      	add	r7, r3
   d6f9c:	464a      	mov	r2, r9
   d6f9e:	4633      	mov	r3, r6
   d6fa0:	4638      	mov	r0, r7
   d6fa2:	f7fe f895 	bl	d50d0 <siscanf>
   d6fa6:	4540      	cmp	r0, r8
   d6fa8:	dc08      	bgt.n	d6fbc <_tzset_unlocked_r+0x11c>
   d6faa:	682b      	ldr	r3, [r5, #0]
   d6fac:	606b      	str	r3, [r5, #4]
   d6fae:	4b72      	ldr	r3, [pc, #456]	; (d7178 <_tzset_unlocked_r+0x2d8>)
   d6fb0:	6a22      	ldr	r2, [r4, #32]
   d6fb2:	601a      	str	r2, [r3, #0]
   d6fb4:	4b72      	ldr	r3, [pc, #456]	; (d7180 <_tzset_unlocked_r+0x2e0>)
   d6fb6:	f8c3 8000 	str.w	r8, [r3]
   d6fba:	e0d5      	b.n	d7168 <_tzset_unlocked_r+0x2c8>
   d6fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6fbe:	f8c5 9004 	str.w	r9, [r5, #4]
   d6fc2:	18fd      	adds	r5, r7, r3
   d6fc4:	5cfb      	ldrb	r3, [r7, r3]
   d6fc6:	2b2d      	cmp	r3, #45	; 0x2d
   d6fc8:	d103      	bne.n	d6fd2 <_tzset_unlocked_r+0x132>
   d6fca:	3501      	adds	r5, #1
   d6fcc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d6fd0:	e003      	b.n	d6fda <_tzset_unlocked_r+0x13a>
   d6fd2:	2b2b      	cmp	r3, #43	; 0x2b
   d6fd4:	bf08      	it	eq
   d6fd6:	3501      	addeq	r5, #1
   d6fd8:	2701      	movs	r7, #1
   d6fda:	2300      	movs	r3, #0
   d6fdc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d6fe0:	f8ad 301e 	strh.w	r3, [sp, #30]
   d6fe4:	f8ad 3020 	strh.w	r3, [sp, #32]
   d6fe8:	930a      	str	r3, [sp, #40]	; 0x28
   d6fea:	9603      	str	r6, [sp, #12]
   d6fec:	f8cd a008 	str.w	sl, [sp, #8]
   d6ff0:	9601      	str	r6, [sp, #4]
   d6ff2:	f8cd b000 	str.w	fp, [sp]
   d6ff6:	4633      	mov	r3, r6
   d6ff8:	aa07      	add	r2, sp, #28
   d6ffa:	4965      	ldr	r1, [pc, #404]	; (d7190 <_tzset_unlocked_r+0x2f0>)
   d6ffc:	4628      	mov	r0, r5
   d6ffe:	f7fe f867 	bl	d50d0 <siscanf>
   d7002:	2800      	cmp	r0, #0
   d7004:	dc04      	bgt.n	d7010 <_tzset_unlocked_r+0x170>
   d7006:	6a23      	ldr	r3, [r4, #32]
   d7008:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d700c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d700e:	e00e      	b.n	d702e <_tzset_unlocked_r+0x18e>
   d7010:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7014:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7018:	213c      	movs	r1, #60	; 0x3c
   d701a:	fb01 3302 	mla	r3, r1, r2, r3
   d701e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7022:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7026:	fb01 3302 	mla	r3, r1, r2, r3
   d702a:	435f      	muls	r7, r3
   d702c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d702e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7030:	4627      	mov	r7, r4
   d7032:	441d      	add	r5, r3
   d7034:	f04f 0900 	mov.w	r9, #0
   d7038:	782b      	ldrb	r3, [r5, #0]
   d703a:	2b2c      	cmp	r3, #44	; 0x2c
   d703c:	bf08      	it	eq
   d703e:	3501      	addeq	r5, #1
   d7040:	f895 8000 	ldrb.w	r8, [r5]
   d7044:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7048:	d126      	bne.n	d7098 <_tzset_unlocked_r+0x1f8>
   d704a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d704e:	9302      	str	r3, [sp, #8]
   d7050:	ab09      	add	r3, sp, #36	; 0x24
   d7052:	9300      	str	r3, [sp, #0]
   d7054:	9603      	str	r6, [sp, #12]
   d7056:	9601      	str	r6, [sp, #4]
   d7058:	4633      	mov	r3, r6
   d705a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d705e:	494d      	ldr	r1, [pc, #308]	; (d7194 <_tzset_unlocked_r+0x2f4>)
   d7060:	4628      	mov	r0, r5
   d7062:	f7fe f835 	bl	d50d0 <siscanf>
   d7066:	2803      	cmp	r0, #3
   d7068:	d17e      	bne.n	d7168 <_tzset_unlocked_r+0x2c8>
   d706a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d706e:	1e4b      	subs	r3, r1, #1
   d7070:	2b0b      	cmp	r3, #11
   d7072:	d879      	bhi.n	d7168 <_tzset_unlocked_r+0x2c8>
   d7074:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7078:	1e53      	subs	r3, r2, #1
   d707a:	2b04      	cmp	r3, #4
   d707c:	d874      	bhi.n	d7168 <_tzset_unlocked_r+0x2c8>
   d707e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7082:	2b06      	cmp	r3, #6
   d7084:	d870      	bhi.n	d7168 <_tzset_unlocked_r+0x2c8>
   d7086:	f887 8008 	strb.w	r8, [r7, #8]
   d708a:	60f9      	str	r1, [r7, #12]
   d708c:	613a      	str	r2, [r7, #16]
   d708e:	617b      	str	r3, [r7, #20]
   d7090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7092:	eb05 0803 	add.w	r8, r5, r3
   d7096:	e02a      	b.n	d70ee <_tzset_unlocked_r+0x24e>
   d7098:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d709c:	bf06      	itte	eq
   d709e:	3501      	addeq	r5, #1
   d70a0:	4643      	moveq	r3, r8
   d70a2:	2344      	movne	r3, #68	; 0x44
   d70a4:	220a      	movs	r2, #10
   d70a6:	a90b      	add	r1, sp, #44	; 0x2c
   d70a8:	4628      	mov	r0, r5
   d70aa:	9305      	str	r3, [sp, #20]
   d70ac:	f7ff fe3e 	bl	d6d2c <strtoul>
   d70b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d70b4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d70b8:	4545      	cmp	r5, r8
   d70ba:	9b05      	ldr	r3, [sp, #20]
   d70bc:	d114      	bne.n	d70e8 <_tzset_unlocked_r+0x248>
   d70be:	234d      	movs	r3, #77	; 0x4d
   d70c0:	f1b9 0f00 	cmp.w	r9, #0
   d70c4:	d107      	bne.n	d70d6 <_tzset_unlocked_r+0x236>
   d70c6:	7223      	strb	r3, [r4, #8]
   d70c8:	2303      	movs	r3, #3
   d70ca:	60e3      	str	r3, [r4, #12]
   d70cc:	2302      	movs	r3, #2
   d70ce:	6123      	str	r3, [r4, #16]
   d70d0:	f8c4 9014 	str.w	r9, [r4, #20]
   d70d4:	e00b      	b.n	d70ee <_tzset_unlocked_r+0x24e>
   d70d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d70da:	230b      	movs	r3, #11
   d70dc:	62a3      	str	r3, [r4, #40]	; 0x28
   d70de:	2301      	movs	r3, #1
   d70e0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d70e2:	2300      	movs	r3, #0
   d70e4:	6323      	str	r3, [r4, #48]	; 0x30
   d70e6:	e002      	b.n	d70ee <_tzset_unlocked_r+0x24e>
   d70e8:	b280      	uxth	r0, r0
   d70ea:	723b      	strb	r3, [r7, #8]
   d70ec:	6178      	str	r0, [r7, #20]
   d70ee:	2302      	movs	r3, #2
   d70f0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d70f4:	2300      	movs	r3, #0
   d70f6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d70fa:	f8ad 3020 	strh.w	r3, [sp, #32]
   d70fe:	930a      	str	r3, [sp, #40]	; 0x28
   d7100:	f898 3000 	ldrb.w	r3, [r8]
   d7104:	2b2f      	cmp	r3, #47	; 0x2f
   d7106:	d10b      	bne.n	d7120 <_tzset_unlocked_r+0x280>
   d7108:	9603      	str	r6, [sp, #12]
   d710a:	f8cd a008 	str.w	sl, [sp, #8]
   d710e:	9601      	str	r6, [sp, #4]
   d7110:	f8cd b000 	str.w	fp, [sp]
   d7114:	4633      	mov	r3, r6
   d7116:	aa07      	add	r2, sp, #28
   d7118:	491f      	ldr	r1, [pc, #124]	; (d7198 <_tzset_unlocked_r+0x2f8>)
   d711a:	4640      	mov	r0, r8
   d711c:	f7fd ffd8 	bl	d50d0 <siscanf>
   d7120:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7124:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7128:	213c      	movs	r1, #60	; 0x3c
   d712a:	fb01 3302 	mla	r3, r1, r2, r3
   d712e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7132:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7136:	fb01 3302 	mla	r3, r1, r2, r3
   d713a:	61bb      	str	r3, [r7, #24]
   d713c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d713e:	f109 0901 	add.w	r9, r9, #1
   d7142:	f1b9 0f02 	cmp.w	r9, #2
   d7146:	4445      	add	r5, r8
   d7148:	f107 071c 	add.w	r7, r7, #28
   d714c:	f47f af74 	bne.w	d7038 <_tzset_unlocked_r+0x198>
   d7150:	6860      	ldr	r0, [r4, #4]
   d7152:	f7ff fdf5 	bl	d6d40 <__tzcalc_limits>
   d7156:	4b08      	ldr	r3, [pc, #32]	; (d7178 <_tzset_unlocked_r+0x2d8>)
   d7158:	6a22      	ldr	r2, [r4, #32]
   d715a:	601a      	str	r2, [r3, #0]
   d715c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d715e:	1a9b      	subs	r3, r3, r2
   d7160:	4a07      	ldr	r2, [pc, #28]	; (d7180 <_tzset_unlocked_r+0x2e0>)
   d7162:	bf18      	it	ne
   d7164:	2301      	movne	r3, #1
   d7166:	6013      	str	r3, [r2, #0]
   d7168:	b00d      	add	sp, #52	; 0x34
   d716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d716e:	bf00      	nop
   d7170:	000d7970 	.word	0x000d7970
   d7174:	2003e7e0 	.word	0x2003e7e0
   d7178:	2003e7e8 	.word	0x2003e7e8
   d717c:	000d7973 	.word	0x000d7973
   d7180:	2003e7e4 	.word	0x2003e7e4
   d7184:	2003e2f4 	.word	0x2003e2f4
   d7188:	2003e7d3 	.word	0x2003e7d3
   d718c:	000d7977 	.word	0x000d7977
   d7190:	000d799a 	.word	0x000d799a
   d7194:	000d7986 	.word	0x000d7986
   d7198:	000d7999 	.word	0x000d7999
   d719c:	2003e7c8 	.word	0x2003e7c8

000d71a0 <_findenv_r>:
   d71a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d71a4:	4607      	mov	r7, r0
   d71a6:	468b      	mov	fp, r1
   d71a8:	4690      	mov	r8, r2
   d71aa:	f000 f8d9 	bl	d7360 <__env_lock>
   d71ae:	4b19      	ldr	r3, [pc, #100]	; (d7214 <_findenv_r+0x74>)
   d71b0:	681d      	ldr	r5, [r3, #0]
   d71b2:	469a      	mov	sl, r3
   d71b4:	b13d      	cbz	r5, d71c6 <_findenv_r+0x26>
   d71b6:	465c      	mov	r4, fp
   d71b8:	4623      	mov	r3, r4
   d71ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71be:	b142      	cbz	r2, d71d2 <_findenv_r+0x32>
   d71c0:	2a3d      	cmp	r2, #61	; 0x3d
   d71c2:	461c      	mov	r4, r3
   d71c4:	d1f8      	bne.n	d71b8 <_findenv_r+0x18>
   d71c6:	4638      	mov	r0, r7
   d71c8:	f000 f8cb 	bl	d7362 <__env_unlock>
   d71cc:	2000      	movs	r0, #0
   d71ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d71d2:	ebcb 0404 	rsb	r4, fp, r4
   d71d6:	46a9      	mov	r9, r5
   d71d8:	f859 0b04 	ldr.w	r0, [r9], #4
   d71dc:	2800      	cmp	r0, #0
   d71de:	d0f2      	beq.n	d71c6 <_findenv_r+0x26>
   d71e0:	4622      	mov	r2, r4
   d71e2:	4659      	mov	r1, fp
   d71e4:	f7ff fc7f 	bl	d6ae6 <strncmp>
   d71e8:	b988      	cbnz	r0, d720e <_findenv_r+0x6e>
   d71ea:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d71ee:	191e      	adds	r6, r3, r4
   d71f0:	5d1b      	ldrb	r3, [r3, r4]
   d71f2:	2b3d      	cmp	r3, #61	; 0x3d
   d71f4:	d10b      	bne.n	d720e <_findenv_r+0x6e>
   d71f6:	f8da 3000 	ldr.w	r3, [sl]
   d71fa:	1aed      	subs	r5, r5, r3
   d71fc:	10ad      	asrs	r5, r5, #2
   d71fe:	4638      	mov	r0, r7
   d7200:	f8c8 5000 	str.w	r5, [r8]
   d7204:	f000 f8ad 	bl	d7362 <__env_unlock>
   d7208:	1c70      	adds	r0, r6, #1
   d720a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d720e:	464d      	mov	r5, r9
   d7210:	e7e1      	b.n	d71d6 <_findenv_r+0x36>
   d7212:	bf00      	nop
   d7214:	2003e33c 	.word	0x2003e33c

000d7218 <_getenv_r>:
   d7218:	b507      	push	{r0, r1, r2, lr}
   d721a:	aa01      	add	r2, sp, #4
   d721c:	f7ff ffc0 	bl	d71a0 <_findenv_r>
   d7220:	b003      	add	sp, #12
   d7222:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7228 <__gettzinfo>:
   d7228:	4800      	ldr	r0, [pc, #0]	; (d722c <__gettzinfo+0x4>)
   d722a:	4770      	bx	lr
   d722c:	2003e2fc 	.word	0x2003e2fc

000d7230 <gmtime_r>:
   d7230:	6802      	ldr	r2, [r0, #0]
   d7232:	4b47      	ldr	r3, [pc, #284]	; (d7350 <gmtime_r+0x120>)
   d7234:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7236:	fb92 f4f3 	sdiv	r4, r2, r3
   d723a:	fb03 2214 	mls	r2, r3, r4, r2
   d723e:	2a00      	cmp	r2, #0
   d7240:	bfbc      	itt	lt
   d7242:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7246:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d724a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d724e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7252:	fb92 f3f0 	sdiv	r3, r2, r0
   d7256:	fb00 2213 	mls	r2, r0, r3, r2
   d725a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d725e:	bfac      	ite	ge
   d7260:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7264:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7268:	608b      	str	r3, [r1, #8]
   d726a:	fb92 f3f0 	sdiv	r3, r2, r0
   d726e:	fb00 2213 	mls	r2, r0, r3, r2
   d7272:	604b      	str	r3, [r1, #4]
   d7274:	600a      	str	r2, [r1, #0]
   d7276:	2307      	movs	r3, #7
   d7278:	1ce2      	adds	r2, r4, #3
   d727a:	fb92 f3f3 	sdiv	r3, r2, r3
   d727e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7282:	1ad3      	subs	r3, r2, r3
   d7284:	618b      	str	r3, [r1, #24]
   d7286:	4b33      	ldr	r3, [pc, #204]	; (d7354 <gmtime_r+0x124>)
   d7288:	4d33      	ldr	r5, [pc, #204]	; (d7358 <gmtime_r+0x128>)
   d728a:	fb94 f5f5 	sdiv	r5, r4, r5
   d728e:	fb03 4405 	mla	r4, r3, r5, r4
   d7292:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7296:	fbb4 f2f2 	udiv	r2, r4, r2
   d729a:	4422      	add	r2, r4
   d729c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d72a0:	fbb4 f3f7 	udiv	r3, r4, r7
   d72a4:	1ad2      	subs	r2, r2, r3
   d72a6:	482d      	ldr	r0, [pc, #180]	; (d735c <gmtime_r+0x12c>)
   d72a8:	fbb4 f0f0 	udiv	r0, r4, r0
   d72ac:	f648 6694 	movw	r6, #36500	; 0x8e94
   d72b0:	1a13      	subs	r3, r2, r0
   d72b2:	fbb3 f6f6 	udiv	r6, r3, r6
   d72b6:	4434      	add	r4, r6
   d72b8:	f240 126d 	movw	r2, #365	; 0x16d
   d72bc:	fbb3 f0f2 	udiv	r0, r3, r2
   d72c0:	fbb3 f3f7 	udiv	r3, r3, r7
   d72c4:	1ae3      	subs	r3, r4, r3
   d72c6:	fb02 3310 	mls	r3, r2, r0, r3
   d72ca:	2499      	movs	r4, #153	; 0x99
   d72cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d72d0:	3202      	adds	r2, #2
   d72d2:	fbb2 f2f4 	udiv	r2, r2, r4
   d72d6:	2a0a      	cmp	r2, #10
   d72d8:	fb04 f402 	mul.w	r4, r4, r2
   d72dc:	f104 0602 	add.w	r6, r4, #2
   d72e0:	f04f 0405 	mov.w	r4, #5
   d72e4:	fbb6 f4f4 	udiv	r4, r6, r4
   d72e8:	bf34      	ite	cc
   d72ea:	2602      	movcc	r6, #2
   d72ec:	f06f 0609 	mvncs.w	r6, #9
   d72f0:	4416      	add	r6, r2
   d72f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d72f6:	fb02 0505 	mla	r5, r2, r5, r0
   d72fa:	1c5f      	adds	r7, r3, #1
   d72fc:	2e01      	cmp	r6, #1
   d72fe:	bf98      	it	ls
   d7300:	3501      	addls	r5, #1
   d7302:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7306:	eba7 0704 	sub.w	r7, r7, r4
   d730a:	d302      	bcc.n	d7312 <gmtime_r+0xe2>
   d730c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7310:	e014      	b.n	d733c <gmtime_r+0x10c>
   d7312:	0782      	lsls	r2, r0, #30
   d7314:	d105      	bne.n	d7322 <gmtime_r+0xf2>
   d7316:	2464      	movs	r4, #100	; 0x64
   d7318:	fbb0 f2f4 	udiv	r2, r0, r4
   d731c:	fb04 0212 	mls	r2, r4, r2, r0
   d7320:	b94a      	cbnz	r2, d7336 <gmtime_r+0x106>
   d7322:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7326:	fbb0 f4f2 	udiv	r4, r0, r2
   d732a:	fb02 0014 	mls	r0, r2, r4, r0
   d732e:	fab0 f280 	clz	r2, r0
   d7332:	0952      	lsrs	r2, r2, #5
   d7334:	e000      	b.n	d7338 <gmtime_r+0x108>
   d7336:	2201      	movs	r2, #1
   d7338:	333b      	adds	r3, #59	; 0x3b
   d733a:	441a      	add	r2, r3
   d733c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7340:	2300      	movs	r3, #0
   d7342:	61ca      	str	r2, [r1, #28]
   d7344:	614d      	str	r5, [r1, #20]
   d7346:	610e      	str	r6, [r1, #16]
   d7348:	60cf      	str	r7, [r1, #12]
   d734a:	620b      	str	r3, [r1, #32]
   d734c:	4608      	mov	r0, r1
   d734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7350:	00015180 	.word	0x00015180
   d7354:	fffdc54f 	.word	0xfffdc54f
   d7358:	00023ab1 	.word	0x00023ab1
   d735c:	00023ab0 	.word	0x00023ab0

000d7360 <__env_lock>:
   d7360:	4770      	bx	lr

000d7362 <__env_unlock>:
   d7362:	4770      	bx	lr

000d7364 <dynalib_user>:
   d7364:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7374:	0000 0000 0030 0032 0033 5452 2043 6954     ....0.2.3.RTC Ti
   d7384:	656d 5200 6c65 6165 6573 5300 7465 542d     me.Release.Set-T
   d7394:	6d69 7a65 6e6f 0065 6c41 7261 2d6d 6f4d     imezone.Alarm-Mo
   d73a4:	6564 4100 616c 6d72 532d 6365 6e6f 7364     de.Alarm-Seconds
   d73b4:	4300 6f6c 6b63 4e20 746f 5320 7465 5400     .Clock Not Set.T
   d73c4:	6d69 7265 4300 6568 6b63 7420 6568 6f20     imer.Check the o
   d73d4:	6373 6c69 616c 6f74 0072 6f47 6e69 2067     scillator.Going 
   d73e4:	6f74 7320 656c 7065 6620 726f 2520 2069     to sleep for %i 
   d73f4:	6573 6f63 646e 0073 6c41 7261 006d 6552     seconds.Alarm.Re
   d7404:	6570 7461 6e69 2067 7665 7265 2079 696d     peating every mi
   d7414:	756e 6574 5200 7065 6165 6974 676e 6520     nute.Repeating e
   d7424:	6576 7972 6820 756f 0072 6c41 7261 206d     very hour.Alarm 
   d7434:	6564 6574 7463 6465 5400 6d69 2065 6f7a     detected.Time zo
   d7444:	656e 6f20 6666 6573 2074 6925 5000 7261     ne offset %i.Par
   d7454:	6974 6c63 2065 6954 656d 5300 656c 7065     ticle Time.Sleep
   d7464:	5320 6365 6e6f 7364 7320 7465 7420 206f      Seconds set to 
   d7474:	6c25 0064                                   %ld.

000d7478 <_ZL13releaseNumber>:
   d7478:	2e30 3131 0000 0000                         0.11....

000d7480 <_ZL9monthdays>:
   d7480:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   d7490:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   d74a0:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000d74b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d74b8:	5139 000d 513f 000d 5169 000d 514d 000d     9Q..?Q..iQ..MQ..
   d74c8:	513b 000d                                   ;Q..

000d74cc <_ZTVN5spark13EthernetClassE>:
	...
   d74d4:	5743 000d 5739 000d 572f 000d 5725 000d     CW..9W../W..%W..
   d74e4:	5719 000d 570d 000d 5701 000d 56f9 000d     .W...W...W...V..
   d74f4:	56ef 000d 56e5 000d 5b35 000d               .V...V..5[..

000d7500 <_ZTV7TwoWire>:
	...
   d7508:	5761 000d 57ab 000d 5783 000d 5763 000d     aW...W...W..cW..
   d7518:	578b 000d 5793 000d 579b 000d 57a3 000d     .W...W...W...W..

000d7528 <_ZTV9IPAddress>:
	...
   d7530:	5889 000d 5879 000d 587b 000d 0066 6e6c     .X..yX..{X..f.ln
   d7540:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d7550:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d7560:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d7570:	203d 6400 7465 6961 736c 3d20 0020 6162     = .details = .ba
   d7580:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d7590:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d75a0:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d75b0:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d75c0:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d75d0:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d75e0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d75f0:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d7600:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d7610:	6170 696e 0063 6c61 006c 0000               panic.all...

000d761c <_ZTVN5spark9MeshClassE>:
	...
   d7624:	59cb 000d 59c1 000d 59b7 000d 59ad 000d     .Y...Y...Y...Y..
   d7634:	59a1 000d 5995 000d 5989 000d 5981 000d     .Y...Y...Y...Y..
   d7644:	5977 000d 596d 000d 5b35 000d               wY..mY..5[..

000d7650 <_ZTVN5spark12NetworkClassE>:
	...
   d7658:	5acd 000d 5ad7 000d 5ae1 000d 5aeb 000d     .Z...Z...Z...Z..
   d7668:	5af5 000d 5b01 000d 5b0d 000d 5b19 000d     .Z...[...[...[..
   d7678:	5b21 000d 5b2b 000d 5b35 000d               ![..+[..5[..

000d7684 <_ZTV8SPIClass>:
	...
   d768c:	5ced 000d 5cef 000d 2b25 3330 3a64 3025     .\...\..%+03d:%0
   d769c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d76ac:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d76bc <_ZTV11USARTSerial>:
	...
   d76c4:	6039 000d 6089 000d 6097 000d 5c15 000d     9`...`...`...\..
   d76d4:	604d 000d 606f 000d 605b 000d 6083 000d     M`..o`..[`...`..
   d76e4:	603b 000d 603f 000d                         ;`..?`..

000d76ec <_ZTV9USBSerial>:
	...
   d76f4:	6141 000d 6191 000d 619f 000d 5c15 000d     Aa...a...a...\..
   d7704:	617d 000d 6143 000d 6159 000d 618b 000d     }a..Ca..Ya...a..
   d7714:	616f 000d 613d 000d                         oa..=a..

000d771c <_ZTVN5spark9WiFiClassE>:
	...
   d7724:	62a3 000d 6299 000d 628f 000d 6245 000d     .b...b...b..Eb..
   d7734:	6283 000d 6277 000d 626b 000d 6263 000d     .b..wb..kb..cb..
   d7744:	6259 000d 624f 000d 5b35 000d               Yb..Ob..5[..

000d7750 <day_name.4725>:
   d7750:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d7760:	6972 6153 4a74                                   riSat

000d7765 <mon_name.4726>:
   d7765:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d7775:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d7785:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d7795:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d77a5:	6425 000a                                   %d..

000d77a9 <_ctype_>:
   d77a9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d77b9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d77c9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d77d9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d77e9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d77f9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7809:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7819:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7829:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d78ac <__sf_fake_stdin>:
	...

000d78cc <__sf_fake_stdout>:
	...

000d78ec <__sf_fake_stderr>:
	...
   d790c:	0043 0000                                   C...

000d7910 <__month_lengths>:
   d7910:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d7920:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7930:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7940:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d7950:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d7960:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d7970:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d7980:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d7990:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d79a0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d79ac <link_const_variable_data_end>:
   d79ac:	000d4655 	.word	0x000d4655
   d79b0:	000d4c05 	.word	0x000d4c05
   d79b4:	000d574d 	.word	0x000d574d
   d79b8:	000d595d 	.word	0x000d595d
   d79bc:	000d5a81 	.word	0x000d5a81
   d79c0:	000d5c01 	.word	0x000d5c01
   d79c4:	000d5cd1 	.word	0x000d5cd1
   d79c8:	000d5e39 	.word	0x000d5e39
   d79cc:	000d6025 	.word	0x000d6025
   d79d0:	000d62ad 	.word	0x000d62ad
   d79d4:	000d6499 	.word	0x000d6499
   d79d8:	000d64f1 	.word	0x000d64f1
   d79dc:	000d65b5 	.word	0x000d65b5
   d79e0:	000d6639 	.word	0x000d6639
   d79e4:	000d66bd 	.word	0x000d66bd

000d79e8 <link_constructors_end>:
	...
